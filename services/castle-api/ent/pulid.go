// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
)

// prefixMap maps PULID prefixes to table names.
var prefixMap = map[pulid.ID]string{
	"FE": file.Table,
	"ME": message.Table,
	"MA": messageattachment.Table,
	"ML": messagelink.Table,
	"MV": messagevoice.Table,
	"RO": room.Table,
	"RM": roommember.Table,
	"UR": user.Table,
	"UC": usercontact.Table,
}

// tableMap maps table names to PULID prefixes.
var tableMap = map[string]pulid.ID{
	file.Table:              "FE",
	message.Table:           "ME",
	messageattachment.Table: "MA",
	messagelink.Table:       "ML",
	messagevoice.Table:      "MV",
	room.Table:              "RO",
	roommember.Table:        "RM",
	user.Table:              "UR",
	usercontact.Table:       "UC",
}

// IDToType maps a pulid.ID to the underlying table.
func IDToType(id pulid.ID) (string, error) {
	if len(id) < 2 {
		return "", fmt.Errorf("IDToType: id too short")
	}
	prefix := id[:2]
	typ := prefixMap[prefix]
	if typ == "" {
		return "", fmt.Errorf("IDToType: could not map prefix '%s' to a type", prefix)
	}
	return typ, nil
}

// TableToPrefix maps table name to PULID prefix.
func TableToPrefix(table string) (string, error) {
	typ := tableMap[table]
	if typ == "" {
		return "", fmt.Errorf("TableToPrefix: could not map table '%s' to a type", table)
	}
	return string(typ), nil
}
