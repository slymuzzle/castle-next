// Code generated by ent, DO NOT EDIT.

package roommember

import (
	"journeyhub/ent/predicate"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLTE(FieldID, id))
}

// UnreadMessagesCount applies equality check predicate on the "unread_messages_count" field. It's identical to UnreadMessagesCountEQ.
func UnreadMessagesCount(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldUnreadMessagesCount, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldUserID, v))
}

// RoomID applies equality check predicate on the "room_id" field. It's identical to RoomIDEQ.
func RoomID(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldRoomID, v))
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldJoinedAt, v))
}

// UnreadMessagesCountEQ applies the EQ predicate on the "unread_messages_count" field.
func UnreadMessagesCountEQ(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldUnreadMessagesCount, v))
}

// UnreadMessagesCountNEQ applies the NEQ predicate on the "unread_messages_count" field.
func UnreadMessagesCountNEQ(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNEQ(FieldUnreadMessagesCount, v))
}

// UnreadMessagesCountIn applies the In predicate on the "unread_messages_count" field.
func UnreadMessagesCountIn(vs ...int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldIn(FieldUnreadMessagesCount, vs...))
}

// UnreadMessagesCountNotIn applies the NotIn predicate on the "unread_messages_count" field.
func UnreadMessagesCountNotIn(vs ...int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNotIn(FieldUnreadMessagesCount, vs...))
}

// UnreadMessagesCountGT applies the GT predicate on the "unread_messages_count" field.
func UnreadMessagesCountGT(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGT(FieldUnreadMessagesCount, v))
}

// UnreadMessagesCountGTE applies the GTE predicate on the "unread_messages_count" field.
func UnreadMessagesCountGTE(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGTE(FieldUnreadMessagesCount, v))
}

// UnreadMessagesCountLT applies the LT predicate on the "unread_messages_count" field.
func UnreadMessagesCountLT(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLT(FieldUnreadMessagesCount, v))
}

// UnreadMessagesCountLTE applies the LTE predicate on the "unread_messages_count" field.
func UnreadMessagesCountLTE(v int) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLTE(FieldUnreadMessagesCount, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldContainsFold(FieldUserID, vc))
}

// RoomIDEQ applies the EQ predicate on the "room_id" field.
func RoomIDEQ(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldRoomID, v))
}

// RoomIDNEQ applies the NEQ predicate on the "room_id" field.
func RoomIDNEQ(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNEQ(FieldRoomID, v))
}

// RoomIDIn applies the In predicate on the "room_id" field.
func RoomIDIn(vs ...pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldIn(FieldRoomID, vs...))
}

// RoomIDNotIn applies the NotIn predicate on the "room_id" field.
func RoomIDNotIn(vs ...pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNotIn(FieldRoomID, vs...))
}

// RoomIDGT applies the GT predicate on the "room_id" field.
func RoomIDGT(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGT(FieldRoomID, v))
}

// RoomIDGTE applies the GTE predicate on the "room_id" field.
func RoomIDGTE(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGTE(FieldRoomID, v))
}

// RoomIDLT applies the LT predicate on the "room_id" field.
func RoomIDLT(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLT(FieldRoomID, v))
}

// RoomIDLTE applies the LTE predicate on the "room_id" field.
func RoomIDLTE(v pulid.ID) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLTE(FieldRoomID, v))
}

// RoomIDContains applies the Contains predicate on the "room_id" field.
func RoomIDContains(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldContains(FieldRoomID, vc))
}

// RoomIDHasPrefix applies the HasPrefix predicate on the "room_id" field.
func RoomIDHasPrefix(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldHasPrefix(FieldRoomID, vc))
}

// RoomIDHasSuffix applies the HasSuffix predicate on the "room_id" field.
func RoomIDHasSuffix(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldHasSuffix(FieldRoomID, vc))
}

// RoomIDEqualFold applies the EqualFold predicate on the "room_id" field.
func RoomIDEqualFold(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldEqualFold(FieldRoomID, vc))
}

// RoomIDContainsFold applies the ContainsFold predicate on the "room_id" field.
func RoomIDContainsFold(v pulid.ID) predicate.RoomMember {
	vc := string(v)
	return predicate.RoomMember(sql.FieldContainsFold(FieldRoomID, vc))
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldEQ(FieldJoinedAt, v))
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNEQ(FieldJoinedAt, v))
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldIn(FieldJoinedAt, vs...))
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldNotIn(FieldJoinedAt, vs...))
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGT(FieldJoinedAt, v))
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldGTE(FieldJoinedAt, v))
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLT(FieldJoinedAt, v))
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v time.Time) predicate.RoomMember {
	return predicate.RoomMember(sql.FieldLTE(FieldJoinedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.RoomMember {
	return predicate.RoomMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.RoomMember {
	return predicate.RoomMember(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.RoomMember {
	return predicate.RoomMember(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.RoomMember {
	return predicate.RoomMember(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RoomMember) predicate.RoomMember {
	return predicate.RoomMember(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RoomMember) predicate.RoomMember {
	return predicate.RoomMember(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoomMember) predicate.RoomMember {
	return predicate.RoomMember(sql.NotPredicates(p))
}
