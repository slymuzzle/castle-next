// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(s string) *MessageUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableContent(s *string) *MessageUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// ClearContent clears the value of the "content" field.
func (mu *MessageUpdate) ClearContent() *MessageUpdate {
	mu.mutation.ClearContent()
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessageUpdate) SetUpdatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetVoiceID sets the "voice" edge to the MessageVoice entity by ID.
func (mu *MessageUpdate) SetVoiceID(id pulid.ID) *MessageUpdate {
	mu.mutation.SetVoiceID(id)
	return mu
}

// SetNillableVoiceID sets the "voice" edge to the MessageVoice entity by ID if the given value is not nil.
func (mu *MessageUpdate) SetNillableVoiceID(id *pulid.ID) *MessageUpdate {
	if id != nil {
		mu = mu.SetVoiceID(*id)
	}
	return mu
}

// SetVoice sets the "voice" edge to the MessageVoice entity.
func (mu *MessageUpdate) SetVoice(m *MessageVoice) *MessageUpdate {
	return mu.SetVoiceID(m.ID)
}

// SetReplyToID sets the "reply_to" edge to the Message entity by ID.
func (mu *MessageUpdate) SetReplyToID(id pulid.ID) *MessageUpdate {
	mu.mutation.SetReplyToID(id)
	return mu
}

// SetNillableReplyToID sets the "reply_to" edge to the Message entity by ID if the given value is not nil.
func (mu *MessageUpdate) SetNillableReplyToID(id *pulid.ID) *MessageUpdate {
	if id != nil {
		mu = mu.SetReplyToID(*id)
	}
	return mu
}

// SetReplyTo sets the "reply_to" edge to the Message entity.
func (mu *MessageUpdate) SetReplyTo(m *Message) *MessageUpdate {
	return mu.SetReplyToID(m.ID)
}

// AddReplyIDs adds the "replies" edge to the Message entity by IDs.
func (mu *MessageUpdate) AddReplyIDs(ids ...pulid.ID) *MessageUpdate {
	mu.mutation.AddReplyIDs(ids...)
	return mu
}

// AddReplies adds the "replies" edges to the Message entity.
func (mu *MessageUpdate) AddReplies(m ...*Message) *MessageUpdate {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddReplyIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the MessageAttachment entity by IDs.
func (mu *MessageUpdate) AddAttachmentIDs(ids ...pulid.ID) *MessageUpdate {
	mu.mutation.AddAttachmentIDs(ids...)
	return mu
}

// AddAttachments adds the "attachments" edges to the MessageAttachment entity.
func (mu *MessageUpdate) AddAttachments(m ...*MessageAttachment) *MessageUpdate {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddAttachmentIDs(ids...)
}

// AddLinkIDs adds the "links" edge to the MessageLink entity by IDs.
func (mu *MessageUpdate) AddLinkIDs(ids ...pulid.ID) *MessageUpdate {
	mu.mutation.AddLinkIDs(ids...)
	return mu
}

// AddLinks adds the "links" edges to the MessageLink entity.
func (mu *MessageUpdate) AddLinks(m ...*MessageLink) *MessageUpdate {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.AddLinkIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MessageUpdate) SetUserID(id pulid.ID) *MessageUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (mu *MessageUpdate) SetNillableUserID(id *pulid.ID) *MessageUpdate {
	if id != nil {
		mu = mu.SetUserID(*id)
	}
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MessageUpdate) SetUser(u *User) *MessageUpdate {
	return mu.SetUserID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (mu *MessageUpdate) SetRoomID(id pulid.ID) *MessageUpdate {
	mu.mutation.SetRoomID(id)
	return mu
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (mu *MessageUpdate) SetNillableRoomID(id *pulid.ID) *MessageUpdate {
	if id != nil {
		mu = mu.SetRoomID(*id)
	}
	return mu
}

// SetRoom sets the "room" edge to the Room entity.
func (mu *MessageUpdate) SetRoom(r *Room) *MessageUpdate {
	return mu.SetRoomID(r.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearVoice clears the "voice" edge to the MessageVoice entity.
func (mu *MessageUpdate) ClearVoice() *MessageUpdate {
	mu.mutation.ClearVoice()
	return mu
}

// ClearReplyTo clears the "reply_to" edge to the Message entity.
func (mu *MessageUpdate) ClearReplyTo() *MessageUpdate {
	mu.mutation.ClearReplyTo()
	return mu
}

// ClearReplies clears all "replies" edges to the Message entity.
func (mu *MessageUpdate) ClearReplies() *MessageUpdate {
	mu.mutation.ClearReplies()
	return mu
}

// RemoveReplyIDs removes the "replies" edge to Message entities by IDs.
func (mu *MessageUpdate) RemoveReplyIDs(ids ...pulid.ID) *MessageUpdate {
	mu.mutation.RemoveReplyIDs(ids...)
	return mu
}

// RemoveReplies removes "replies" edges to Message entities.
func (mu *MessageUpdate) RemoveReplies(m ...*Message) *MessageUpdate {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveReplyIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the MessageAttachment entity.
func (mu *MessageUpdate) ClearAttachments() *MessageUpdate {
	mu.mutation.ClearAttachments()
	return mu
}

// RemoveAttachmentIDs removes the "attachments" edge to MessageAttachment entities by IDs.
func (mu *MessageUpdate) RemoveAttachmentIDs(ids ...pulid.ID) *MessageUpdate {
	mu.mutation.RemoveAttachmentIDs(ids...)
	return mu
}

// RemoveAttachments removes "attachments" edges to MessageAttachment entities.
func (mu *MessageUpdate) RemoveAttachments(m ...*MessageAttachment) *MessageUpdate {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveAttachmentIDs(ids...)
}

// ClearLinks clears all "links" edges to the MessageLink entity.
func (mu *MessageUpdate) ClearLinks() *MessageUpdate {
	mu.mutation.ClearLinks()
	return mu
}

// RemoveLinkIDs removes the "links" edge to MessageLink entities by IDs.
func (mu *MessageUpdate) RemoveLinkIDs(ids ...pulid.ID) *MessageUpdate {
	mu.mutation.RemoveLinkIDs(ids...)
	return mu
}

// RemoveLinks removes "links" edges to MessageLink entities.
func (mu *MessageUpdate) RemoveLinks(m ...*MessageLink) *MessageUpdate {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mu.RemoveLinkIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MessageUpdate) ClearUser() *MessageUpdate {
	mu.mutation.ClearUser()
	return mu
}

// ClearRoom clears the "room" edge to the Room entity.
func (mu *MessageUpdate) ClearRoom() *MessageUpdate {
	mu.mutation.ClearRoom()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if mu.mutation.ContentCleared() {
		_spec.ClearField(message.FieldContent, field.TypeString)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.VoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.VoiceTable,
			Columns: []string{message.VoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.VoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.VoiceTable,
			Columns: []string{message.VoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.ReplyToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ReplyToTable,
			Columns: []string{message.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ReplyToTable,
			Columns: []string{message.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RepliesTable,
			Columns: []string{message.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !mu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RepliesTable,
			Columns: []string{message.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RepliesTable,
			Columns: []string{message.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !mu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.LinksTable,
			Columns: []string{message.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedLinksIDs(); len(nodes) > 0 && !mu.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.LinksTable,
			Columns: []string{message.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.LinksTable,
			Columns: []string{message.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(s string) *MessageUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableContent(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// ClearContent clears the value of the "content" field.
func (muo *MessageUpdateOne) ClearContent() *MessageUpdateOne {
	muo.mutation.ClearContent()
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessageUpdateOne) SetUpdatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetVoiceID sets the "voice" edge to the MessageVoice entity by ID.
func (muo *MessageUpdateOne) SetVoiceID(id pulid.ID) *MessageUpdateOne {
	muo.mutation.SetVoiceID(id)
	return muo
}

// SetNillableVoiceID sets the "voice" edge to the MessageVoice entity by ID if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableVoiceID(id *pulid.ID) *MessageUpdateOne {
	if id != nil {
		muo = muo.SetVoiceID(*id)
	}
	return muo
}

// SetVoice sets the "voice" edge to the MessageVoice entity.
func (muo *MessageUpdateOne) SetVoice(m *MessageVoice) *MessageUpdateOne {
	return muo.SetVoiceID(m.ID)
}

// SetReplyToID sets the "reply_to" edge to the Message entity by ID.
func (muo *MessageUpdateOne) SetReplyToID(id pulid.ID) *MessageUpdateOne {
	muo.mutation.SetReplyToID(id)
	return muo
}

// SetNillableReplyToID sets the "reply_to" edge to the Message entity by ID if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableReplyToID(id *pulid.ID) *MessageUpdateOne {
	if id != nil {
		muo = muo.SetReplyToID(*id)
	}
	return muo
}

// SetReplyTo sets the "reply_to" edge to the Message entity.
func (muo *MessageUpdateOne) SetReplyTo(m *Message) *MessageUpdateOne {
	return muo.SetReplyToID(m.ID)
}

// AddReplyIDs adds the "replies" edge to the Message entity by IDs.
func (muo *MessageUpdateOne) AddReplyIDs(ids ...pulid.ID) *MessageUpdateOne {
	muo.mutation.AddReplyIDs(ids...)
	return muo
}

// AddReplies adds the "replies" edges to the Message entity.
func (muo *MessageUpdateOne) AddReplies(m ...*Message) *MessageUpdateOne {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddReplyIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the MessageAttachment entity by IDs.
func (muo *MessageUpdateOne) AddAttachmentIDs(ids ...pulid.ID) *MessageUpdateOne {
	muo.mutation.AddAttachmentIDs(ids...)
	return muo
}

// AddAttachments adds the "attachments" edges to the MessageAttachment entity.
func (muo *MessageUpdateOne) AddAttachments(m ...*MessageAttachment) *MessageUpdateOne {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddAttachmentIDs(ids...)
}

// AddLinkIDs adds the "links" edge to the MessageLink entity by IDs.
func (muo *MessageUpdateOne) AddLinkIDs(ids ...pulid.ID) *MessageUpdateOne {
	muo.mutation.AddLinkIDs(ids...)
	return muo
}

// AddLinks adds the "links" edges to the MessageLink entity.
func (muo *MessageUpdateOne) AddLinks(m ...*MessageLink) *MessageUpdateOne {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.AddLinkIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MessageUpdateOne) SetUserID(id pulid.ID) *MessageUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableUserID(id *pulid.ID) *MessageUpdateOne {
	if id != nil {
		muo = muo.SetUserID(*id)
	}
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MessageUpdateOne) SetUser(u *User) *MessageUpdateOne {
	return muo.SetUserID(u.ID)
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (muo *MessageUpdateOne) SetRoomID(id pulid.ID) *MessageUpdateOne {
	muo.mutation.SetRoomID(id)
	return muo
}

// SetNillableRoomID sets the "room" edge to the Room entity by ID if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableRoomID(id *pulid.ID) *MessageUpdateOne {
	if id != nil {
		muo = muo.SetRoomID(*id)
	}
	return muo
}

// SetRoom sets the "room" edge to the Room entity.
func (muo *MessageUpdateOne) SetRoom(r *Room) *MessageUpdateOne {
	return muo.SetRoomID(r.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearVoice clears the "voice" edge to the MessageVoice entity.
func (muo *MessageUpdateOne) ClearVoice() *MessageUpdateOne {
	muo.mutation.ClearVoice()
	return muo
}

// ClearReplyTo clears the "reply_to" edge to the Message entity.
func (muo *MessageUpdateOne) ClearReplyTo() *MessageUpdateOne {
	muo.mutation.ClearReplyTo()
	return muo
}

// ClearReplies clears all "replies" edges to the Message entity.
func (muo *MessageUpdateOne) ClearReplies() *MessageUpdateOne {
	muo.mutation.ClearReplies()
	return muo
}

// RemoveReplyIDs removes the "replies" edge to Message entities by IDs.
func (muo *MessageUpdateOne) RemoveReplyIDs(ids ...pulid.ID) *MessageUpdateOne {
	muo.mutation.RemoveReplyIDs(ids...)
	return muo
}

// RemoveReplies removes "replies" edges to Message entities.
func (muo *MessageUpdateOne) RemoveReplies(m ...*Message) *MessageUpdateOne {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveReplyIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the MessageAttachment entity.
func (muo *MessageUpdateOne) ClearAttachments() *MessageUpdateOne {
	muo.mutation.ClearAttachments()
	return muo
}

// RemoveAttachmentIDs removes the "attachments" edge to MessageAttachment entities by IDs.
func (muo *MessageUpdateOne) RemoveAttachmentIDs(ids ...pulid.ID) *MessageUpdateOne {
	muo.mutation.RemoveAttachmentIDs(ids...)
	return muo
}

// RemoveAttachments removes "attachments" edges to MessageAttachment entities.
func (muo *MessageUpdateOne) RemoveAttachments(m ...*MessageAttachment) *MessageUpdateOne {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveAttachmentIDs(ids...)
}

// ClearLinks clears all "links" edges to the MessageLink entity.
func (muo *MessageUpdateOne) ClearLinks() *MessageUpdateOne {
	muo.mutation.ClearLinks()
	return muo
}

// RemoveLinkIDs removes the "links" edge to MessageLink entities by IDs.
func (muo *MessageUpdateOne) RemoveLinkIDs(ids ...pulid.ID) *MessageUpdateOne {
	muo.mutation.RemoveLinkIDs(ids...)
	return muo
}

// RemoveLinks removes "links" edges to MessageLink entities.
func (muo *MessageUpdateOne) RemoveLinks(m ...*MessageLink) *MessageUpdateOne {
	ids := make([]pulid.ID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return muo.RemoveLinkIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MessageUpdateOne) ClearUser() *MessageUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// ClearRoom clears the "room" edge to the Room entity.
func (muo *MessageUpdateOne) ClearRoom() *MessageUpdateOne {
	muo.mutation.ClearRoom()
	return muo
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if muo.mutation.ContentCleared() {
		_spec.ClearField(message.FieldContent, field.TypeString)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.VoiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.VoiceTable,
			Columns: []string{message.VoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.VoiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   message.VoiceTable,
			Columns: []string{message.VoiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.ReplyToCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ReplyToTable,
			Columns: []string{message.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ReplyToIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.ReplyToTable,
			Columns: []string{message.ReplyToColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RepliesTable,
			Columns: []string{message.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !muo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RepliesTable,
			Columns: []string{message.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.RepliesTable,
			Columns: []string{message.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !muo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.AttachmentsTable,
			Columns: []string{message.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.LinksTable,
			Columns: []string{message.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedLinksIDs(); len(nodes) > 0 && !muo.mutation.LinksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.LinksTable,
			Columns: []string{message.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.LinksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   message.LinksTable,
			Columns: []string{message.LinksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.UserTable,
			Columns: []string{message.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RoomTable,
			Columns: []string{message.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
