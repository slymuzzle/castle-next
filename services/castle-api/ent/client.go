// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"journeyhub/ent/migrate"
	"journeyhub/ent/schema/pulid"

	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"journeyhub/ent/userpincode"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// File is the client for interacting with the File builders.
	File *FileClient
	// Message is the client for interacting with the Message builders.
	Message *MessageClient
	// MessageAttachment is the client for interacting with the MessageAttachment builders.
	MessageAttachment *MessageAttachmentClient
	// MessageLink is the client for interacting with the MessageLink builders.
	MessageLink *MessageLinkClient
	// MessageVoice is the client for interacting with the MessageVoice builders.
	MessageVoice *MessageVoiceClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// RoomMember is the client for interacting with the RoomMember builders.
	RoomMember *RoomMemberClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserContact is the client for interacting with the UserContact builders.
	UserContact *UserContactClient
	// UserPinCode is the client for interacting with the UserPinCode builders.
	UserPinCode *UserPinCodeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.File = NewFileClient(c.config)
	c.Message = NewMessageClient(c.config)
	c.MessageAttachment = NewMessageAttachmentClient(c.config)
	c.MessageLink = NewMessageLinkClient(c.config)
	c.MessageVoice = NewMessageVoiceClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.RoomMember = NewRoomMemberClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserContact = NewUserContactClient(c.config)
	c.UserPinCode = NewUserPinCodeClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		File:              NewFileClient(cfg),
		Message:           NewMessageClient(cfg),
		MessageAttachment: NewMessageAttachmentClient(cfg),
		MessageLink:       NewMessageLinkClient(cfg),
		MessageVoice:      NewMessageVoiceClient(cfg),
		Room:              NewRoomClient(cfg),
		RoomMember:        NewRoomMemberClient(cfg),
		User:              NewUserClient(cfg),
		UserContact:       NewUserContactClient(cfg),
		UserPinCode:       NewUserPinCodeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:               ctx,
		config:            cfg,
		File:              NewFileClient(cfg),
		Message:           NewMessageClient(cfg),
		MessageAttachment: NewMessageAttachmentClient(cfg),
		MessageLink:       NewMessageLinkClient(cfg),
		MessageVoice:      NewMessageVoiceClient(cfg),
		Room:              NewRoomClient(cfg),
		RoomMember:        NewRoomMemberClient(cfg),
		User:              NewUserClient(cfg),
		UserContact:       NewUserContactClient(cfg),
		UserPinCode:       NewUserPinCodeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		File.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.File, c.Message, c.MessageAttachment, c.MessageLink, c.MessageVoice, c.Room,
		c.RoomMember, c.User, c.UserContact, c.UserPinCode,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.File, c.Message, c.MessageAttachment, c.MessageLink, c.MessageVoice, c.Room,
		c.RoomMember, c.User, c.UserContact, c.UserPinCode,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *FileMutation:
		return c.File.mutate(ctx, m)
	case *MessageMutation:
		return c.Message.mutate(ctx, m)
	case *MessageAttachmentMutation:
		return c.MessageAttachment.mutate(ctx, m)
	case *MessageLinkMutation:
		return c.MessageLink.mutate(ctx, m)
	case *MessageVoiceMutation:
		return c.MessageVoice.mutate(ctx, m)
	case *RoomMutation:
		return c.Room.mutate(ctx, m)
	case *RoomMemberMutation:
		return c.RoomMember.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserContactMutation:
		return c.UserContact.mutate(ctx, m)
	case *UserPinCodeMutation:
		return c.UserPinCode.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// FileClient is a client for the File schema.
type FileClient struct {
	config
}

// NewFileClient returns a client for the File from the given config.
func NewFileClient(c config) *FileClient {
	return &FileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `file.Hooks(f(g(h())))`.
func (c *FileClient) Use(hooks ...Hook) {
	c.hooks.File = append(c.hooks.File, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `file.Intercept(f(g(h())))`.
func (c *FileClient) Intercept(interceptors ...Interceptor) {
	c.inters.File = append(c.inters.File, interceptors...)
}

// Create returns a builder for creating a File entity.
func (c *FileClient) Create() *FileCreate {
	mutation := newFileMutation(c.config, OpCreate)
	return &FileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of File entities.
func (c *FileClient) CreateBulk(builders ...*FileCreate) *FileCreateBulk {
	return &FileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FileClient) MapCreateBulk(slice any, setFunc func(*FileCreate, int)) *FileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FileCreateBulk{err: fmt.Errorf("calling to FileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for File.
func (c *FileClient) Update() *FileUpdate {
	mutation := newFileMutation(c.config, OpUpdate)
	return &FileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileClient) UpdateOne(f *File) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFile(f))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileClient) UpdateOneID(id pulid.ID) *FileUpdateOne {
	mutation := newFileMutation(c.config, OpUpdateOne, withFileID(id))
	return &FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for File.
func (c *FileClient) Delete() *FileDelete {
	mutation := newFileMutation(c.config, OpDelete)
	return &FileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileClient) DeleteOne(f *File) *FileDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FileClient) DeleteOneID(id pulid.ID) *FileDeleteOne {
	builder := c.Delete().Where(file.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileDeleteOne{builder}
}

// Query returns a query builder for File.
func (c *FileClient) Query() *FileQuery {
	return &FileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFile},
		inters: c.Interceptors(),
	}
}

// Get returns a File entity by its id.
func (c *FileClient) Get(ctx context.Context, id pulid.ID) (*File, error) {
	return c.Query().Where(file.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileClient) GetX(ctx context.Context, id pulid.ID) *File {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMessageAttachment queries the message_attachment edge of a File.
func (c *FileClient) QueryMessageAttachment(f *File) *MessageAttachmentQuery {
	query := (&MessageAttachmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(messageattachment.Table, messageattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, file.MessageAttachmentTable, file.MessageAttachmentColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageVoice queries the message_voice edge of a File.
func (c *FileClient) QueryMessageVoice(f *File) *MessageVoiceQuery {
	query := (&MessageVoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(file.Table, file.FieldID, id),
			sqlgraph.To(messagevoice.Table, messagevoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, file.MessageVoiceTable, file.MessageVoiceColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FileClient) Hooks() []Hook {
	return c.hooks.File
}

// Interceptors returns the client interceptors.
func (c *FileClient) Interceptors() []Interceptor {
	return c.inters.File
}

func (c *FileClient) mutate(ctx context.Context, m *FileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown File mutation op: %q", m.Op())
	}
}

// MessageClient is a client for the Message schema.
type MessageClient struct {
	config
}

// NewMessageClient returns a client for the Message from the given config.
func NewMessageClient(c config) *MessageClient {
	return &MessageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `message.Hooks(f(g(h())))`.
func (c *MessageClient) Use(hooks ...Hook) {
	c.hooks.Message = append(c.hooks.Message, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `message.Intercept(f(g(h())))`.
func (c *MessageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Message = append(c.inters.Message, interceptors...)
}

// Create returns a builder for creating a Message entity.
func (c *MessageClient) Create() *MessageCreate {
	mutation := newMessageMutation(c.config, OpCreate)
	return &MessageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Message entities.
func (c *MessageClient) CreateBulk(builders ...*MessageCreate) *MessageCreateBulk {
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageClient) MapCreateBulk(slice any, setFunc func(*MessageCreate, int)) *MessageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageCreateBulk{err: fmt.Errorf("calling to MessageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Message.
func (c *MessageClient) Update() *MessageUpdate {
	mutation := newMessageMutation(c.config, OpUpdate)
	return &MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageClient) UpdateOne(m *Message) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessage(m))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageClient) UpdateOneID(id pulid.ID) *MessageUpdateOne {
	mutation := newMessageMutation(c.config, OpUpdateOne, withMessageID(id))
	return &MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Message.
func (c *MessageClient) Delete() *MessageDelete {
	mutation := newMessageMutation(c.config, OpDelete)
	return &MessageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageClient) DeleteOne(m *Message) *MessageDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageClient) DeleteOneID(id pulid.ID) *MessageDeleteOne {
	builder := c.Delete().Where(message.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageDeleteOne{builder}
}

// Query returns a query builder for Message.
func (c *MessageClient) Query() *MessageQuery {
	return &MessageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessage},
		inters: c.Interceptors(),
	}
}

// Get returns a Message entity by its id.
func (c *MessageClient) Get(ctx context.Context, id pulid.ID) (*Message, error) {
	return c.Query().Where(message.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageClient) GetX(ctx context.Context, id pulid.ID) *Message {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVoice queries the voice edge of a Message.
func (c *MessageClient) QueryVoice(m *Message) *MessageVoiceQuery {
	query := (&MessageVoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(messagevoice.Table, messagevoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, message.VoiceTable, message.VoiceColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReplyTo queries the reply_to edge of a Message.
func (c *MessageClient) QueryReplyTo(m *Message) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, message.ReplyToTable, message.ReplyToColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachments queries the attachments edge of a Message.
func (c *MessageClient) QueryAttachments(m *Message) *MessageAttachmentQuery {
	query := (&MessageAttachmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(messageattachment.Table, messageattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, message.AttachmentsTable, message.AttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLinks queries the links edge of a Message.
func (c *MessageClient) QueryLinks(m *Message) *MessageLinkQuery {
	query := (&MessageLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(messagelink.Table, messagelink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, message.LinksTable, message.LinksColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Message.
func (c *MessageClient) QueryUser(m *Message) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.UserTable, message.UserColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a Message.
func (c *MessageClient) QueryRoom(m *Message) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(message.Table, message.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, message.RoomTable, message.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageClient) Hooks() []Hook {
	return c.hooks.Message
}

// Interceptors returns the client interceptors.
func (c *MessageClient) Interceptors() []Interceptor {
	return c.inters.Message
}

func (c *MessageClient) mutate(ctx context.Context, m *MessageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Message mutation op: %q", m.Op())
	}
}

// MessageAttachmentClient is a client for the MessageAttachment schema.
type MessageAttachmentClient struct {
	config
}

// NewMessageAttachmentClient returns a client for the MessageAttachment from the given config.
func NewMessageAttachmentClient(c config) *MessageAttachmentClient {
	return &MessageAttachmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messageattachment.Hooks(f(g(h())))`.
func (c *MessageAttachmentClient) Use(hooks ...Hook) {
	c.hooks.MessageAttachment = append(c.hooks.MessageAttachment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `messageattachment.Intercept(f(g(h())))`.
func (c *MessageAttachmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.MessageAttachment = append(c.inters.MessageAttachment, interceptors...)
}

// Create returns a builder for creating a MessageAttachment entity.
func (c *MessageAttachmentClient) Create() *MessageAttachmentCreate {
	mutation := newMessageAttachmentMutation(c.config, OpCreate)
	return &MessageAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageAttachment entities.
func (c *MessageAttachmentClient) CreateBulk(builders ...*MessageAttachmentCreate) *MessageAttachmentCreateBulk {
	return &MessageAttachmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageAttachmentClient) MapCreateBulk(slice any, setFunc func(*MessageAttachmentCreate, int)) *MessageAttachmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageAttachmentCreateBulk{err: fmt.Errorf("calling to MessageAttachmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageAttachmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageAttachmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageAttachment.
func (c *MessageAttachmentClient) Update() *MessageAttachmentUpdate {
	mutation := newMessageAttachmentMutation(c.config, OpUpdate)
	return &MessageAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageAttachmentClient) UpdateOne(ma *MessageAttachment) *MessageAttachmentUpdateOne {
	mutation := newMessageAttachmentMutation(c.config, OpUpdateOne, withMessageAttachment(ma))
	return &MessageAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageAttachmentClient) UpdateOneID(id pulid.ID) *MessageAttachmentUpdateOne {
	mutation := newMessageAttachmentMutation(c.config, OpUpdateOne, withMessageAttachmentID(id))
	return &MessageAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageAttachment.
func (c *MessageAttachmentClient) Delete() *MessageAttachmentDelete {
	mutation := newMessageAttachmentMutation(c.config, OpDelete)
	return &MessageAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageAttachmentClient) DeleteOne(ma *MessageAttachment) *MessageAttachmentDeleteOne {
	return c.DeleteOneID(ma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageAttachmentClient) DeleteOneID(id pulid.ID) *MessageAttachmentDeleteOne {
	builder := c.Delete().Where(messageattachment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageAttachmentDeleteOne{builder}
}

// Query returns a query builder for MessageAttachment.
func (c *MessageAttachmentClient) Query() *MessageAttachmentQuery {
	return &MessageAttachmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessageAttachment},
		inters: c.Interceptors(),
	}
}

// Get returns a MessageAttachment entity by its id.
func (c *MessageAttachmentClient) Get(ctx context.Context, id pulid.ID) (*MessageAttachment, error) {
	return c.Query().Where(messageattachment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageAttachmentClient) GetX(ctx context.Context, id pulid.ID) *MessageAttachment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoom queries the room edge of a MessageAttachment.
func (c *MessageAttachmentClient) QueryRoom(ma *MessageAttachment) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messageattachment.Table, messageattachment.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, messageattachment.RoomTable, messageattachment.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(ma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessage queries the message edge of a MessageAttachment.
func (c *MessageAttachmentClient) QueryMessage(ma *MessageAttachment) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messageattachment.Table, messageattachment.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, messageattachment.MessageTable, messageattachment.MessageColumn),
		)
		fromV = sqlgraph.Neighbors(ma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a MessageAttachment.
func (c *MessageAttachmentClient) QueryFile(ma *MessageAttachment) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messageattachment.Table, messageattachment.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, messageattachment.FileTable, messageattachment.FileColumn),
		)
		fromV = sqlgraph.Neighbors(ma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageAttachmentClient) Hooks() []Hook {
	return c.hooks.MessageAttachment
}

// Interceptors returns the client interceptors.
func (c *MessageAttachmentClient) Interceptors() []Interceptor {
	return c.inters.MessageAttachment
}

func (c *MessageAttachmentClient) mutate(ctx context.Context, m *MessageAttachmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageAttachmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageAttachmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageAttachmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageAttachmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MessageAttachment mutation op: %q", m.Op())
	}
}

// MessageLinkClient is a client for the MessageLink schema.
type MessageLinkClient struct {
	config
}

// NewMessageLinkClient returns a client for the MessageLink from the given config.
func NewMessageLinkClient(c config) *MessageLinkClient {
	return &MessageLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagelink.Hooks(f(g(h())))`.
func (c *MessageLinkClient) Use(hooks ...Hook) {
	c.hooks.MessageLink = append(c.hooks.MessageLink, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `messagelink.Intercept(f(g(h())))`.
func (c *MessageLinkClient) Intercept(interceptors ...Interceptor) {
	c.inters.MessageLink = append(c.inters.MessageLink, interceptors...)
}

// Create returns a builder for creating a MessageLink entity.
func (c *MessageLinkClient) Create() *MessageLinkCreate {
	mutation := newMessageLinkMutation(c.config, OpCreate)
	return &MessageLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageLink entities.
func (c *MessageLinkClient) CreateBulk(builders ...*MessageLinkCreate) *MessageLinkCreateBulk {
	return &MessageLinkCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageLinkClient) MapCreateBulk(slice any, setFunc func(*MessageLinkCreate, int)) *MessageLinkCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageLinkCreateBulk{err: fmt.Errorf("calling to MessageLinkClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageLinkCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageLink.
func (c *MessageLinkClient) Update() *MessageLinkUpdate {
	mutation := newMessageLinkMutation(c.config, OpUpdate)
	return &MessageLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageLinkClient) UpdateOne(ml *MessageLink) *MessageLinkUpdateOne {
	mutation := newMessageLinkMutation(c.config, OpUpdateOne, withMessageLink(ml))
	return &MessageLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageLinkClient) UpdateOneID(id pulid.ID) *MessageLinkUpdateOne {
	mutation := newMessageLinkMutation(c.config, OpUpdateOne, withMessageLinkID(id))
	return &MessageLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageLink.
func (c *MessageLinkClient) Delete() *MessageLinkDelete {
	mutation := newMessageLinkMutation(c.config, OpDelete)
	return &MessageLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageLinkClient) DeleteOne(ml *MessageLink) *MessageLinkDeleteOne {
	return c.DeleteOneID(ml.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageLinkClient) DeleteOneID(id pulid.ID) *MessageLinkDeleteOne {
	builder := c.Delete().Where(messagelink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageLinkDeleteOne{builder}
}

// Query returns a query builder for MessageLink.
func (c *MessageLinkClient) Query() *MessageLinkQuery {
	return &MessageLinkQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessageLink},
		inters: c.Interceptors(),
	}
}

// Get returns a MessageLink entity by its id.
func (c *MessageLinkClient) Get(ctx context.Context, id pulid.ID) (*MessageLink, error) {
	return c.Query().Where(messagelink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageLinkClient) GetX(ctx context.Context, id pulid.ID) *MessageLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoom queries the room edge of a MessageLink.
func (c *MessageLinkClient) QueryRoom(ml *MessageLink) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ml.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagelink.Table, messagelink.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, messagelink.RoomTable, messagelink.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(ml.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessage queries the message edge of a MessageLink.
func (c *MessageLinkClient) QueryMessage(ml *MessageLink) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ml.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagelink.Table, messagelink.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, messagelink.MessageTable, messagelink.MessageColumn),
		)
		fromV = sqlgraph.Neighbors(ml.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageLinkClient) Hooks() []Hook {
	return c.hooks.MessageLink
}

// Interceptors returns the client interceptors.
func (c *MessageLinkClient) Interceptors() []Interceptor {
	return c.inters.MessageLink
}

func (c *MessageLinkClient) mutate(ctx context.Context, m *MessageLinkMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageLinkCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageLinkDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MessageLink mutation op: %q", m.Op())
	}
}

// MessageVoiceClient is a client for the MessageVoice schema.
type MessageVoiceClient struct {
	config
}

// NewMessageVoiceClient returns a client for the MessageVoice from the given config.
func NewMessageVoiceClient(c config) *MessageVoiceClient {
	return &MessageVoiceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `messagevoice.Hooks(f(g(h())))`.
func (c *MessageVoiceClient) Use(hooks ...Hook) {
	c.hooks.MessageVoice = append(c.hooks.MessageVoice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `messagevoice.Intercept(f(g(h())))`.
func (c *MessageVoiceClient) Intercept(interceptors ...Interceptor) {
	c.inters.MessageVoice = append(c.inters.MessageVoice, interceptors...)
}

// Create returns a builder for creating a MessageVoice entity.
func (c *MessageVoiceClient) Create() *MessageVoiceCreate {
	mutation := newMessageVoiceMutation(c.config, OpCreate)
	return &MessageVoiceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MessageVoice entities.
func (c *MessageVoiceClient) CreateBulk(builders ...*MessageVoiceCreate) *MessageVoiceCreateBulk {
	return &MessageVoiceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MessageVoiceClient) MapCreateBulk(slice any, setFunc func(*MessageVoiceCreate, int)) *MessageVoiceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MessageVoiceCreateBulk{err: fmt.Errorf("calling to MessageVoiceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MessageVoiceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MessageVoiceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MessageVoice.
func (c *MessageVoiceClient) Update() *MessageVoiceUpdate {
	mutation := newMessageVoiceMutation(c.config, OpUpdate)
	return &MessageVoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MessageVoiceClient) UpdateOne(mv *MessageVoice) *MessageVoiceUpdateOne {
	mutation := newMessageVoiceMutation(c.config, OpUpdateOne, withMessageVoice(mv))
	return &MessageVoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MessageVoiceClient) UpdateOneID(id pulid.ID) *MessageVoiceUpdateOne {
	mutation := newMessageVoiceMutation(c.config, OpUpdateOne, withMessageVoiceID(id))
	return &MessageVoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MessageVoice.
func (c *MessageVoiceClient) Delete() *MessageVoiceDelete {
	mutation := newMessageVoiceMutation(c.config, OpDelete)
	return &MessageVoiceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MessageVoiceClient) DeleteOne(mv *MessageVoice) *MessageVoiceDeleteOne {
	return c.DeleteOneID(mv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MessageVoiceClient) DeleteOneID(id pulid.ID) *MessageVoiceDeleteOne {
	builder := c.Delete().Where(messagevoice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MessageVoiceDeleteOne{builder}
}

// Query returns a query builder for MessageVoice.
func (c *MessageVoiceClient) Query() *MessageVoiceQuery {
	return &MessageVoiceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMessageVoice},
		inters: c.Interceptors(),
	}
}

// Get returns a MessageVoice entity by its id.
func (c *MessageVoiceClient) Get(ctx context.Context, id pulid.ID) (*MessageVoice, error) {
	return c.Query().Where(messagevoice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MessageVoiceClient) GetX(ctx context.Context, id pulid.ID) *MessageVoice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoom queries the room edge of a MessageVoice.
func (c *MessageVoiceClient) QueryRoom(mv *MessageVoice) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagevoice.Table, messagevoice.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, messagevoice.RoomTable, messagevoice.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessage queries the message edge of a MessageVoice.
func (c *MessageVoiceClient) QueryMessage(mv *MessageVoice) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagevoice.Table, messagevoice.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, messagevoice.MessageTable, messagevoice.MessageColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFile queries the file edge of a MessageVoice.
func (c *MessageVoiceClient) QueryFile(mv *MessageVoice) *FileQuery {
	query := (&FileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := mv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(messagevoice.Table, messagevoice.FieldID, id),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, messagevoice.FileTable, messagevoice.FileColumn),
		)
		fromV = sqlgraph.Neighbors(mv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MessageVoiceClient) Hooks() []Hook {
	return c.hooks.MessageVoice
}

// Interceptors returns the client interceptors.
func (c *MessageVoiceClient) Interceptors() []Interceptor {
	return c.inters.MessageVoice
}

func (c *MessageVoiceClient) mutate(ctx context.Context, m *MessageVoiceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MessageVoiceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MessageVoiceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MessageVoiceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MessageVoiceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown MessageVoice mutation op: %q", m.Op())
	}
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `room.Intercept(f(g(h())))`.
func (c *RoomClient) Intercept(interceptors ...Interceptor) {
	c.inters.Room = append(c.inters.Room, interceptors...)
}

// Create returns a builder for creating a Room entity.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Room entities.
func (c *RoomClient) CreateBulk(builders ...*RoomCreate) *RoomCreateBulk {
	return &RoomCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoomClient) MapCreateBulk(slice any, setFunc func(*RoomCreate, int)) *RoomCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoomCreateBulk{err: fmt.Errorf("calling to RoomClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoomCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id pulid.ID) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomClient) DeleteOneID(id pulid.ID) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Query returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoom},
		inters: c.Interceptors(),
	}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id pulid.ID) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id pulid.ID) *Room {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Room.
func (c *RoomClient) QueryUsers(r *Room) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, room.UsersTable, room.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a Room.
func (c *RoomClient) QueryMessages(r *Room) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.MessagesTable, room.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageVoices queries the message_voices edge of a Room.
func (c *RoomClient) QueryMessageVoices(r *Room) *MessageVoiceQuery {
	query := (&MessageVoiceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(messagevoice.Table, messagevoice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.MessageVoicesTable, room.MessageVoicesColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageAttachments queries the message_attachments edge of a Room.
func (c *RoomClient) QueryMessageAttachments(r *Room) *MessageAttachmentQuery {
	query := (&MessageAttachmentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(messageattachment.Table, messageattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.MessageAttachmentsTable, room.MessageAttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessageLinks queries the message_links edge of a Room.
func (c *RoomClient) QueryMessageLinks(r *Room) *MessageLinkQuery {
	query := (&MessageLinkClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(messagelink.Table, messagelink.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.MessageLinksTable, room.MessageLinksColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomMembers queries the room_members edge of a Room.
func (c *RoomClient) QueryRoomMembers(r *Room) *RoomMemberQuery {
	query := (&RoomMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roommember.Table, roommember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, room.RoomMembersTable, room.RoomMembersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// Interceptors returns the client interceptors.
func (c *RoomClient) Interceptors() []Interceptor {
	return c.inters.Room
}

func (c *RoomClient) mutate(ctx context.Context, m *RoomMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Room mutation op: %q", m.Op())
	}
}

// RoomMemberClient is a client for the RoomMember schema.
type RoomMemberClient struct {
	config
}

// NewRoomMemberClient returns a client for the RoomMember from the given config.
func NewRoomMemberClient(c config) *RoomMemberClient {
	return &RoomMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roommember.Hooks(f(g(h())))`.
func (c *RoomMemberClient) Use(hooks ...Hook) {
	c.hooks.RoomMember = append(c.hooks.RoomMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `roommember.Intercept(f(g(h())))`.
func (c *RoomMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.RoomMember = append(c.inters.RoomMember, interceptors...)
}

// Create returns a builder for creating a RoomMember entity.
func (c *RoomMemberClient) Create() *RoomMemberCreate {
	mutation := newRoomMemberMutation(c.config, OpCreate)
	return &RoomMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RoomMember entities.
func (c *RoomMemberClient) CreateBulk(builders ...*RoomMemberCreate) *RoomMemberCreateBulk {
	return &RoomMemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoomMemberClient) MapCreateBulk(slice any, setFunc func(*RoomMemberCreate, int)) *RoomMemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoomMemberCreateBulk{err: fmt.Errorf("calling to RoomMemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoomMemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoomMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RoomMember.
func (c *RoomMemberClient) Update() *RoomMemberUpdate {
	mutation := newRoomMemberMutation(c.config, OpUpdate)
	return &RoomMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomMemberClient) UpdateOne(rm *RoomMember) *RoomMemberUpdateOne {
	mutation := newRoomMemberMutation(c.config, OpUpdateOne, withRoomMember(rm))
	return &RoomMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomMemberClient) UpdateOneID(id pulid.ID) *RoomMemberUpdateOne {
	mutation := newRoomMemberMutation(c.config, OpUpdateOne, withRoomMemberID(id))
	return &RoomMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomMember.
func (c *RoomMemberClient) Delete() *RoomMemberDelete {
	mutation := newRoomMemberMutation(c.config, OpDelete)
	return &RoomMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoomMemberClient) DeleteOne(rm *RoomMember) *RoomMemberDeleteOne {
	return c.DeleteOneID(rm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoomMemberClient) DeleteOneID(id pulid.ID) *RoomMemberDeleteOne {
	builder := c.Delete().Where(roommember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomMemberDeleteOne{builder}
}

// Query returns a query builder for RoomMember.
func (c *RoomMemberClient) Query() *RoomMemberQuery {
	return &RoomMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRoomMember},
		inters: c.Interceptors(),
	}
}

// Get returns a RoomMember entity by its id.
func (c *RoomMemberClient) Get(ctx context.Context, id pulid.ID) (*RoomMember, error) {
	return c.Query().Where(roommember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomMemberClient) GetX(ctx context.Context, id pulid.ID) *RoomMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a RoomMember.
func (c *RoomMemberClient) QueryUser(rm *RoomMember) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roommember.Table, roommember.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, roommember.UserTable, roommember.UserColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a RoomMember.
func (c *RoomMemberClient) QueryRoom(rm *RoomMember) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roommember.Table, roommember.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, roommember.RoomTable, roommember.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(rm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomMemberClient) Hooks() []Hook {
	return c.hooks.RoomMember
}

// Interceptors returns the client interceptors.
func (c *RoomMemberClient) Interceptors() []Interceptor {
	return c.inters.RoomMember
}

func (c *RoomMemberClient) mutate(ctx context.Context, m *RoomMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoomMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoomMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoomMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoomMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RoomMember mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id pulid.ID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id pulid.ID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id pulid.ID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id pulid.ID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryContacts queries the contacts edge of a User.
func (c *UserClient) QueryContacts(u *User) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ContactsTable, user.ContactsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRooms queries the rooms edge of a User.
func (c *UserClient) QueryRooms(u *User) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RoomsTable, user.RoomsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMessages queries the messages edge of a User.
func (c *UserClient) QueryMessages(u *User) *MessageQuery {
	query := (&MessageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MessagesTable, user.MessagesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserContacts queries the user_contacts edge of a User.
func (c *UserClient) QueryUserContacts(u *User) *UserContactQuery {
	query := (&UserContactClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usercontact.Table, usercontact.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.UserContactsTable, user.UserContactsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMemberships queries the memberships edge of a User.
func (c *UserClient) QueryMemberships(u *User) *RoomMemberQuery {
	query := (&RoomMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(roommember.Table, roommember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.MembershipsTable, user.MembershipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserContactClient is a client for the UserContact schema.
type UserContactClient struct {
	config
}

// NewUserContactClient returns a client for the UserContact from the given config.
func NewUserContactClient(c config) *UserContactClient {
	return &UserContactClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usercontact.Hooks(f(g(h())))`.
func (c *UserContactClient) Use(hooks ...Hook) {
	c.hooks.UserContact = append(c.hooks.UserContact, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usercontact.Intercept(f(g(h())))`.
func (c *UserContactClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserContact = append(c.inters.UserContact, interceptors...)
}

// Create returns a builder for creating a UserContact entity.
func (c *UserContactClient) Create() *UserContactCreate {
	mutation := newUserContactMutation(c.config, OpCreate)
	return &UserContactCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserContact entities.
func (c *UserContactClient) CreateBulk(builders ...*UserContactCreate) *UserContactCreateBulk {
	return &UserContactCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserContactClient) MapCreateBulk(slice any, setFunc func(*UserContactCreate, int)) *UserContactCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserContactCreateBulk{err: fmt.Errorf("calling to UserContactClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserContactCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserContactCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserContact.
func (c *UserContactClient) Update() *UserContactUpdate {
	mutation := newUserContactMutation(c.config, OpUpdate)
	return &UserContactUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserContactClient) UpdateOne(uc *UserContact) *UserContactUpdateOne {
	mutation := newUserContactMutation(c.config, OpUpdateOne, withUserContact(uc))
	return &UserContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserContactClient) UpdateOneID(id pulid.ID) *UserContactUpdateOne {
	mutation := newUserContactMutation(c.config, OpUpdateOne, withUserContactID(id))
	return &UserContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserContact.
func (c *UserContactClient) Delete() *UserContactDelete {
	mutation := newUserContactMutation(c.config, OpDelete)
	return &UserContactDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserContactClient) DeleteOne(uc *UserContact) *UserContactDeleteOne {
	return c.DeleteOneID(uc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserContactClient) DeleteOneID(id pulid.ID) *UserContactDeleteOne {
	builder := c.Delete().Where(usercontact.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserContactDeleteOne{builder}
}

// Query returns a query builder for UserContact.
func (c *UserContactClient) Query() *UserContactQuery {
	return &UserContactQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserContact},
		inters: c.Interceptors(),
	}
}

// Get returns a UserContact entity by its id.
func (c *UserContactClient) Get(ctx context.Context, id pulid.ID) (*UserContact, error) {
	return c.Query().Where(usercontact.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserContactClient) GetX(ctx context.Context, id pulid.ID) *UserContact {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserContact.
func (c *UserContactClient) QueryUser(uc *UserContact) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercontact.Table, usercontact.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercontact.UserTable, usercontact.UserColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContact queries the contact edge of a UserContact.
func (c *UserContactClient) QueryContact(uc *UserContact) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercontact.Table, usercontact.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercontact.ContactTable, usercontact.ContactColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a UserContact.
func (c *UserContactClient) QueryRoom(uc *UserContact) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usercontact.Table, usercontact.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercontact.RoomTable, usercontact.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(uc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserContactClient) Hooks() []Hook {
	return c.hooks.UserContact
}

// Interceptors returns the client interceptors.
func (c *UserContactClient) Interceptors() []Interceptor {
	return c.inters.UserContact
}

func (c *UserContactClient) mutate(ctx context.Context, m *UserContactMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserContactCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserContactUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserContactUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserContactDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserContact mutation op: %q", m.Op())
	}
}

// UserPinCodeClient is a client for the UserPinCode schema.
type UserPinCodeClient struct {
	config
}

// NewUserPinCodeClient returns a client for the UserPinCode from the given config.
func NewUserPinCodeClient(c config) *UserPinCodeClient {
	return &UserPinCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userpincode.Hooks(f(g(h())))`.
func (c *UserPinCodeClient) Use(hooks ...Hook) {
	c.hooks.UserPinCode = append(c.hooks.UserPinCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userpincode.Intercept(f(g(h())))`.
func (c *UserPinCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserPinCode = append(c.inters.UserPinCode, interceptors...)
}

// Create returns a builder for creating a UserPinCode entity.
func (c *UserPinCodeClient) Create() *UserPinCodeCreate {
	mutation := newUserPinCodeMutation(c.config, OpCreate)
	return &UserPinCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserPinCode entities.
func (c *UserPinCodeClient) CreateBulk(builders ...*UserPinCodeCreate) *UserPinCodeCreateBulk {
	return &UserPinCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserPinCodeClient) MapCreateBulk(slice any, setFunc func(*UserPinCodeCreate, int)) *UserPinCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserPinCodeCreateBulk{err: fmt.Errorf("calling to UserPinCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserPinCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserPinCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserPinCode.
func (c *UserPinCodeClient) Update() *UserPinCodeUpdate {
	mutation := newUserPinCodeMutation(c.config, OpUpdate)
	return &UserPinCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserPinCodeClient) UpdateOne(upc *UserPinCode) *UserPinCodeUpdateOne {
	mutation := newUserPinCodeMutation(c.config, OpUpdateOne, withUserPinCode(upc))
	return &UserPinCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserPinCodeClient) UpdateOneID(id pulid.ID) *UserPinCodeUpdateOne {
	mutation := newUserPinCodeMutation(c.config, OpUpdateOne, withUserPinCodeID(id))
	return &UserPinCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserPinCode.
func (c *UserPinCodeClient) Delete() *UserPinCodeDelete {
	mutation := newUserPinCodeMutation(c.config, OpDelete)
	return &UserPinCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserPinCodeClient) DeleteOne(upc *UserPinCode) *UserPinCodeDeleteOne {
	return c.DeleteOneID(upc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserPinCodeClient) DeleteOneID(id pulid.ID) *UserPinCodeDeleteOne {
	builder := c.Delete().Where(userpincode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserPinCodeDeleteOne{builder}
}

// Query returns a query builder for UserPinCode.
func (c *UserPinCodeClient) Query() *UserPinCodeQuery {
	return &UserPinCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserPinCode},
		inters: c.Interceptors(),
	}
}

// Get returns a UserPinCode entity by its id.
func (c *UserPinCodeClient) Get(ctx context.Context, id pulid.ID) (*UserPinCode, error) {
	return c.Query().Where(userpincode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserPinCodeClient) GetX(ctx context.Context, id pulid.ID) *UserPinCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserPinCode.
func (c *UserPinCodeClient) QueryUser(upc *UserPinCode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpincode.Table, userpincode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpincode.UserTable, userpincode.UserColumn),
		)
		fromV = sqlgraph.Neighbors(upc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryContact queries the contact edge of a UserPinCode.
func (c *UserPinCodeClient) QueryContact(upc *UserPinCode) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpincode.Table, userpincode.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpincode.ContactTable, userpincode.ContactColumn),
		)
		fromV = sqlgraph.Neighbors(upc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoom queries the room edge of a UserPinCode.
func (c *UserPinCodeClient) QueryRoom(upc *UserPinCode) *RoomQuery {
	query := (&RoomClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := upc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userpincode.Table, userpincode.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpincode.RoomTable, userpincode.RoomColumn),
		)
		fromV = sqlgraph.Neighbors(upc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserPinCodeClient) Hooks() []Hook {
	return c.hooks.UserPinCode
}

// Interceptors returns the client interceptors.
func (c *UserPinCodeClient) Interceptors() []Interceptor {
	return c.inters.UserPinCode
}

func (c *UserPinCodeClient) mutate(ctx context.Context, m *UserPinCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserPinCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserPinCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserPinCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserPinCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserPinCode mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		File, Message, MessageAttachment, MessageLink, MessageVoice, Room, RoomMember,
		User, UserContact, UserPinCode []ent.Hook
	}
	inters struct {
		File, Message, MessageAttachment, MessageLink, MessageVoice, Room, RoomMember,
		User, UserContact, UserPinCode []ent.Interceptor
	}
)
