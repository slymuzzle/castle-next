// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/schema/pulid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// File is the model entity for the File schema.
type File struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MimeType holds the value of the "mime_type" field.
	MimeType string `json:"mime_type,omitempty"`
	// Disk holds the value of the "disk" field.
	Disk string `json:"disk,omitempty"`
	// Size holds the value of the "size" field.
	Size uint64 `json:"size,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileQuery when eager-loading is set.
	Edges        FileEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileEdges holds the relations/edges for other nodes in the graph.
type FileEdges struct {
	// MessageAttachment holds the value of the message_attachment edge.
	MessageAttachment *MessageAttachment `json:"message_attachment,omitempty"`
	// MessageVoice holds the value of the message_voice edge.
	MessageVoice *MessageVoice `json:"message_voice,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// MessageAttachmentOrErr returns the MessageAttachment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) MessageAttachmentOrErr() (*MessageAttachment, error) {
	if e.MessageAttachment != nil {
		return e.MessageAttachment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: messageattachment.Label}
	}
	return nil, &NotLoadedError{edge: "message_attachment"}
}

// MessageVoiceOrErr returns the MessageVoice value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileEdges) MessageVoiceOrErr() (*MessageVoice, error) {
	if e.MessageVoice != nil {
		return e.MessageVoice, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: messagevoice.Label}
	}
	return nil, &NotLoadedError{edge: "message_voice"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*File) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			values[i] = new(pulid.ID)
		case file.FieldSize:
			values[i] = new(sql.NullInt64)
		case file.FieldName, file.FieldMimeType, file.FieldDisk:
			values[i] = new(sql.NullString)
		case file.FieldCreatedAt, file.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the File fields.
func (f *File) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case file.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case file.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case file.FieldMimeType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mime_type", values[i])
			} else if value.Valid {
				f.MimeType = value.String
			}
		case file.FieldDisk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field disk", values[i])
			} else if value.Valid {
				f.Disk = value.String
			}
		case file.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				f.Size = uint64(value.Int64)
			}
		case file.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				f.CreatedAt = value.Time
			}
		case file.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				f.UpdatedAt = value.Time
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the File.
// This includes values selected through modifiers, order, etc.
func (f *File) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryMessageAttachment queries the "message_attachment" edge of the File entity.
func (f *File) QueryMessageAttachment() *MessageAttachmentQuery {
	return NewFileClient(f.config).QueryMessageAttachment(f)
}

// QueryMessageVoice queries the "message_voice" edge of the File entity.
func (f *File) QueryMessageVoice() *MessageVoiceQuery {
	return NewFileClient(f.config).QueryMessageVoice(f)
}

// Update returns a builder for updating this File.
// Note that you need to call File.Unwrap() before calling this method if this File
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *File) Update() *FileUpdateOne {
	return NewFileClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the File entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *File) Unwrap() *File {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: File is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *File) String() string {
	var builder strings.Builder
	builder.WriteString("File(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("name=")
	builder.WriteString(f.Name)
	builder.WriteString(", ")
	builder.WriteString("mime_type=")
	builder.WriteString(f.MimeType)
	builder.WriteString(", ")
	builder.WriteString("disk=")
	builder.WriteString(f.Disk)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", f.Size))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(f.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(f.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Files is a parsable slice of File.
type Files []*File
