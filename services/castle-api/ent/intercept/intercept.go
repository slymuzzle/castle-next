// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"journeyhub/ent"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"

	"entgo.io/ent/dialect/sql"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The FileFunc type is an adapter to allow the use of ordinary function as a Querier.
type FileFunc func(context.Context, *ent.FileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f FileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The TraverseFile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseFile func(context.Context, *ent.FileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.FileQuery", q)
}

// The MessageFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageFunc func(context.Context, *ent.MessageQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MessageFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MessageQuery", q)
}

// The TraverseMessage type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessage func(context.Context, *ent.MessageQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessage) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessage) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MessageQuery", q)
}

// The MessageAttachmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageAttachmentFunc func(context.Context, *ent.MessageAttachmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MessageAttachmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MessageAttachmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MessageAttachmentQuery", q)
}

// The TraverseMessageAttachment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessageAttachment func(context.Context, *ent.MessageAttachmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessageAttachment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessageAttachment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageAttachmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MessageAttachmentQuery", q)
}

// The MessageLinkFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageLinkFunc func(context.Context, *ent.MessageLinkQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MessageLinkFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MessageLinkQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MessageLinkQuery", q)
}

// The TraverseMessageLink type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessageLink func(context.Context, *ent.MessageLinkQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessageLink) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessageLink) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageLinkQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MessageLinkQuery", q)
}

// The MessageVoiceFunc type is an adapter to allow the use of ordinary function as a Querier.
type MessageVoiceFunc func(context.Context, *ent.MessageVoiceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f MessageVoiceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.MessageVoiceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.MessageVoiceQuery", q)
}

// The TraverseMessageVoice type is an adapter to allow the use of ordinary function as Traverser.
type TraverseMessageVoice func(context.Context, *ent.MessageVoiceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseMessageVoice) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseMessageVoice) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.MessageVoiceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.MessageVoiceQuery", q)
}

// The RoomFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoomFunc func(context.Context, *ent.RoomQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoomFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoomQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoomQuery", q)
}

// The TraverseRoom type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoom func(context.Context, *ent.RoomQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoom) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoom) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoomQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoomQuery", q)
}

// The RoomMemberFunc type is an adapter to allow the use of ordinary function as a Querier.
type RoomMemberFunc func(context.Context, *ent.RoomMemberQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RoomMemberFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RoomMemberQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RoomMemberQuery", q)
}

// The TraverseRoomMember type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRoomMember func(context.Context, *ent.RoomMemberQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRoomMember) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRoomMember) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RoomMemberQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RoomMemberQuery", q)
}

// The UserFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserFunc func(context.Context, *ent.UserQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The TraverseUser type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUser func(context.Context, *ent.UserQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUser) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUser) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserQuery", q)
}

// The UserContactFunc type is an adapter to allow the use of ordinary function as a Querier.
type UserContactFunc func(context.Context, *ent.UserContactQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f UserContactFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.UserContactQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.UserContactQuery", q)
}

// The TraverseUserContact type is an adapter to allow the use of ordinary function as Traverser.
type TraverseUserContact func(context.Context, *ent.UserContactQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseUserContact) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseUserContact) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.UserContactQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.UserContactQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.FileQuery:
		return &query[*ent.FileQuery, predicate.File, file.OrderOption]{typ: ent.TypeFile, tq: q}, nil
	case *ent.MessageQuery:
		return &query[*ent.MessageQuery, predicate.Message, message.OrderOption]{typ: ent.TypeMessage, tq: q}, nil
	case *ent.MessageAttachmentQuery:
		return &query[*ent.MessageAttachmentQuery, predicate.MessageAttachment, messageattachment.OrderOption]{typ: ent.TypeMessageAttachment, tq: q}, nil
	case *ent.MessageLinkQuery:
		return &query[*ent.MessageLinkQuery, predicate.MessageLink, messagelink.OrderOption]{typ: ent.TypeMessageLink, tq: q}, nil
	case *ent.MessageVoiceQuery:
		return &query[*ent.MessageVoiceQuery, predicate.MessageVoice, messagevoice.OrderOption]{typ: ent.TypeMessageVoice, tq: q}, nil
	case *ent.RoomQuery:
		return &query[*ent.RoomQuery, predicate.Room, room.OrderOption]{typ: ent.TypeRoom, tq: q}, nil
	case *ent.RoomMemberQuery:
		return &query[*ent.RoomMemberQuery, predicate.RoomMember, roommember.OrderOption]{typ: ent.TypeRoomMember, tq: q}, nil
	case *ent.UserQuery:
		return &query[*ent.UserQuery, predicate.User, user.OrderOption]{typ: ent.TypeUser, tq: q}, nil
	case *ent.UserContactQuery:
		return &query[*ent.UserContactQuery, predicate.UserContact, usercontact.OrderOption]{typ: ent.TypeUserContact, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
