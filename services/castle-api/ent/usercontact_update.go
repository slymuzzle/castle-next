// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserContactUpdate is the builder for updating UserContact entities.
type UserContactUpdate struct {
	config
	hooks    []Hook
	mutation *UserContactMutation
}

// Where appends a list predicates to the UserContactUpdate builder.
func (ucu *UserContactUpdate) Where(ps ...predicate.UserContact) *UserContactUpdate {
	ucu.mutation.Where(ps...)
	return ucu
}

// SetUserID sets the "user_id" field.
func (ucu *UserContactUpdate) SetUserID(pu pulid.ID) *UserContactUpdate {
	ucu.mutation.SetUserID(pu)
	return ucu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucu *UserContactUpdate) SetNillableUserID(pu *pulid.ID) *UserContactUpdate {
	if pu != nil {
		ucu.SetUserID(*pu)
	}
	return ucu
}

// SetContactID sets the "contact_id" field.
func (ucu *UserContactUpdate) SetContactID(pu pulid.ID) *UserContactUpdate {
	ucu.mutation.SetContactID(pu)
	return ucu
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (ucu *UserContactUpdate) SetNillableContactID(pu *pulid.ID) *UserContactUpdate {
	if pu != nil {
		ucu.SetContactID(*pu)
	}
	return ucu
}

// SetRoomID sets the "room_id" field.
func (ucu *UserContactUpdate) SetRoomID(pu pulid.ID) *UserContactUpdate {
	ucu.mutation.SetRoomID(pu)
	return ucu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (ucu *UserContactUpdate) SetNillableRoomID(pu *pulid.ID) *UserContactUpdate {
	if pu != nil {
		ucu.SetRoomID(*pu)
	}
	return ucu
}

// ClearRoomID clears the value of the "room_id" field.
func (ucu *UserContactUpdate) ClearRoomID() *UserContactUpdate {
	ucu.mutation.ClearRoomID()
	return ucu
}

// SetCreatedAt sets the "created_at" field.
func (ucu *UserContactUpdate) SetCreatedAt(t time.Time) *UserContactUpdate {
	ucu.mutation.SetCreatedAt(t)
	return ucu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucu *UserContactUpdate) SetNillableCreatedAt(t *time.Time) *UserContactUpdate {
	if t != nil {
		ucu.SetCreatedAt(*t)
	}
	return ucu
}

// SetUser sets the "user" edge to the User entity.
func (ucu *UserContactUpdate) SetUser(u *User) *UserContactUpdate {
	return ucu.SetUserID(u.ID)
}

// SetContact sets the "contact" edge to the User entity.
func (ucu *UserContactUpdate) SetContact(u *User) *UserContactUpdate {
	return ucu.SetContactID(u.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (ucu *UserContactUpdate) SetRoom(r *Room) *UserContactUpdate {
	return ucu.SetRoomID(r.ID)
}

// Mutation returns the UserContactMutation object of the builder.
func (ucu *UserContactUpdate) Mutation() *UserContactMutation {
	return ucu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucu *UserContactUpdate) ClearUser() *UserContactUpdate {
	ucu.mutation.ClearUser()
	return ucu
}

// ClearContact clears the "contact" edge to the User entity.
func (ucu *UserContactUpdate) ClearContact() *UserContactUpdate {
	ucu.mutation.ClearContact()
	return ucu
}

// ClearRoom clears the "room" edge to the Room entity.
func (ucu *UserContactUpdate) ClearRoom() *UserContactUpdate {
	ucu.mutation.ClearRoom()
	return ucu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ucu *UserContactUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ucu.sqlSave, ucu.mutation, ucu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucu *UserContactUpdate) SaveX(ctx context.Context) int {
	affected, err := ucu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ucu *UserContactUpdate) Exec(ctx context.Context) error {
	_, err := ucu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucu *UserContactUpdate) ExecX(ctx context.Context) {
	if err := ucu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucu *UserContactUpdate) check() error {
	if ucu.mutation.UserCleared() && len(ucu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserContact.user"`)
	}
	if ucu.mutation.ContactCleared() && len(ucu.mutation.ContactIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserContact.contact"`)
	}
	return nil
}

func (ucu *UserContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ucu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercontact.Table, usercontact.Columns, sqlgraph.NewFieldSpec(usercontact.FieldID, field.TypeString))
	if ps := ucu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucu.mutation.CreatedAt(); ok {
		_spec.SetField(usercontact.FieldCreatedAt, field.TypeTime, value)
	}
	if ucu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.UserTable,
			Columns: []string{usercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.UserTable,
			Columns: []string{usercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.ContactTable,
			Columns: []string{usercontact.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.ContactTable,
			Columns: []string{usercontact.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.RoomTable,
			Columns: []string{usercontact.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.RoomTable,
			Columns: []string{usercontact.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ucu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ucu.mutation.done = true
	return n, nil
}

// UserContactUpdateOne is the builder for updating a single UserContact entity.
type UserContactUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserContactMutation
}

// SetUserID sets the "user_id" field.
func (ucuo *UserContactUpdateOne) SetUserID(pu pulid.ID) *UserContactUpdateOne {
	ucuo.mutation.SetUserID(pu)
	return ucuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ucuo *UserContactUpdateOne) SetNillableUserID(pu *pulid.ID) *UserContactUpdateOne {
	if pu != nil {
		ucuo.SetUserID(*pu)
	}
	return ucuo
}

// SetContactID sets the "contact_id" field.
func (ucuo *UserContactUpdateOne) SetContactID(pu pulid.ID) *UserContactUpdateOne {
	ucuo.mutation.SetContactID(pu)
	return ucuo
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (ucuo *UserContactUpdateOne) SetNillableContactID(pu *pulid.ID) *UserContactUpdateOne {
	if pu != nil {
		ucuo.SetContactID(*pu)
	}
	return ucuo
}

// SetRoomID sets the "room_id" field.
func (ucuo *UserContactUpdateOne) SetRoomID(pu pulid.ID) *UserContactUpdateOne {
	ucuo.mutation.SetRoomID(pu)
	return ucuo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (ucuo *UserContactUpdateOne) SetNillableRoomID(pu *pulid.ID) *UserContactUpdateOne {
	if pu != nil {
		ucuo.SetRoomID(*pu)
	}
	return ucuo
}

// ClearRoomID clears the value of the "room_id" field.
func (ucuo *UserContactUpdateOne) ClearRoomID() *UserContactUpdateOne {
	ucuo.mutation.ClearRoomID()
	return ucuo
}

// SetCreatedAt sets the "created_at" field.
func (ucuo *UserContactUpdateOne) SetCreatedAt(t time.Time) *UserContactUpdateOne {
	ucuo.mutation.SetCreatedAt(t)
	return ucuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucuo *UserContactUpdateOne) SetNillableCreatedAt(t *time.Time) *UserContactUpdateOne {
	if t != nil {
		ucuo.SetCreatedAt(*t)
	}
	return ucuo
}

// SetUser sets the "user" edge to the User entity.
func (ucuo *UserContactUpdateOne) SetUser(u *User) *UserContactUpdateOne {
	return ucuo.SetUserID(u.ID)
}

// SetContact sets the "contact" edge to the User entity.
func (ucuo *UserContactUpdateOne) SetContact(u *User) *UserContactUpdateOne {
	return ucuo.SetContactID(u.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (ucuo *UserContactUpdateOne) SetRoom(r *Room) *UserContactUpdateOne {
	return ucuo.SetRoomID(r.ID)
}

// Mutation returns the UserContactMutation object of the builder.
func (ucuo *UserContactUpdateOne) Mutation() *UserContactMutation {
	return ucuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ucuo *UserContactUpdateOne) ClearUser() *UserContactUpdateOne {
	ucuo.mutation.ClearUser()
	return ucuo
}

// ClearContact clears the "contact" edge to the User entity.
func (ucuo *UserContactUpdateOne) ClearContact() *UserContactUpdateOne {
	ucuo.mutation.ClearContact()
	return ucuo
}

// ClearRoom clears the "room" edge to the Room entity.
func (ucuo *UserContactUpdateOne) ClearRoom() *UserContactUpdateOne {
	ucuo.mutation.ClearRoom()
	return ucuo
}

// Where appends a list predicates to the UserContactUpdate builder.
func (ucuo *UserContactUpdateOne) Where(ps ...predicate.UserContact) *UserContactUpdateOne {
	ucuo.mutation.Where(ps...)
	return ucuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ucuo *UserContactUpdateOne) Select(field string, fields ...string) *UserContactUpdateOne {
	ucuo.fields = append([]string{field}, fields...)
	return ucuo
}

// Save executes the query and returns the updated UserContact entity.
func (ucuo *UserContactUpdateOne) Save(ctx context.Context) (*UserContact, error) {
	return withHooks(ctx, ucuo.sqlSave, ucuo.mutation, ucuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ucuo *UserContactUpdateOne) SaveX(ctx context.Context) *UserContact {
	node, err := ucuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ucuo *UserContactUpdateOne) Exec(ctx context.Context) error {
	_, err := ucuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucuo *UserContactUpdateOne) ExecX(ctx context.Context) {
	if err := ucuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucuo *UserContactUpdateOne) check() error {
	if ucuo.mutation.UserCleared() && len(ucuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserContact.user"`)
	}
	if ucuo.mutation.ContactCleared() && len(ucuo.mutation.ContactIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserContact.contact"`)
	}
	return nil
}

func (ucuo *UserContactUpdateOne) sqlSave(ctx context.Context) (_node *UserContact, err error) {
	if err := ucuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usercontact.Table, usercontact.Columns, sqlgraph.NewFieldSpec(usercontact.FieldID, field.TypeString))
	id, ok := ucuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserContact.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ucuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercontact.FieldID)
		for _, f := range fields {
			if !usercontact.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usercontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ucuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ucuo.mutation.CreatedAt(); ok {
		_spec.SetField(usercontact.FieldCreatedAt, field.TypeTime, value)
	}
	if ucuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.UserTable,
			Columns: []string{usercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.UserTable,
			Columns: []string{usercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.ContactTable,
			Columns: []string{usercontact.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.ContactTable,
			Columns: []string{usercontact.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ucuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.RoomTable,
			Columns: []string{usercontact.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ucuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.RoomTable,
			Columns: []string{usercontact.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserContact{config: ucuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ucuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usercontact.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ucuo.mutation.done = true
	return _node, nil
}
