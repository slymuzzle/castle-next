// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// FilesColumns holds the columns for the "files" table.
	FilesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "content_type", Type: field.TypeString},
		{Name: "size", Type: field.TypeUint64},
		{Name: "location", Type: field.TypeString, Nullable: true},
		{Name: "bucket", Type: field.TypeString},
		{Name: "path", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// FilesTable holds the schema information for the "files" table.
	FilesTable = &schema.Table{
		Name:       "files",
		Columns:    FilesColumns,
		PrimaryKey: []*schema.Column{FilesColumns[0]},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "message_reply_to", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "room_messages", Type: field.TypeString, Nullable: true},
		{Name: "user_messages", Type: field.TypeString, Nullable: true},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_messages_reply_to",
				Columns:    []*schema.Column{MessagesColumns[4]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "messages_rooms_messages",
				Columns:    []*schema.Column{MessagesColumns[5]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "messages_users_messages",
				Columns:    []*schema.Column{MessagesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MessageAttachmentsColumns holds the columns for the "message_attachments" table.
	MessageAttachmentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "order", Type: field.TypeUint},
		{Name: "attached_at", Type: field.TypeTime},
		{Name: "file_message_attachment", Type: field.TypeString, Unique: true},
		{Name: "message_attachments", Type: field.TypeString},
		{Name: "room_message_attachments", Type: field.TypeString},
	}
	// MessageAttachmentsTable holds the schema information for the "message_attachments" table.
	MessageAttachmentsTable = &schema.Table{
		Name:       "message_attachments",
		Columns:    MessageAttachmentsColumns,
		PrimaryKey: []*schema.Column{MessageAttachmentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "message_attachments_files_message_attachment",
				Columns:    []*schema.Column{MessageAttachmentsColumns[3]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "message_attachments_messages_attachments",
				Columns:    []*schema.Column{MessageAttachmentsColumns[4]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "message_attachments_rooms_message_attachments",
				Columns:    []*schema.Column{MessageAttachmentsColumns[5]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MessageLinksColumns holds the columns for the "message_links" table.
	MessageLinksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "url", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "message_links", Type: field.TypeString},
		{Name: "room_message_links", Type: field.TypeString},
	}
	// MessageLinksTable holds the schema information for the "message_links" table.
	MessageLinksTable = &schema.Table{
		Name:       "message_links",
		Columns:    MessageLinksColumns,
		PrimaryKey: []*schema.Column{MessageLinksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "message_links_messages_links",
				Columns:    []*schema.Column{MessageLinksColumns[4]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "message_links_rooms_message_links",
				Columns:    []*schema.Column{MessageLinksColumns[5]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// MessageVoicesColumns holds the columns for the "message_voices" table.
	MessageVoicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "attached_at", Type: field.TypeTime},
		{Name: "file_message_voice", Type: field.TypeString, Unique: true},
		{Name: "message_voice", Type: field.TypeString, Unique: true},
		{Name: "room_message_voices", Type: field.TypeString},
	}
	// MessageVoicesTable holds the schema information for the "message_voices" table.
	MessageVoicesTable = &schema.Table{
		Name:       "message_voices",
		Columns:    MessageVoicesColumns,
		PrimaryKey: []*schema.Column{MessageVoicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "message_voices_files_message_voice",
				Columns:    []*schema.Column{MessageVoicesColumns[2]},
				RefColumns: []*schema.Column{FilesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "message_voices_messages_voice",
				Columns:    []*schema.Column{MessageVoicesColumns[3]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "message_voices_rooms_message_voices",
				Columns:    []*schema.Column{MessageVoicesColumns[4]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoomsColumns holds the columns for the "rooms" table.
	RoomsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeUint64, Default: 1},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Personal", "Group"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "room_last_message", Type: field.TypeString, Nullable: true},
	}
	// RoomsTable holds the schema information for the "rooms" table.
	RoomsTable = &schema.Table{
		Name:       "rooms",
		Columns:    RoomsColumns,
		PrimaryKey: []*schema.Column{RoomsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "rooms_messages_last_message",
				Columns:    []*schema.Column{RoomsColumns[7]},
				RefColumns: []*schema.Column{MessagesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RoomMembersColumns holds the columns for the "room_members" table.
	RoomMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "name", Type: field.TypeString, Nullable: true},
		{Name: "unread_messages_count", Type: field.TypeInt, Default: 0},
		{Name: "joined_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeString},
		{Name: "room_id", Type: field.TypeString},
	}
	// RoomMembersTable holds the schema information for the "room_members" table.
	RoomMembersTable = &schema.Table{
		Name:       "room_members",
		Columns:    RoomMembersColumns,
		PrimaryKey: []*schema.Column{RoomMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "room_members_users_user",
				Columns:    []*schema.Column{RoomMembersColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "room_members_rooms_room",
				Columns:    []*schema.Column{RoomMembersColumns[6]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "roommember_room_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{RoomMembersColumns[6], RoomMembersColumns[5]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "nickname", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "contact_pin", Type: field.TypeString, Unique: true, Nullable: true},
		{Name: "password", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserContactsColumns holds the columns for the "user_contacts" table.
	UserContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "deleted_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeString},
		{Name: "contact_id", Type: field.TypeString},
		{Name: "room_id", Type: field.TypeString, Nullable: true},
	}
	// UserContactsTable holds the schema information for the "user_contacts" table.
	UserContactsTable = &schema.Table{
		Name:       "user_contacts",
		Columns:    UserContactsColumns,
		PrimaryKey: []*schema.Column{UserContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_contacts_users_user",
				Columns:    []*schema.Column{UserContactsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_contacts_users_contact",
				Columns:    []*schema.Column{UserContactsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_contacts_rooms_room",
				Columns:    []*schema.Column{UserContactsColumns[5]},
				RefColumns: []*schema.Column{RoomsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "usercontact_user_id_contact_id",
				Unique:  true,
				Columns: []*schema.Column{UserContactsColumns[3], UserContactsColumns[4]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FilesTable,
		MessagesTable,
		MessageAttachmentsTable,
		MessageLinksTable,
		MessageVoicesTable,
		RoomsTable,
		RoomMembersTable,
		UsersTable,
		UserContactsTable,
	}
)

func init() {
	MessagesTable.ForeignKeys[0].RefTable = MessagesTable
	MessagesTable.ForeignKeys[1].RefTable = RoomsTable
	MessagesTable.ForeignKeys[2].RefTable = UsersTable
	MessageAttachmentsTable.ForeignKeys[0].RefTable = FilesTable
	MessageAttachmentsTable.ForeignKeys[1].RefTable = MessagesTable
	MessageAttachmentsTable.ForeignKeys[2].RefTable = RoomsTable
	MessageLinksTable.ForeignKeys[0].RefTable = MessagesTable
	MessageLinksTable.ForeignKeys[1].RefTable = RoomsTable
	MessageVoicesTable.ForeignKeys[0].RefTable = FilesTable
	MessageVoicesTable.ForeignKeys[1].RefTable = MessagesTable
	MessageVoicesTable.ForeignKeys[2].RefTable = RoomsTable
	RoomsTable.ForeignKeys[0].RefTable = MessagesTable
	RoomMembersTable.ForeignKeys[0].RefTable = UsersTable
	RoomMembersTable.ForeignKeys[1].RefTable = RoomsTable
	UserContactsTable.ForeignKeys[0].RefTable = UsersTable
	UserContactsTable.ForeignKeys[1].RefTable = UsersTable
	UserContactsTable.ForeignKeys[2].RefTable = RoomsTable
}
