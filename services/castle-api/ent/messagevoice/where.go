// Code generated by ent, DO NOT EDIT.

package messagevoice

import (
	"journeyhub/ent/predicate"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldLTE(FieldID, id))
}

// Length applies equality check predicate on the "length" field. It's identical to LengthEQ.
func Length(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldEQ(FieldLength, v))
}

// AttachedAt applies equality check predicate on the "attached_at" field. It's identical to AttachedAtEQ.
func AttachedAt(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldEQ(FieldAttachedAt, v))
}

// LengthEQ applies the EQ predicate on the "length" field.
func LengthEQ(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldEQ(FieldLength, v))
}

// LengthNEQ applies the NEQ predicate on the "length" field.
func LengthNEQ(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldNEQ(FieldLength, v))
}

// LengthIn applies the In predicate on the "length" field.
func LengthIn(vs ...int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldIn(FieldLength, vs...))
}

// LengthNotIn applies the NotIn predicate on the "length" field.
func LengthNotIn(vs ...int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldNotIn(FieldLength, vs...))
}

// LengthGT applies the GT predicate on the "length" field.
func LengthGT(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldGT(FieldLength, v))
}

// LengthGTE applies the GTE predicate on the "length" field.
func LengthGTE(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldGTE(FieldLength, v))
}

// LengthLT applies the LT predicate on the "length" field.
func LengthLT(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldLT(FieldLength, v))
}

// LengthLTE applies the LTE predicate on the "length" field.
func LengthLTE(v int) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldLTE(FieldLength, v))
}

// AttachedAtEQ applies the EQ predicate on the "attached_at" field.
func AttachedAtEQ(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldEQ(FieldAttachedAt, v))
}

// AttachedAtNEQ applies the NEQ predicate on the "attached_at" field.
func AttachedAtNEQ(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldNEQ(FieldAttachedAt, v))
}

// AttachedAtIn applies the In predicate on the "attached_at" field.
func AttachedAtIn(vs ...time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldIn(FieldAttachedAt, vs...))
}

// AttachedAtNotIn applies the NotIn predicate on the "attached_at" field.
func AttachedAtNotIn(vs ...time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldNotIn(FieldAttachedAt, vs...))
}

// AttachedAtGT applies the GT predicate on the "attached_at" field.
func AttachedAtGT(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldGT(FieldAttachedAt, v))
}

// AttachedAtGTE applies the GTE predicate on the "attached_at" field.
func AttachedAtGTE(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldGTE(FieldAttachedAt, v))
}

// AttachedAtLT applies the LT predicate on the "attached_at" field.
func AttachedAtLT(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldLT(FieldAttachedAt, v))
}

// AttachedAtLTE applies the LTE predicate on the "attached_at" field.
func AttachedAtLTE(v time.Time) predicate.MessageVoice {
	return predicate.MessageVoice(sql.FieldLTE(FieldAttachedAt, v))
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.MessageVoice {
	return predicate.MessageVoice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, FileTable, FileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.MessageVoice {
	return predicate.MessageVoice(func(s *sql.Selector) {
		step := newFileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MessageVoice) predicate.MessageVoice {
	return predicate.MessageVoice(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MessageVoice) predicate.MessageVoice {
	return predicate.MessageVoice(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MessageVoice) predicate.MessageVoice {
	return predicate.MessageVoice(sql.NotPredicates(p))
}
