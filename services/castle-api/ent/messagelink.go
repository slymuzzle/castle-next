// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/message"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MessageLink is the model entity for the MessageLink schema.
type MessageLink struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageLinkQuery when eager-loading is set.
	Edges              MessageLinkEdges `json:"edges"`
	message_links      *pulid.ID
	room_message_links *pulid.ID
	selectValues       sql.SelectValues
}

// MessageLinkEdges holds the relations/edges for other nodes in the graph.
type MessageLinkEdges struct {
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageLinkEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageLinkEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageLink) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messagelink.FieldID:
			values[i] = new(pulid.ID)
		case messagelink.FieldURL:
			values[i] = new(sql.NullString)
		case messagelink.FieldCreatedAt, messagelink.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case messagelink.ForeignKeys[0]: // message_links
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case messagelink.ForeignKeys[1]: // room_message_links
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageLink fields.
func (ml *MessageLink) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messagelink.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ml.ID = *value
			}
		case messagelink.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ml.URL = value.String
			}
		case messagelink.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ml.CreatedAt = value.Time
			}
		case messagelink.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ml.UpdatedAt = value.Time
			}
		case messagelink.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field message_links", values[i])
			} else if value.Valid {
				ml.message_links = new(pulid.ID)
				*ml.message_links = *value.S.(*pulid.ID)
			}
		case messagelink.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field room_message_links", values[i])
			} else if value.Valid {
				ml.room_message_links = new(pulid.ID)
				*ml.room_message_links = *value.S.(*pulid.ID)
			}
		default:
			ml.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MessageLink.
// This includes values selected through modifiers, order, etc.
func (ml *MessageLink) Value(name string) (ent.Value, error) {
	return ml.selectValues.Get(name)
}

// QueryRoom queries the "room" edge of the MessageLink entity.
func (ml *MessageLink) QueryRoom() *RoomQuery {
	return NewMessageLinkClient(ml.config).QueryRoom(ml)
}

// QueryMessage queries the "message" edge of the MessageLink entity.
func (ml *MessageLink) QueryMessage() *MessageQuery {
	return NewMessageLinkClient(ml.config).QueryMessage(ml)
}

// Update returns a builder for updating this MessageLink.
// Note that you need to call MessageLink.Unwrap() before calling this method if this MessageLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (ml *MessageLink) Update() *MessageLinkUpdateOne {
	return NewMessageLinkClient(ml.config).UpdateOne(ml)
}

// Unwrap unwraps the MessageLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ml *MessageLink) Unwrap() *MessageLink {
	_tx, ok := ml.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageLink is not a transactional entity")
	}
	ml.config.driver = _tx.drv
	return ml
}

// String implements the fmt.Stringer.
func (ml *MessageLink) String() string {
	var builder strings.Builder
	builder.WriteString("MessageLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ml.ID))
	builder.WriteString("url=")
	builder.WriteString(ml.URL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ml.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ml.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessageLinks is a parsable slice of MessageLink.
type MessageLinks []*MessageLink
