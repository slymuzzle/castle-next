// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFile              = "File"
	TypeMessage           = "Message"
	TypeMessageAttachment = "MessageAttachment"
	TypeMessageLink       = "MessageLink"
	TypeMessageVoice      = "MessageVoice"
	TypeRoom              = "Room"
	TypeRoomMember        = "RoomMember"
	TypeUser              = "User"
	TypeUserContact       = "UserContact"
)

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op                        Op
	typ                       string
	id                        *pulid.ID
	name                      *string
	content_type              *string
	size                      *uint64
	addsize                   *int64
	location                  *string
	bucket                    *string
	_path                     *string
	created_at                *time.Time
	updated_at                *time.Time
	clearedFields             map[string]struct{}
	message_attachment        *pulid.ID
	clearedmessage_attachment bool
	message_voice             *pulid.ID
	clearedmessage_voice      bool
	done                      bool
	oldValue                  func(context.Context) (*File, error)
	predicates                []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id pulid.ID) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of File entities.
func (m *FileMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().File.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetContentType sets the "content_type" field.
func (m *FileMutation) SetContentType(s string) {
	m.content_type = &s
}

// ContentType returns the value of the "content_type" field in the mutation.
func (m *FileMutation) ContentType() (r string, exists bool) {
	v := m.content_type
	if v == nil {
		return
	}
	return *v, true
}

// OldContentType returns the old "content_type" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldContentType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContentType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContentType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContentType: %w", err)
	}
	return oldValue.ContentType, nil
}

// ResetContentType resets all changes to the "content_type" field.
func (m *FileMutation) ResetContentType() {
	m.content_type = nil
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(u uint64) {
	m.size = &u
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r uint64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds u to the "size" field.
func (m *FileMutation) AddSize(u int64) {
	if m.addsize != nil {
		*m.addsize += u
	} else {
		m.addsize = &u
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetLocation sets the "location" field.
func (m *FileMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *FileMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ClearLocation clears the value of the "location" field.
func (m *FileMutation) ClearLocation() {
	m.location = nil
	m.clearedFields[file.FieldLocation] = struct{}{}
}

// LocationCleared returns if the "location" field was cleared in this mutation.
func (m *FileMutation) LocationCleared() bool {
	_, ok := m.clearedFields[file.FieldLocation]
	return ok
}

// ResetLocation resets all changes to the "location" field.
func (m *FileMutation) ResetLocation() {
	m.location = nil
	delete(m.clearedFields, file.FieldLocation)
}

// SetBucket sets the "bucket" field.
func (m *FileMutation) SetBucket(s string) {
	m.bucket = &s
}

// Bucket returns the value of the "bucket" field in the mutation.
func (m *FileMutation) Bucket() (r string, exists bool) {
	v := m.bucket
	if v == nil {
		return
	}
	return *v, true
}

// OldBucket returns the old "bucket" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldBucket(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBucket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBucket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBucket: %w", err)
	}
	return oldValue.Bucket, nil
}

// ResetBucket resets all changes to the "bucket" field.
func (m *FileMutation) ResetBucket() {
	m.bucket = nil
}

// SetPath sets the "path" field.
func (m *FileMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *FileMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *FileMutation) ResetPath() {
	m._path = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMessageAttachmentID sets the "message_attachment" edge to the MessageAttachment entity by id.
func (m *FileMutation) SetMessageAttachmentID(id pulid.ID) {
	m.message_attachment = &id
}

// ClearMessageAttachment clears the "message_attachment" edge to the MessageAttachment entity.
func (m *FileMutation) ClearMessageAttachment() {
	m.clearedmessage_attachment = true
}

// MessageAttachmentCleared reports if the "message_attachment" edge to the MessageAttachment entity was cleared.
func (m *FileMutation) MessageAttachmentCleared() bool {
	return m.clearedmessage_attachment
}

// MessageAttachmentID returns the "message_attachment" edge ID in the mutation.
func (m *FileMutation) MessageAttachmentID() (id pulid.ID, exists bool) {
	if m.message_attachment != nil {
		return *m.message_attachment, true
	}
	return
}

// MessageAttachmentIDs returns the "message_attachment" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageAttachmentID instead. It exists only for internal usage by the builders.
func (m *FileMutation) MessageAttachmentIDs() (ids []pulid.ID) {
	if id := m.message_attachment; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessageAttachment resets all changes to the "message_attachment" edge.
func (m *FileMutation) ResetMessageAttachment() {
	m.message_attachment = nil
	m.clearedmessage_attachment = false
}

// SetMessageVoiceID sets the "message_voice" edge to the MessageVoice entity by id.
func (m *FileMutation) SetMessageVoiceID(id pulid.ID) {
	m.message_voice = &id
}

// ClearMessageVoice clears the "message_voice" edge to the MessageVoice entity.
func (m *FileMutation) ClearMessageVoice() {
	m.clearedmessage_voice = true
}

// MessageVoiceCleared reports if the "message_voice" edge to the MessageVoice entity was cleared.
func (m *FileMutation) MessageVoiceCleared() bool {
	return m.clearedmessage_voice
}

// MessageVoiceID returns the "message_voice" edge ID in the mutation.
func (m *FileMutation) MessageVoiceID() (id pulid.ID, exists bool) {
	if m.message_voice != nil {
		return *m.message_voice, true
	}
	return
}

// MessageVoiceIDs returns the "message_voice" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageVoiceID instead. It exists only for internal usage by the builders.
func (m *FileMutation) MessageVoiceIDs() (ids []pulid.ID) {
	if id := m.message_voice; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessageVoice resets all changes to the "message_voice" edge.
func (m *FileMutation) ResetMessageVoice() {
	m.message_voice = nil
	m.clearedmessage_voice = false
}

// Where appends a list predicates to the FileMutation builder.
func (m *FileMutation) Where(ps ...predicate.File) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.File, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.content_type != nil {
		fields = append(fields, file.FieldContentType)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	if m.location != nil {
		fields = append(fields, file.FieldLocation)
	}
	if m.bucket != nil {
		fields = append(fields, file.FieldBucket)
	}
	if m._path != nil {
		fields = append(fields, file.FieldPath)
	}
	if m.created_at != nil {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, file.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldName:
		return m.Name()
	case file.FieldContentType:
		return m.ContentType()
	case file.FieldSize:
		return m.Size()
	case file.FieldLocation:
		return m.Location()
	case file.FieldBucket:
		return m.Bucket()
	case file.FieldPath:
		return m.Path()
	case file.FieldCreatedAt:
		return m.CreatedAt()
	case file.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldContentType:
		return m.OldContentType(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	case file.FieldLocation:
		return m.OldLocation(ctx)
	case file.FieldBucket:
		return m.OldBucket(ctx)
	case file.FieldPath:
		return m.OldPath(ctx)
	case file.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case file.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldContentType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContentType(v)
		return nil
	case file.FieldSize:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case file.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case file.FieldBucket:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBucket(v)
		return nil
	case file.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case file.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case file.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(file.FieldLocation) {
		fields = append(fields, file.FieldLocation)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	switch name {
	case file.FieldLocation:
		m.ClearLocation()
		return nil
	}
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldContentType:
		m.ResetContentType()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	case file.FieldLocation:
		m.ResetLocation()
		return nil
	case file.FieldBucket:
		m.ResetBucket()
		return nil
	case file.FieldPath:
		m.ResetPath()
		return nil
	case file.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case file.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.message_attachment != nil {
		edges = append(edges, file.EdgeMessageAttachment)
	}
	if m.message_voice != nil {
		edges = append(edges, file.EdgeMessageVoice)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case file.EdgeMessageAttachment:
		if id := m.message_attachment; id != nil {
			return []ent.Value{*id}
		}
	case file.EdgeMessageVoice:
		if id := m.message_voice; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmessage_attachment {
		edges = append(edges, file.EdgeMessageAttachment)
	}
	if m.clearedmessage_voice {
		edges = append(edges, file.EdgeMessageVoice)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	switch name {
	case file.EdgeMessageAttachment:
		return m.clearedmessage_attachment
	case file.EdgeMessageVoice:
		return m.clearedmessage_voice
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	switch name {
	case file.EdgeMessageAttachment:
		m.ClearMessageAttachment()
		return nil
	case file.EdgeMessageVoice:
		m.ClearMessageVoice()
		return nil
	}
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	switch name {
	case file.EdgeMessageAttachment:
		m.ResetMessageAttachment()
		return nil
	case file.EdgeMessageVoice:
		m.ResetMessageVoice()
		return nil
	}
	return fmt.Errorf("unknown File edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op                 Op
	typ                string
	id                 *pulid.ID
	content            *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	voice              *pulid.ID
	clearedvoice       bool
	reply_to           *pulid.ID
	clearedreply_to    bool
	attachments        map[pulid.ID]struct{}
	removedattachments map[pulid.ID]struct{}
	clearedattachments bool
	links              map[pulid.ID]struct{}
	removedlinks       map[pulid.ID]struct{}
	clearedlinks       bool
	user               *pulid.ID
	cleareduser        bool
	room               *pulid.ID
	clearedroom        bool
	done               bool
	oldValue           func(context.Context) (*Message, error)
	predicates         []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id pulid.ID) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Message entities.
func (m *MessageMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContent sets the "content" field.
func (m *MessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MessageMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MessageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MessageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MessageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetVoiceID sets the "voice" edge to the MessageVoice entity by id.
func (m *MessageMutation) SetVoiceID(id pulid.ID) {
	m.voice = &id
}

// ClearVoice clears the "voice" edge to the MessageVoice entity.
func (m *MessageMutation) ClearVoice() {
	m.clearedvoice = true
}

// VoiceCleared reports if the "voice" edge to the MessageVoice entity was cleared.
func (m *MessageMutation) VoiceCleared() bool {
	return m.clearedvoice
}

// VoiceID returns the "voice" edge ID in the mutation.
func (m *MessageMutation) VoiceID() (id pulid.ID, exists bool) {
	if m.voice != nil {
		return *m.voice, true
	}
	return
}

// VoiceIDs returns the "voice" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VoiceID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) VoiceIDs() (ids []pulid.ID) {
	if id := m.voice; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVoice resets all changes to the "voice" edge.
func (m *MessageMutation) ResetVoice() {
	m.voice = nil
	m.clearedvoice = false
}

// SetReplyToID sets the "reply_to" edge to the Message entity by id.
func (m *MessageMutation) SetReplyToID(id pulid.ID) {
	m.reply_to = &id
}

// ClearReplyTo clears the "reply_to" edge to the Message entity.
func (m *MessageMutation) ClearReplyTo() {
	m.clearedreply_to = true
}

// ReplyToCleared reports if the "reply_to" edge to the Message entity was cleared.
func (m *MessageMutation) ReplyToCleared() bool {
	return m.clearedreply_to
}

// ReplyToID returns the "reply_to" edge ID in the mutation.
func (m *MessageMutation) ReplyToID() (id pulid.ID, exists bool) {
	if m.reply_to != nil {
		return *m.reply_to, true
	}
	return
}

// ReplyToIDs returns the "reply_to" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReplyToID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) ReplyToIDs() (ids []pulid.ID) {
	if id := m.reply_to; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReplyTo resets all changes to the "reply_to" edge.
func (m *MessageMutation) ResetReplyTo() {
	m.reply_to = nil
	m.clearedreply_to = false
}

// AddAttachmentIDs adds the "attachments" edge to the MessageAttachment entity by ids.
func (m *MessageMutation) AddAttachmentIDs(ids ...pulid.ID) {
	if m.attachments == nil {
		m.attachments = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.attachments[ids[i]] = struct{}{}
	}
}

// ClearAttachments clears the "attachments" edge to the MessageAttachment entity.
func (m *MessageMutation) ClearAttachments() {
	m.clearedattachments = true
}

// AttachmentsCleared reports if the "attachments" edge to the MessageAttachment entity was cleared.
func (m *MessageMutation) AttachmentsCleared() bool {
	return m.clearedattachments
}

// RemoveAttachmentIDs removes the "attachments" edge to the MessageAttachment entity by IDs.
func (m *MessageMutation) RemoveAttachmentIDs(ids ...pulid.ID) {
	if m.removedattachments == nil {
		m.removedattachments = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.attachments, ids[i])
		m.removedattachments[ids[i]] = struct{}{}
	}
}

// RemovedAttachments returns the removed IDs of the "attachments" edge to the MessageAttachment entity.
func (m *MessageMutation) RemovedAttachmentsIDs() (ids []pulid.ID) {
	for id := range m.removedattachments {
		ids = append(ids, id)
	}
	return
}

// AttachmentsIDs returns the "attachments" edge IDs in the mutation.
func (m *MessageMutation) AttachmentsIDs() (ids []pulid.ID) {
	for id := range m.attachments {
		ids = append(ids, id)
	}
	return
}

// ResetAttachments resets all changes to the "attachments" edge.
func (m *MessageMutation) ResetAttachments() {
	m.attachments = nil
	m.clearedattachments = false
	m.removedattachments = nil
}

// AddLinkIDs adds the "links" edge to the MessageLink entity by ids.
func (m *MessageMutation) AddLinkIDs(ids ...pulid.ID) {
	if m.links == nil {
		m.links = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.links[ids[i]] = struct{}{}
	}
}

// ClearLinks clears the "links" edge to the MessageLink entity.
func (m *MessageMutation) ClearLinks() {
	m.clearedlinks = true
}

// LinksCleared reports if the "links" edge to the MessageLink entity was cleared.
func (m *MessageMutation) LinksCleared() bool {
	return m.clearedlinks
}

// RemoveLinkIDs removes the "links" edge to the MessageLink entity by IDs.
func (m *MessageMutation) RemoveLinkIDs(ids ...pulid.ID) {
	if m.removedlinks == nil {
		m.removedlinks = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.links, ids[i])
		m.removedlinks[ids[i]] = struct{}{}
	}
}

// RemovedLinks returns the removed IDs of the "links" edge to the MessageLink entity.
func (m *MessageMutation) RemovedLinksIDs() (ids []pulid.ID) {
	for id := range m.removedlinks {
		ids = append(ids, id)
	}
	return
}

// LinksIDs returns the "links" edge IDs in the mutation.
func (m *MessageMutation) LinksIDs() (ids []pulid.ID) {
	for id := range m.links {
		ids = append(ids, id)
	}
	return
}

// ResetLinks resets all changes to the "links" edge.
func (m *MessageMutation) ResetLinks() {
	m.links = nil
	m.clearedlinks = false
	m.removedlinks = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *MessageMutation) SetUserID(id pulid.ID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *MessageMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *MessageMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *MessageMutation) UserID() (id pulid.ID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) UserIDs() (ids []pulid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *MessageMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *MessageMutation) SetRoomID(id pulid.ID) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *MessageMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *MessageMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *MessageMutation) RoomID() (id pulid.ID, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) RoomIDs() (ids []pulid.ID) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *MessageMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Message, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.content != nil {
		fields = append(fields, message.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, message.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, message.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldContent:
		return m.Content()
	case message.FieldCreatedAt:
		return m.CreatedAt()
	case message.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldContent:
		return m.OldContent(ctx)
	case message.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case message.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case message.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case message.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldContent:
		m.ResetContent()
		return nil
	case message.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case message.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.voice != nil {
		edges = append(edges, message.EdgeVoice)
	}
	if m.reply_to != nil {
		edges = append(edges, message.EdgeReplyTo)
	}
	if m.attachments != nil {
		edges = append(edges, message.EdgeAttachments)
	}
	if m.links != nil {
		edges = append(edges, message.EdgeLinks)
	}
	if m.user != nil {
		edges = append(edges, message.EdgeUser)
	}
	if m.room != nil {
		edges = append(edges, message.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeVoice:
		if id := m.voice; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeReplyTo:
		if id := m.reply_to; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.attachments))
		for id := range m.attachments {
			ids = append(ids, id)
		}
		return ids
	case message.EdgeLinks:
		ids := make([]ent.Value, 0, len(m.links))
		for id := range m.links {
			ids = append(ids, id)
		}
		return ids
	case message.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedattachments != nil {
		edges = append(edges, message.EdgeAttachments)
	}
	if m.removedlinks != nil {
		edges = append(edges, message.EdgeLinks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeAttachments:
		ids := make([]ent.Value, 0, len(m.removedattachments))
		for id := range m.removedattachments {
			ids = append(ids, id)
		}
		return ids
	case message.EdgeLinks:
		ids := make([]ent.Value, 0, len(m.removedlinks))
		for id := range m.removedlinks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedvoice {
		edges = append(edges, message.EdgeVoice)
	}
	if m.clearedreply_to {
		edges = append(edges, message.EdgeReplyTo)
	}
	if m.clearedattachments {
		edges = append(edges, message.EdgeAttachments)
	}
	if m.clearedlinks {
		edges = append(edges, message.EdgeLinks)
	}
	if m.cleareduser {
		edges = append(edges, message.EdgeUser)
	}
	if m.clearedroom {
		edges = append(edges, message.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeVoice:
		return m.clearedvoice
	case message.EdgeReplyTo:
		return m.clearedreply_to
	case message.EdgeAttachments:
		return m.clearedattachments
	case message.EdgeLinks:
		return m.clearedlinks
	case message.EdgeUser:
		return m.cleareduser
	case message.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeVoice:
		m.ClearVoice()
		return nil
	case message.EdgeReplyTo:
		m.ClearReplyTo()
		return nil
	case message.EdgeUser:
		m.ClearUser()
		return nil
	case message.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeVoice:
		m.ResetVoice()
		return nil
	case message.EdgeReplyTo:
		m.ResetReplyTo()
		return nil
	case message.EdgeAttachments:
		m.ResetAttachments()
		return nil
	case message.EdgeLinks:
		m.ResetLinks()
		return nil
	case message.EdgeUser:
		m.ResetUser()
		return nil
	case message.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// MessageAttachmentMutation represents an operation that mutates the MessageAttachment nodes in the graph.
type MessageAttachmentMutation struct {
	config
	op             Op
	typ            string
	id             *pulid.ID
	_order         *uint
	add_order      *int
	attached_at    *time.Time
	clearedFields  map[string]struct{}
	room           *pulid.ID
	clearedroom    bool
	message        *pulid.ID
	clearedmessage bool
	file           *pulid.ID
	clearedfile    bool
	done           bool
	oldValue       func(context.Context) (*MessageAttachment, error)
	predicates     []predicate.MessageAttachment
}

var _ ent.Mutation = (*MessageAttachmentMutation)(nil)

// messageattachmentOption allows management of the mutation configuration using functional options.
type messageattachmentOption func(*MessageAttachmentMutation)

// newMessageAttachmentMutation creates new mutation for the MessageAttachment entity.
func newMessageAttachmentMutation(c config, op Op, opts ...messageattachmentOption) *MessageAttachmentMutation {
	m := &MessageAttachmentMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageAttachment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageAttachmentID sets the ID field of the mutation.
func withMessageAttachmentID(id pulid.ID) messageattachmentOption {
	return func(m *MessageAttachmentMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageAttachment
		)
		m.oldValue = func(ctx context.Context) (*MessageAttachment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageAttachment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageAttachment sets the old MessageAttachment of the mutation.
func withMessageAttachment(node *MessageAttachment) messageattachmentOption {
	return func(m *MessageAttachmentMutation) {
		m.oldValue = func(context.Context) (*MessageAttachment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageAttachmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageAttachmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MessageAttachment entities.
func (m *MessageAttachmentMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageAttachmentMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageAttachmentMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageAttachment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrder sets the "order" field.
func (m *MessageAttachmentMutation) SetOrder(u uint) {
	m._order = &u
	m.add_order = nil
}

// Order returns the value of the "order" field in the mutation.
func (m *MessageAttachmentMutation) Order() (r uint, exists bool) {
	v := m._order
	if v == nil {
		return
	}
	return *v, true
}

// OldOrder returns the old "order" field's value of the MessageAttachment entity.
// If the MessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageAttachmentMutation) OldOrder(ctx context.Context) (v uint, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrder: %w", err)
	}
	return oldValue.Order, nil
}

// AddOrder adds u to the "order" field.
func (m *MessageAttachmentMutation) AddOrder(u int) {
	if m.add_order != nil {
		*m.add_order += u
	} else {
		m.add_order = &u
	}
}

// AddedOrder returns the value that was added to the "order" field in this mutation.
func (m *MessageAttachmentMutation) AddedOrder() (r int, exists bool) {
	v := m.add_order
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrder resets all changes to the "order" field.
func (m *MessageAttachmentMutation) ResetOrder() {
	m._order = nil
	m.add_order = nil
}

// SetAttachedAt sets the "attached_at" field.
func (m *MessageAttachmentMutation) SetAttachedAt(t time.Time) {
	m.attached_at = &t
}

// AttachedAt returns the value of the "attached_at" field in the mutation.
func (m *MessageAttachmentMutation) AttachedAt() (r time.Time, exists bool) {
	v := m.attached_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachedAt returns the old "attached_at" field's value of the MessageAttachment entity.
// If the MessageAttachment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageAttachmentMutation) OldAttachedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachedAt: %w", err)
	}
	return oldValue.AttachedAt, nil
}

// ResetAttachedAt resets all changes to the "attached_at" field.
func (m *MessageAttachmentMutation) ResetAttachedAt() {
	m.attached_at = nil
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *MessageAttachmentMutation) SetRoomID(id pulid.ID) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *MessageAttachmentMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *MessageAttachmentMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *MessageAttachmentMutation) RoomID() (id pulid.ID, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *MessageAttachmentMutation) RoomIDs() (ids []pulid.ID) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *MessageAttachmentMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *MessageAttachmentMutation) SetMessageID(id pulid.ID) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *MessageAttachmentMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared reports if the "message" edge to the Message entity was cleared.
func (m *MessageAttachmentMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *MessageAttachmentMutation) MessageID() (id pulid.ID, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *MessageAttachmentMutation) MessageIDs() (ids []pulid.ID) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *MessageAttachmentMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// SetFileID sets the "file" edge to the File entity by id.
func (m *MessageAttachmentMutation) SetFileID(id pulid.ID) {
	m.file = &id
}

// ClearFile clears the "file" edge to the File entity.
func (m *MessageAttachmentMutation) ClearFile() {
	m.clearedfile = true
}

// FileCleared reports if the "file" edge to the File entity was cleared.
func (m *MessageAttachmentMutation) FileCleared() bool {
	return m.clearedfile
}

// FileID returns the "file" edge ID in the mutation.
func (m *MessageAttachmentMutation) FileID() (id pulid.ID, exists bool) {
	if m.file != nil {
		return *m.file, true
	}
	return
}

// FileIDs returns the "file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileID instead. It exists only for internal usage by the builders.
func (m *MessageAttachmentMutation) FileIDs() (ids []pulid.ID) {
	if id := m.file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFile resets all changes to the "file" edge.
func (m *MessageAttachmentMutation) ResetFile() {
	m.file = nil
	m.clearedfile = false
}

// Where appends a list predicates to the MessageAttachmentMutation builder.
func (m *MessageAttachmentMutation) Where(ps ...predicate.MessageAttachment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageAttachmentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageAttachmentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageAttachment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageAttachmentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageAttachmentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageAttachment).
func (m *MessageAttachmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageAttachmentMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._order != nil {
		fields = append(fields, messageattachment.FieldOrder)
	}
	if m.attached_at != nil {
		fields = append(fields, messageattachment.FieldAttachedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageAttachmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messageattachment.FieldOrder:
		return m.Order()
	case messageattachment.FieldAttachedAt:
		return m.AttachedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageAttachmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messageattachment.FieldOrder:
		return m.OldOrder(ctx)
	case messageattachment.FieldAttachedAt:
		return m.OldAttachedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MessageAttachment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageAttachmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messageattachment.FieldOrder:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrder(v)
		return nil
	case messageattachment.FieldAttachedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MessageAttachment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageAttachmentMutation) AddedFields() []string {
	var fields []string
	if m.add_order != nil {
		fields = append(fields, messageattachment.FieldOrder)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageAttachmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case messageattachment.FieldOrder:
		return m.AddedOrder()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageAttachmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case messageattachment.FieldOrder:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrder(v)
		return nil
	}
	return fmt.Errorf("unknown MessageAttachment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageAttachmentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageAttachmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageAttachmentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageAttachment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageAttachmentMutation) ResetField(name string) error {
	switch name {
	case messageattachment.FieldOrder:
		m.ResetOrder()
		return nil
	case messageattachment.FieldAttachedAt:
		m.ResetAttachedAt()
		return nil
	}
	return fmt.Errorf("unknown MessageAttachment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageAttachmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.room != nil {
		edges = append(edges, messageattachment.EdgeRoom)
	}
	if m.message != nil {
		edges = append(edges, messageattachment.EdgeMessage)
	}
	if m.file != nil {
		edges = append(edges, messageattachment.EdgeFile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageAttachmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case messageattachment.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	case messageattachment.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	case messageattachment.EdgeFile:
		if id := m.file; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageAttachmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageAttachmentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageAttachmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedroom {
		edges = append(edges, messageattachment.EdgeRoom)
	}
	if m.clearedmessage {
		edges = append(edges, messageattachment.EdgeMessage)
	}
	if m.clearedfile {
		edges = append(edges, messageattachment.EdgeFile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageAttachmentMutation) EdgeCleared(name string) bool {
	switch name {
	case messageattachment.EdgeRoom:
		return m.clearedroom
	case messageattachment.EdgeMessage:
		return m.clearedmessage
	case messageattachment.EdgeFile:
		return m.clearedfile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageAttachmentMutation) ClearEdge(name string) error {
	switch name {
	case messageattachment.EdgeRoom:
		m.ClearRoom()
		return nil
	case messageattachment.EdgeMessage:
		m.ClearMessage()
		return nil
	case messageattachment.EdgeFile:
		m.ClearFile()
		return nil
	}
	return fmt.Errorf("unknown MessageAttachment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageAttachmentMutation) ResetEdge(name string) error {
	switch name {
	case messageattachment.EdgeRoom:
		m.ResetRoom()
		return nil
	case messageattachment.EdgeMessage:
		m.ResetMessage()
		return nil
	case messageattachment.EdgeFile:
		m.ResetFile()
		return nil
	}
	return fmt.Errorf("unknown MessageAttachment edge %s", name)
}

// MessageLinkMutation represents an operation that mutates the MessageLink nodes in the graph.
type MessageLinkMutation struct {
	config
	op             Op
	typ            string
	id             *pulid.ID
	url            *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	room           *pulid.ID
	clearedroom    bool
	message        *pulid.ID
	clearedmessage bool
	done           bool
	oldValue       func(context.Context) (*MessageLink, error)
	predicates     []predicate.MessageLink
}

var _ ent.Mutation = (*MessageLinkMutation)(nil)

// messagelinkOption allows management of the mutation configuration using functional options.
type messagelinkOption func(*MessageLinkMutation)

// newMessageLinkMutation creates new mutation for the MessageLink entity.
func newMessageLinkMutation(c config, op Op, opts ...messagelinkOption) *MessageLinkMutation {
	m := &MessageLinkMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageLink,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageLinkID sets the ID field of the mutation.
func withMessageLinkID(id pulid.ID) messagelinkOption {
	return func(m *MessageLinkMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageLink
		)
		m.oldValue = func(ctx context.Context) (*MessageLink, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageLink.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageLink sets the old MessageLink of the mutation.
func withMessageLink(node *MessageLink) messagelinkOption {
	return func(m *MessageLinkMutation) {
		m.oldValue = func(context.Context) (*MessageLink, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageLinkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageLinkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MessageLink entities.
func (m *MessageLinkMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageLinkMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageLinkMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageLink.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetURL sets the "url" field.
func (m *MessageLinkMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *MessageLinkMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the MessageLink entity.
// If the MessageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageLinkMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *MessageLinkMutation) ResetURL() {
	m.url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageLinkMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageLinkMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the MessageLink entity.
// If the MessageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageLinkMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageLinkMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MessageLinkMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MessageLinkMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the MessageLink entity.
// If the MessageLink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageLinkMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MessageLinkMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *MessageLinkMutation) SetRoomID(id pulid.ID) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *MessageLinkMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *MessageLinkMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *MessageLinkMutation) RoomID() (id pulid.ID, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *MessageLinkMutation) RoomIDs() (ids []pulid.ID) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *MessageLinkMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *MessageLinkMutation) SetMessageID(id pulid.ID) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *MessageLinkMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared reports if the "message" edge to the Message entity was cleared.
func (m *MessageLinkMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *MessageLinkMutation) MessageID() (id pulid.ID, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *MessageLinkMutation) MessageIDs() (ids []pulid.ID) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *MessageLinkMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// Where appends a list predicates to the MessageLinkMutation builder.
func (m *MessageLinkMutation) Where(ps ...predicate.MessageLink) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageLinkMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageLinkMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageLink, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageLinkMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageLinkMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageLink).
func (m *MessageLinkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageLinkMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.url != nil {
		fields = append(fields, messagelink.FieldURL)
	}
	if m.created_at != nil {
		fields = append(fields, messagelink.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, messagelink.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageLinkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagelink.FieldURL:
		return m.URL()
	case messagelink.FieldCreatedAt:
		return m.CreatedAt()
	case messagelink.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageLinkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagelink.FieldURL:
		return m.OldURL(ctx)
	case messagelink.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case messagelink.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MessageLink field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageLinkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagelink.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case messagelink.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case messagelink.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MessageLink field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageLinkMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageLinkMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageLinkMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageLink numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageLinkMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageLinkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageLinkMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageLink nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageLinkMutation) ResetField(name string) error {
	switch name {
	case messagelink.FieldURL:
		m.ResetURL()
		return nil
	case messagelink.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case messagelink.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown MessageLink field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageLinkMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.room != nil {
		edges = append(edges, messagelink.EdgeRoom)
	}
	if m.message != nil {
		edges = append(edges, messagelink.EdgeMessage)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageLinkMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case messagelink.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	case messagelink.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageLinkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageLinkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageLinkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedroom {
		edges = append(edges, messagelink.EdgeRoom)
	}
	if m.clearedmessage {
		edges = append(edges, messagelink.EdgeMessage)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageLinkMutation) EdgeCleared(name string) bool {
	switch name {
	case messagelink.EdgeRoom:
		return m.clearedroom
	case messagelink.EdgeMessage:
		return m.clearedmessage
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageLinkMutation) ClearEdge(name string) error {
	switch name {
	case messagelink.EdgeRoom:
		m.ClearRoom()
		return nil
	case messagelink.EdgeMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown MessageLink unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageLinkMutation) ResetEdge(name string) error {
	switch name {
	case messagelink.EdgeRoom:
		m.ResetRoom()
		return nil
	case messagelink.EdgeMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown MessageLink edge %s", name)
}

// MessageVoiceMutation represents an operation that mutates the MessageVoice nodes in the graph.
type MessageVoiceMutation struct {
	config
	op             Op
	typ            string
	id             *pulid.ID
	attached_at    *time.Time
	clearedFields  map[string]struct{}
	room           *pulid.ID
	clearedroom    bool
	message        *pulid.ID
	clearedmessage bool
	file           *pulid.ID
	clearedfile    bool
	done           bool
	oldValue       func(context.Context) (*MessageVoice, error)
	predicates     []predicate.MessageVoice
}

var _ ent.Mutation = (*MessageVoiceMutation)(nil)

// messagevoiceOption allows management of the mutation configuration using functional options.
type messagevoiceOption func(*MessageVoiceMutation)

// newMessageVoiceMutation creates new mutation for the MessageVoice entity.
func newMessageVoiceMutation(c config, op Op, opts ...messagevoiceOption) *MessageVoiceMutation {
	m := &MessageVoiceMutation{
		config:        c,
		op:            op,
		typ:           TypeMessageVoice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageVoiceID sets the ID field of the mutation.
func withMessageVoiceID(id pulid.ID) messagevoiceOption {
	return func(m *MessageVoiceMutation) {
		var (
			err   error
			once  sync.Once
			value *MessageVoice
		)
		m.oldValue = func(ctx context.Context) (*MessageVoice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MessageVoice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessageVoice sets the old MessageVoice of the mutation.
func withMessageVoice(node *MessageVoice) messagevoiceOption {
	return func(m *MessageVoiceMutation) {
		m.oldValue = func(context.Context) (*MessageVoice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageVoiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageVoiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of MessageVoice entities.
func (m *MessageVoiceMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageVoiceMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageVoiceMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MessageVoice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAttachedAt sets the "attached_at" field.
func (m *MessageVoiceMutation) SetAttachedAt(t time.Time) {
	m.attached_at = &t
}

// AttachedAt returns the value of the "attached_at" field in the mutation.
func (m *MessageVoiceMutation) AttachedAt() (r time.Time, exists bool) {
	v := m.attached_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachedAt returns the old "attached_at" field's value of the MessageVoice entity.
// If the MessageVoice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageVoiceMutation) OldAttachedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttachedAt: %w", err)
	}
	return oldValue.AttachedAt, nil
}

// ResetAttachedAt resets all changes to the "attached_at" field.
func (m *MessageVoiceMutation) ResetAttachedAt() {
	m.attached_at = nil
}

// SetRoomID sets the "room" edge to the Room entity by id.
func (m *MessageVoiceMutation) SetRoomID(id pulid.ID) {
	m.room = &id
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *MessageVoiceMutation) ClearRoom() {
	m.clearedroom = true
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *MessageVoiceMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomID returns the "room" edge ID in the mutation.
func (m *MessageVoiceMutation) RoomID() (id pulid.ID, exists bool) {
	if m.room != nil {
		return *m.room, true
	}
	return
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *MessageVoiceMutation) RoomIDs() (ids []pulid.ID) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *MessageVoiceMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// SetMessageID sets the "message" edge to the Message entity by id.
func (m *MessageVoiceMutation) SetMessageID(id pulid.ID) {
	m.message = &id
}

// ClearMessage clears the "message" edge to the Message entity.
func (m *MessageVoiceMutation) ClearMessage() {
	m.clearedmessage = true
}

// MessageCleared reports if the "message" edge to the Message entity was cleared.
func (m *MessageVoiceMutation) MessageCleared() bool {
	return m.clearedmessage
}

// MessageID returns the "message" edge ID in the mutation.
func (m *MessageVoiceMutation) MessageID() (id pulid.ID, exists bool) {
	if m.message != nil {
		return *m.message, true
	}
	return
}

// MessageIDs returns the "message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MessageID instead. It exists only for internal usage by the builders.
func (m *MessageVoiceMutation) MessageIDs() (ids []pulid.ID) {
	if id := m.message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMessage resets all changes to the "message" edge.
func (m *MessageVoiceMutation) ResetMessage() {
	m.message = nil
	m.clearedmessage = false
}

// SetFileID sets the "file" edge to the File entity by id.
func (m *MessageVoiceMutation) SetFileID(id pulid.ID) {
	m.file = &id
}

// ClearFile clears the "file" edge to the File entity.
func (m *MessageVoiceMutation) ClearFile() {
	m.clearedfile = true
}

// FileCleared reports if the "file" edge to the File entity was cleared.
func (m *MessageVoiceMutation) FileCleared() bool {
	return m.clearedfile
}

// FileID returns the "file" edge ID in the mutation.
func (m *MessageVoiceMutation) FileID() (id pulid.ID, exists bool) {
	if m.file != nil {
		return *m.file, true
	}
	return
}

// FileIDs returns the "file" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FileID instead. It exists only for internal usage by the builders.
func (m *MessageVoiceMutation) FileIDs() (ids []pulid.ID) {
	if id := m.file; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFile resets all changes to the "file" edge.
func (m *MessageVoiceMutation) ResetFile() {
	m.file = nil
	m.clearedfile = false
}

// Where appends a list predicates to the MessageVoiceMutation builder.
func (m *MessageVoiceMutation) Where(ps ...predicate.MessageVoice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageVoiceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageVoiceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.MessageVoice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageVoiceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageVoiceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (MessageVoice).
func (m *MessageVoiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageVoiceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.attached_at != nil {
		fields = append(fields, messagevoice.FieldAttachedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageVoiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case messagevoice.FieldAttachedAt:
		return m.AttachedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageVoiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case messagevoice.FieldAttachedAt:
		return m.OldAttachedAt(ctx)
	}
	return nil, fmt.Errorf("unknown MessageVoice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageVoiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case messagevoice.FieldAttachedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttachedAt(v)
		return nil
	}
	return fmt.Errorf("unknown MessageVoice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageVoiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageVoiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageVoiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MessageVoice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageVoiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageVoiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageVoiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MessageVoice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageVoiceMutation) ResetField(name string) error {
	switch name {
	case messagevoice.FieldAttachedAt:
		m.ResetAttachedAt()
		return nil
	}
	return fmt.Errorf("unknown MessageVoice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageVoiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.room != nil {
		edges = append(edges, messagevoice.EdgeRoom)
	}
	if m.message != nil {
		edges = append(edges, messagevoice.EdgeMessage)
	}
	if m.file != nil {
		edges = append(edges, messagevoice.EdgeFile)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageVoiceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case messagevoice.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	case messagevoice.EdgeMessage:
		if id := m.message; id != nil {
			return []ent.Value{*id}
		}
	case messagevoice.EdgeFile:
		if id := m.file; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageVoiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageVoiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageVoiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedroom {
		edges = append(edges, messagevoice.EdgeRoom)
	}
	if m.clearedmessage {
		edges = append(edges, messagevoice.EdgeMessage)
	}
	if m.clearedfile {
		edges = append(edges, messagevoice.EdgeFile)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageVoiceMutation) EdgeCleared(name string) bool {
	switch name {
	case messagevoice.EdgeRoom:
		return m.clearedroom
	case messagevoice.EdgeMessage:
		return m.clearedmessage
	case messagevoice.EdgeFile:
		return m.clearedfile
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageVoiceMutation) ClearEdge(name string) error {
	switch name {
	case messagevoice.EdgeRoom:
		m.ClearRoom()
		return nil
	case messagevoice.EdgeMessage:
		m.ClearMessage()
		return nil
	case messagevoice.EdgeFile:
		m.ClearFile()
		return nil
	}
	return fmt.Errorf("unknown MessageVoice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageVoiceMutation) ResetEdge(name string) error {
	switch name {
	case messagevoice.EdgeRoom:
		m.ResetRoom()
		return nil
	case messagevoice.EdgeMessage:
		m.ResetMessage()
		return nil
	case messagevoice.EdgeFile:
		m.ResetFile()
		return nil
	}
	return fmt.Errorf("unknown MessageVoice edge %s", name)
}

// RoomMutation represents an operation that mutates the Room nodes in the graph.
type RoomMutation struct {
	config
	op                         Op
	typ                        string
	id                         *pulid.ID
	deleted_at                 *time.Time
	name                       *string
	version                    *uint64
	addversion                 *int64
	_type                      *room.Type
	created_at                 *time.Time
	updated_at                 *time.Time
	clearedFields              map[string]struct{}
	users                      map[pulid.ID]struct{}
	removedusers               map[pulid.ID]struct{}
	clearedusers               bool
	last_message               *pulid.ID
	clearedlast_message        bool
	messages                   map[pulid.ID]struct{}
	removedmessages            map[pulid.ID]struct{}
	clearedmessages            bool
	message_voices             map[pulid.ID]struct{}
	removedmessage_voices      map[pulid.ID]struct{}
	clearedmessage_voices      bool
	message_attachments        map[pulid.ID]struct{}
	removedmessage_attachments map[pulid.ID]struct{}
	clearedmessage_attachments bool
	message_links              map[pulid.ID]struct{}
	removedmessage_links       map[pulid.ID]struct{}
	clearedmessage_links       bool
	room_members               map[pulid.ID]struct{}
	removedroom_members        map[pulid.ID]struct{}
	clearedroom_members        bool
	done                       bool
	oldValue                   func(context.Context) (*Room, error)
	predicates                 []predicate.Room
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows management of the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for the Room entity.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the ID field of the mutation.
func withRoomID(id pulid.ID) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Room entities.
func (m *RoomMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoomMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoomMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Room.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoomMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoomMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoomMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[room.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoomMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[room.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoomMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, room.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *RoomMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoomMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoomMutation) ResetName() {
	m.name = nil
}

// SetVersion sets the "version" field.
func (m *RoomMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *RoomMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *RoomMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *RoomMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *RoomMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetType sets the "type" field.
func (m *RoomMutation) SetType(r room.Type) {
	m._type = &r
}

// GetType returns the value of the "type" field in the mutation.
func (m *RoomMutation) GetType() (r room.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldType(ctx context.Context) (v room.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RoomMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RoomMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoomMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoomMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoomMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoomMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Room entity.
// If the Room object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoomMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *RoomMutation) AddUserIDs(ids ...pulid.ID) {
	if m.users == nil {
		m.users = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *RoomMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *RoomMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *RoomMutation) RemoveUserIDs(ids ...pulid.ID) {
	if m.removedusers == nil {
		m.removedusers = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *RoomMutation) RemovedUsersIDs() (ids []pulid.ID) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *RoomMutation) UsersIDs() (ids []pulid.ID) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *RoomMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// SetLastMessageID sets the "last_message" edge to the Message entity by id.
func (m *RoomMutation) SetLastMessageID(id pulid.ID) {
	m.last_message = &id
}

// ClearLastMessage clears the "last_message" edge to the Message entity.
func (m *RoomMutation) ClearLastMessage() {
	m.clearedlast_message = true
}

// LastMessageCleared reports if the "last_message" edge to the Message entity was cleared.
func (m *RoomMutation) LastMessageCleared() bool {
	return m.clearedlast_message
}

// LastMessageID returns the "last_message" edge ID in the mutation.
func (m *RoomMutation) LastMessageID() (id pulid.ID, exists bool) {
	if m.last_message != nil {
		return *m.last_message, true
	}
	return
}

// LastMessageIDs returns the "last_message" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LastMessageID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) LastMessageIDs() (ids []pulid.ID) {
	if id := m.last_message; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLastMessage resets all changes to the "last_message" edge.
func (m *RoomMutation) ResetLastMessage() {
	m.last_message = nil
	m.clearedlast_message = false
}

// AddMessageIDs adds the "messages" edge to the Message entity by ids.
func (m *RoomMutation) AddMessageIDs(ids ...pulid.ID) {
	if m.messages == nil {
		m.messages = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Message entity.
func (m *RoomMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the Message entity was cleared.
func (m *RoomMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Message entity by IDs.
func (m *RoomMutation) RemoveMessageIDs(ids ...pulid.ID) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Message entity.
func (m *RoomMutation) RemovedMessagesIDs() (ids []pulid.ID) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *RoomMutation) MessagesIDs() (ids []pulid.ID) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *RoomMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// AddMessageVoiceIDs adds the "message_voices" edge to the MessageVoice entity by ids.
func (m *RoomMutation) AddMessageVoiceIDs(ids ...pulid.ID) {
	if m.message_voices == nil {
		m.message_voices = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.message_voices[ids[i]] = struct{}{}
	}
}

// ClearMessageVoices clears the "message_voices" edge to the MessageVoice entity.
func (m *RoomMutation) ClearMessageVoices() {
	m.clearedmessage_voices = true
}

// MessageVoicesCleared reports if the "message_voices" edge to the MessageVoice entity was cleared.
func (m *RoomMutation) MessageVoicesCleared() bool {
	return m.clearedmessage_voices
}

// RemoveMessageVoiceIDs removes the "message_voices" edge to the MessageVoice entity by IDs.
func (m *RoomMutation) RemoveMessageVoiceIDs(ids ...pulid.ID) {
	if m.removedmessage_voices == nil {
		m.removedmessage_voices = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.message_voices, ids[i])
		m.removedmessage_voices[ids[i]] = struct{}{}
	}
}

// RemovedMessageVoices returns the removed IDs of the "message_voices" edge to the MessageVoice entity.
func (m *RoomMutation) RemovedMessageVoicesIDs() (ids []pulid.ID) {
	for id := range m.removedmessage_voices {
		ids = append(ids, id)
	}
	return
}

// MessageVoicesIDs returns the "message_voices" edge IDs in the mutation.
func (m *RoomMutation) MessageVoicesIDs() (ids []pulid.ID) {
	for id := range m.message_voices {
		ids = append(ids, id)
	}
	return
}

// ResetMessageVoices resets all changes to the "message_voices" edge.
func (m *RoomMutation) ResetMessageVoices() {
	m.message_voices = nil
	m.clearedmessage_voices = false
	m.removedmessage_voices = nil
}

// AddMessageAttachmentIDs adds the "message_attachments" edge to the MessageAttachment entity by ids.
func (m *RoomMutation) AddMessageAttachmentIDs(ids ...pulid.ID) {
	if m.message_attachments == nil {
		m.message_attachments = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.message_attachments[ids[i]] = struct{}{}
	}
}

// ClearMessageAttachments clears the "message_attachments" edge to the MessageAttachment entity.
func (m *RoomMutation) ClearMessageAttachments() {
	m.clearedmessage_attachments = true
}

// MessageAttachmentsCleared reports if the "message_attachments" edge to the MessageAttachment entity was cleared.
func (m *RoomMutation) MessageAttachmentsCleared() bool {
	return m.clearedmessage_attachments
}

// RemoveMessageAttachmentIDs removes the "message_attachments" edge to the MessageAttachment entity by IDs.
func (m *RoomMutation) RemoveMessageAttachmentIDs(ids ...pulid.ID) {
	if m.removedmessage_attachments == nil {
		m.removedmessage_attachments = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.message_attachments, ids[i])
		m.removedmessage_attachments[ids[i]] = struct{}{}
	}
}

// RemovedMessageAttachments returns the removed IDs of the "message_attachments" edge to the MessageAttachment entity.
func (m *RoomMutation) RemovedMessageAttachmentsIDs() (ids []pulid.ID) {
	for id := range m.removedmessage_attachments {
		ids = append(ids, id)
	}
	return
}

// MessageAttachmentsIDs returns the "message_attachments" edge IDs in the mutation.
func (m *RoomMutation) MessageAttachmentsIDs() (ids []pulid.ID) {
	for id := range m.message_attachments {
		ids = append(ids, id)
	}
	return
}

// ResetMessageAttachments resets all changes to the "message_attachments" edge.
func (m *RoomMutation) ResetMessageAttachments() {
	m.message_attachments = nil
	m.clearedmessage_attachments = false
	m.removedmessage_attachments = nil
}

// AddMessageLinkIDs adds the "message_links" edge to the MessageLink entity by ids.
func (m *RoomMutation) AddMessageLinkIDs(ids ...pulid.ID) {
	if m.message_links == nil {
		m.message_links = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.message_links[ids[i]] = struct{}{}
	}
}

// ClearMessageLinks clears the "message_links" edge to the MessageLink entity.
func (m *RoomMutation) ClearMessageLinks() {
	m.clearedmessage_links = true
}

// MessageLinksCleared reports if the "message_links" edge to the MessageLink entity was cleared.
func (m *RoomMutation) MessageLinksCleared() bool {
	return m.clearedmessage_links
}

// RemoveMessageLinkIDs removes the "message_links" edge to the MessageLink entity by IDs.
func (m *RoomMutation) RemoveMessageLinkIDs(ids ...pulid.ID) {
	if m.removedmessage_links == nil {
		m.removedmessage_links = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.message_links, ids[i])
		m.removedmessage_links[ids[i]] = struct{}{}
	}
}

// RemovedMessageLinks returns the removed IDs of the "message_links" edge to the MessageLink entity.
func (m *RoomMutation) RemovedMessageLinksIDs() (ids []pulid.ID) {
	for id := range m.removedmessage_links {
		ids = append(ids, id)
	}
	return
}

// MessageLinksIDs returns the "message_links" edge IDs in the mutation.
func (m *RoomMutation) MessageLinksIDs() (ids []pulid.ID) {
	for id := range m.message_links {
		ids = append(ids, id)
	}
	return
}

// ResetMessageLinks resets all changes to the "message_links" edge.
func (m *RoomMutation) ResetMessageLinks() {
	m.message_links = nil
	m.clearedmessage_links = false
	m.removedmessage_links = nil
}

// AddRoomMemberIDs adds the "room_members" edge to the RoomMember entity by ids.
func (m *RoomMutation) AddRoomMemberIDs(ids ...pulid.ID) {
	if m.room_members == nil {
		m.room_members = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.room_members[ids[i]] = struct{}{}
	}
}

// ClearRoomMembers clears the "room_members" edge to the RoomMember entity.
func (m *RoomMutation) ClearRoomMembers() {
	m.clearedroom_members = true
}

// RoomMembersCleared reports if the "room_members" edge to the RoomMember entity was cleared.
func (m *RoomMutation) RoomMembersCleared() bool {
	return m.clearedroom_members
}

// RemoveRoomMemberIDs removes the "room_members" edge to the RoomMember entity by IDs.
func (m *RoomMutation) RemoveRoomMemberIDs(ids ...pulid.ID) {
	if m.removedroom_members == nil {
		m.removedroom_members = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.room_members, ids[i])
		m.removedroom_members[ids[i]] = struct{}{}
	}
}

// RemovedRoomMembers returns the removed IDs of the "room_members" edge to the RoomMember entity.
func (m *RoomMutation) RemovedRoomMembersIDs() (ids []pulid.ID) {
	for id := range m.removedroom_members {
		ids = append(ids, id)
	}
	return
}

// RoomMembersIDs returns the "room_members" edge IDs in the mutation.
func (m *RoomMutation) RoomMembersIDs() (ids []pulid.ID) {
	for id := range m.room_members {
		ids = append(ids, id)
	}
	return
}

// ResetRoomMembers resets all changes to the "room_members" edge.
func (m *RoomMutation) ResetRoomMembers() {
	m.room_members = nil
	m.clearedroom_members = false
	m.removedroom_members = nil
}

// Where appends a list predicates to the RoomMutation builder.
func (m *RoomMutation) Where(ps ...predicate.Room) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoomMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoomMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Room, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoomMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.deleted_at != nil {
		fields = append(fields, room.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, room.FieldName)
	}
	if m.version != nil {
		fields = append(fields, room.FieldVersion)
	}
	if m._type != nil {
		fields = append(fields, room.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, room.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, room.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldDeletedAt:
		return m.DeletedAt()
	case room.FieldName:
		return m.Name()
	case room.FieldVersion:
		return m.Version()
	case room.FieldType:
		return m.GetType()
	case room.FieldCreatedAt:
		return m.CreatedAt()
	case room.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case room.FieldName:
		return m.OldName(ctx)
	case room.FieldVersion:
		return m.OldVersion(ctx)
	case room.FieldType:
		return m.OldType(ctx)
	case room.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case room.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case room.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case room.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case room.FieldType:
		v, ok := value.(room.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case room.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case room.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoomMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, room.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case room.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	case room.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoomMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(room.FieldDeletedAt) {
		fields = append(fields, room.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	switch name {
	case room.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case room.FieldName:
		m.ResetName()
		return nil
	case room.FieldVersion:
		m.ResetVersion()
		return nil
	case room.FieldType:
		m.ResetType()
		return nil
	case room.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case room.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.users != nil {
		edges = append(edges, room.EdgeUsers)
	}
	if m.last_message != nil {
		edges = append(edges, room.EdgeLastMessage)
	}
	if m.messages != nil {
		edges = append(edges, room.EdgeMessages)
	}
	if m.message_voices != nil {
		edges = append(edges, room.EdgeMessageVoices)
	}
	if m.message_attachments != nil {
		edges = append(edges, room.EdgeMessageAttachments)
	}
	if m.message_links != nil {
		edges = append(edges, room.EdgeMessageLinks)
	}
	if m.room_members != nil {
		edges = append(edges, room.EdgeRoomMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeLastMessage:
		if id := m.last_message; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessageVoices:
		ids := make([]ent.Value, 0, len(m.message_voices))
		for id := range m.message_voices {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessageAttachments:
		ids := make([]ent.Value, 0, len(m.message_attachments))
		for id := range m.message_attachments {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessageLinks:
		ids := make([]ent.Value, 0, len(m.message_links))
		for id := range m.message_links {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeRoomMembers:
		ids := make([]ent.Value, 0, len(m.room_members))
		for id := range m.room_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedusers != nil {
		edges = append(edges, room.EdgeUsers)
	}
	if m.removedmessages != nil {
		edges = append(edges, room.EdgeMessages)
	}
	if m.removedmessage_voices != nil {
		edges = append(edges, room.EdgeMessageVoices)
	}
	if m.removedmessage_attachments != nil {
		edges = append(edges, room.EdgeMessageAttachments)
	}
	if m.removedmessage_links != nil {
		edges = append(edges, room.EdgeMessageLinks)
	}
	if m.removedroom_members != nil {
		edges = append(edges, room.EdgeRoomMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessageVoices:
		ids := make([]ent.Value, 0, len(m.removedmessage_voices))
		for id := range m.removedmessage_voices {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessageAttachments:
		ids := make([]ent.Value, 0, len(m.removedmessage_attachments))
		for id := range m.removedmessage_attachments {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeMessageLinks:
		ids := make([]ent.Value, 0, len(m.removedmessage_links))
		for id := range m.removedmessage_links {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeRoomMembers:
		ids := make([]ent.Value, 0, len(m.removedroom_members))
		for id := range m.removedroom_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedusers {
		edges = append(edges, room.EdgeUsers)
	}
	if m.clearedlast_message {
		edges = append(edges, room.EdgeLastMessage)
	}
	if m.clearedmessages {
		edges = append(edges, room.EdgeMessages)
	}
	if m.clearedmessage_voices {
		edges = append(edges, room.EdgeMessageVoices)
	}
	if m.clearedmessage_attachments {
		edges = append(edges, room.EdgeMessageAttachments)
	}
	if m.clearedmessage_links {
		edges = append(edges, room.EdgeMessageLinks)
	}
	if m.clearedroom_members {
		edges = append(edges, room.EdgeRoomMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeUsers:
		return m.clearedusers
	case room.EdgeLastMessage:
		return m.clearedlast_message
	case room.EdgeMessages:
		return m.clearedmessages
	case room.EdgeMessageVoices:
		return m.clearedmessage_voices
	case room.EdgeMessageAttachments:
		return m.clearedmessage_attachments
	case room.EdgeMessageLinks:
		return m.clearedmessage_links
	case room.EdgeRoomMembers:
		return m.clearedroom_members
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeLastMessage:
		m.ClearLastMessage()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeUsers:
		m.ResetUsers()
		return nil
	case room.EdgeLastMessage:
		m.ResetLastMessage()
		return nil
	case room.EdgeMessages:
		m.ResetMessages()
		return nil
	case room.EdgeMessageVoices:
		m.ResetMessageVoices()
		return nil
	case room.EdgeMessageAttachments:
		m.ResetMessageAttachments()
		return nil
	case room.EdgeMessageLinks:
		m.ResetMessageLinks()
		return nil
	case room.EdgeRoomMembers:
		m.ResetRoomMembers()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// RoomMemberMutation represents an operation that mutates the RoomMember nodes in the graph.
type RoomMemberMutation struct {
	config
	op                       Op
	typ                      string
	id                       *pulid.ID
	deleted_at               *time.Time
	unread_messages_count    *int
	addunread_messages_count *int
	joined_at                *time.Time
	clearedFields            map[string]struct{}
	user                     *pulid.ID
	cleareduser              bool
	room                     *pulid.ID
	clearedroom              bool
	done                     bool
	oldValue                 func(context.Context) (*RoomMember, error)
	predicates               []predicate.RoomMember
}

var _ ent.Mutation = (*RoomMemberMutation)(nil)

// roommemberOption allows management of the mutation configuration using functional options.
type roommemberOption func(*RoomMemberMutation)

// newRoomMemberMutation creates new mutation for the RoomMember entity.
func newRoomMemberMutation(c config, op Op, opts ...roommemberOption) *RoomMemberMutation {
	m := &RoomMemberMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomMemberID sets the ID field of the mutation.
func withRoomMemberID(id pulid.ID) roommemberOption {
	return func(m *RoomMemberMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomMember
		)
		m.oldValue = func(ctx context.Context) (*RoomMember, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomMember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomMember sets the old RoomMember of the mutation.
func withRoomMember(node *RoomMember) roommemberOption {
	return func(m *RoomMemberMutation) {
		m.oldValue = func(context.Context) (*RoomMember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RoomMember entities.
func (m *RoomMemberMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoomMemberMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoomMemberMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RoomMember.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedAt sets the "deleted_at" field.
func (m *RoomMemberMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *RoomMemberMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the RoomMember entity.
// If the RoomMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMemberMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *RoomMemberMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[roommember.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *RoomMemberMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[roommember.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *RoomMemberMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, roommember.FieldDeletedAt)
}

// SetUnreadMessagesCount sets the "unread_messages_count" field.
func (m *RoomMemberMutation) SetUnreadMessagesCount(i int) {
	m.unread_messages_count = &i
	m.addunread_messages_count = nil
}

// UnreadMessagesCount returns the value of the "unread_messages_count" field in the mutation.
func (m *RoomMemberMutation) UnreadMessagesCount() (r int, exists bool) {
	v := m.unread_messages_count
	if v == nil {
		return
	}
	return *v, true
}

// OldUnreadMessagesCount returns the old "unread_messages_count" field's value of the RoomMember entity.
// If the RoomMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMemberMutation) OldUnreadMessagesCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnreadMessagesCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnreadMessagesCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnreadMessagesCount: %w", err)
	}
	return oldValue.UnreadMessagesCount, nil
}

// AddUnreadMessagesCount adds i to the "unread_messages_count" field.
func (m *RoomMemberMutation) AddUnreadMessagesCount(i int) {
	if m.addunread_messages_count != nil {
		*m.addunread_messages_count += i
	} else {
		m.addunread_messages_count = &i
	}
}

// AddedUnreadMessagesCount returns the value that was added to the "unread_messages_count" field in this mutation.
func (m *RoomMemberMutation) AddedUnreadMessagesCount() (r int, exists bool) {
	v := m.addunread_messages_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetUnreadMessagesCount resets all changes to the "unread_messages_count" field.
func (m *RoomMemberMutation) ResetUnreadMessagesCount() {
	m.unread_messages_count = nil
	m.addunread_messages_count = nil
}

// SetUserID sets the "user_id" field.
func (m *RoomMemberMutation) SetUserID(pu pulid.ID) {
	m.user = &pu
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *RoomMemberMutation) UserID() (r pulid.ID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the RoomMember entity.
// If the RoomMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMemberMutation) OldUserID(ctx context.Context) (v pulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *RoomMemberMutation) ResetUserID() {
	m.user = nil
}

// SetRoomID sets the "room_id" field.
func (m *RoomMemberMutation) SetRoomID(pu pulid.ID) {
	m.room = &pu
}

// RoomID returns the value of the "room_id" field in the mutation.
func (m *RoomMemberMutation) RoomID() (r pulid.ID, exists bool) {
	v := m.room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomID returns the old "room_id" field's value of the RoomMember entity.
// If the RoomMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMemberMutation) OldRoomID(ctx context.Context) (v pulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomID: %w", err)
	}
	return oldValue.RoomID, nil
}

// ResetRoomID resets all changes to the "room_id" field.
func (m *RoomMemberMutation) ResetRoomID() {
	m.room = nil
}

// SetJoinedAt sets the "joined_at" field.
func (m *RoomMemberMutation) SetJoinedAt(t time.Time) {
	m.joined_at = &t
}

// JoinedAt returns the value of the "joined_at" field in the mutation.
func (m *RoomMemberMutation) JoinedAt() (r time.Time, exists bool) {
	v := m.joined_at
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinedAt returns the old "joined_at" field's value of the RoomMember entity.
// If the RoomMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoomMemberMutation) OldJoinedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinedAt: %w", err)
	}
	return oldValue.JoinedAt, nil
}

// ResetJoinedAt resets all changes to the "joined_at" field.
func (m *RoomMemberMutation) ResetJoinedAt() {
	m.joined_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *RoomMemberMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[roommember.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RoomMemberMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RoomMemberMutation) UserIDs() (ids []pulid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RoomMemberMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *RoomMemberMutation) ClearRoom() {
	m.clearedroom = true
	m.clearedFields[roommember.FieldRoomID] = struct{}{}
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *RoomMemberMutation) RoomCleared() bool {
	return m.clearedroom
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *RoomMemberMutation) RoomIDs() (ids []pulid.ID) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *RoomMemberMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Where appends a list predicates to the RoomMemberMutation builder.
func (m *RoomMemberMutation) Where(ps ...predicate.RoomMember) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoomMemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoomMemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RoomMember, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoomMemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoomMemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RoomMember).
func (m *RoomMemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoomMemberMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.deleted_at != nil {
		fields = append(fields, roommember.FieldDeletedAt)
	}
	if m.unread_messages_count != nil {
		fields = append(fields, roommember.FieldUnreadMessagesCount)
	}
	if m.user != nil {
		fields = append(fields, roommember.FieldUserID)
	}
	if m.room != nil {
		fields = append(fields, roommember.FieldRoomID)
	}
	if m.joined_at != nil {
		fields = append(fields, roommember.FieldJoinedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoomMemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roommember.FieldDeletedAt:
		return m.DeletedAt()
	case roommember.FieldUnreadMessagesCount:
		return m.UnreadMessagesCount()
	case roommember.FieldUserID:
		return m.UserID()
	case roommember.FieldRoomID:
		return m.RoomID()
	case roommember.FieldJoinedAt:
		return m.JoinedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoomMemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roommember.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case roommember.FieldUnreadMessagesCount:
		return m.OldUnreadMessagesCount(ctx)
	case roommember.FieldUserID:
		return m.OldUserID(ctx)
	case roommember.FieldRoomID:
		return m.OldRoomID(ctx)
	case roommember.FieldJoinedAt:
		return m.OldJoinedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RoomMember field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roommember.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case roommember.FieldUnreadMessagesCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnreadMessagesCount(v)
		return nil
	case roommember.FieldUserID:
		v, ok := value.(pulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case roommember.FieldRoomID:
		v, ok := value.(pulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomID(v)
		return nil
	case roommember.FieldJoinedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RoomMember field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoomMemberMutation) AddedFields() []string {
	var fields []string
	if m.addunread_messages_count != nil {
		fields = append(fields, roommember.FieldUnreadMessagesCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoomMemberMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roommember.FieldUnreadMessagesCount:
		return m.AddedUnreadMessagesCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoomMemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roommember.FieldUnreadMessagesCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUnreadMessagesCount(v)
		return nil
	}
	return fmt.Errorf("unknown RoomMember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoomMemberMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(roommember.FieldDeletedAt) {
		fields = append(fields, roommember.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoomMemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMemberMutation) ClearField(name string) error {
	switch name {
	case roommember.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown RoomMember nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoomMemberMutation) ResetField(name string) error {
	switch name {
	case roommember.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case roommember.FieldUnreadMessagesCount:
		m.ResetUnreadMessagesCount()
		return nil
	case roommember.FieldUserID:
		m.ResetUserID()
		return nil
	case roommember.FieldRoomID:
		m.ResetRoomID()
		return nil
	case roommember.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	}
	return fmt.Errorf("unknown RoomMember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoomMemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, roommember.EdgeUser)
	}
	if m.room != nil {
		edges = append(edges, roommember.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoomMemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roommember.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case roommember.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoomMemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoomMemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoomMemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, roommember.EdgeUser)
	}
	if m.clearedroom {
		edges = append(edges, roommember.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoomMemberMutation) EdgeCleared(name string) bool {
	switch name {
	case roommember.EdgeUser:
		return m.cleareduser
	case roommember.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoomMemberMutation) ClearEdge(name string) error {
	switch name {
	case roommember.EdgeUser:
		m.ClearUser()
		return nil
	case roommember.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomMember unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoomMemberMutation) ResetEdge(name string) error {
	switch name {
	case roommember.EdgeUser:
		m.ResetUser()
		return nil
	case roommember.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomMember edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *pulid.ID
	first_name           *string
	last_name            *string
	nickname             *string
	email                *string
	contact_pin          *string
	password             *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	contacts             map[pulid.ID]struct{}
	removedcontacts      map[pulid.ID]struct{}
	clearedcontacts      bool
	rooms                map[pulid.ID]struct{}
	removedrooms         map[pulid.ID]struct{}
	clearedrooms         bool
	messages             map[pulid.ID]struct{}
	removedmessages      map[pulid.ID]struct{}
	clearedmessages      bool
	user_contacts        map[pulid.ID]struct{}
	removeduser_contacts map[pulid.ID]struct{}
	cleareduser_contacts bool
	memberships          map[pulid.ID]struct{}
	removedmemberships   map[pulid.ID]struct{}
	clearedmemberships   bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id pulid.ID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetNickname sets the "nickname" field.
func (m *UserMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *UserMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *UserMutation) ResetNickname() {
	m.nickname = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetContactPin sets the "contact_pin" field.
func (m *UserMutation) SetContactPin(s string) {
	m.contact_pin = &s
}

// ContactPin returns the value of the "contact_pin" field in the mutation.
func (m *UserMutation) ContactPin() (r string, exists bool) {
	v := m.contact_pin
	if v == nil {
		return
	}
	return *v, true
}

// OldContactPin returns the old "contact_pin" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldContactPin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactPin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactPin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactPin: %w", err)
	}
	return oldValue.ContactPin, nil
}

// ClearContactPin clears the value of the "contact_pin" field.
func (m *UserMutation) ClearContactPin() {
	m.contact_pin = nil
	m.clearedFields[user.FieldContactPin] = struct{}{}
}

// ContactPinCleared returns if the "contact_pin" field was cleared in this mutation.
func (m *UserMutation) ContactPinCleared() bool {
	_, ok := m.clearedFields[user.FieldContactPin]
	return ok
}

// ResetContactPin resets all changes to the "contact_pin" field.
func (m *UserMutation) ResetContactPin() {
	m.contact_pin = nil
	delete(m.clearedFields, user.FieldContactPin)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddContactIDs adds the "contacts" edge to the User entity by ids.
func (m *UserMutation) AddContactIDs(ids ...pulid.ID) {
	if m.contacts == nil {
		m.contacts = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.contacts[ids[i]] = struct{}{}
	}
}

// ClearContacts clears the "contacts" edge to the User entity.
func (m *UserMutation) ClearContacts() {
	m.clearedcontacts = true
}

// ContactsCleared reports if the "contacts" edge to the User entity was cleared.
func (m *UserMutation) ContactsCleared() bool {
	return m.clearedcontacts
}

// RemoveContactIDs removes the "contacts" edge to the User entity by IDs.
func (m *UserMutation) RemoveContactIDs(ids ...pulid.ID) {
	if m.removedcontacts == nil {
		m.removedcontacts = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.contacts, ids[i])
		m.removedcontacts[ids[i]] = struct{}{}
	}
}

// RemovedContacts returns the removed IDs of the "contacts" edge to the User entity.
func (m *UserMutation) RemovedContactsIDs() (ids []pulid.ID) {
	for id := range m.removedcontacts {
		ids = append(ids, id)
	}
	return
}

// ContactsIDs returns the "contacts" edge IDs in the mutation.
func (m *UserMutation) ContactsIDs() (ids []pulid.ID) {
	for id := range m.contacts {
		ids = append(ids, id)
	}
	return
}

// ResetContacts resets all changes to the "contacts" edge.
func (m *UserMutation) ResetContacts() {
	m.contacts = nil
	m.clearedcontacts = false
	m.removedcontacts = nil
}

// AddRoomIDs adds the "rooms" edge to the Room entity by ids.
func (m *UserMutation) AddRoomIDs(ids ...pulid.ID) {
	if m.rooms == nil {
		m.rooms = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.rooms[ids[i]] = struct{}{}
	}
}

// ClearRooms clears the "rooms" edge to the Room entity.
func (m *UserMutation) ClearRooms() {
	m.clearedrooms = true
}

// RoomsCleared reports if the "rooms" edge to the Room entity was cleared.
func (m *UserMutation) RoomsCleared() bool {
	return m.clearedrooms
}

// RemoveRoomIDs removes the "rooms" edge to the Room entity by IDs.
func (m *UserMutation) RemoveRoomIDs(ids ...pulid.ID) {
	if m.removedrooms == nil {
		m.removedrooms = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.rooms, ids[i])
		m.removedrooms[ids[i]] = struct{}{}
	}
}

// RemovedRooms returns the removed IDs of the "rooms" edge to the Room entity.
func (m *UserMutation) RemovedRoomsIDs() (ids []pulid.ID) {
	for id := range m.removedrooms {
		ids = append(ids, id)
	}
	return
}

// RoomsIDs returns the "rooms" edge IDs in the mutation.
func (m *UserMutation) RoomsIDs() (ids []pulid.ID) {
	for id := range m.rooms {
		ids = append(ids, id)
	}
	return
}

// ResetRooms resets all changes to the "rooms" edge.
func (m *UserMutation) ResetRooms() {
	m.rooms = nil
	m.clearedrooms = false
	m.removedrooms = nil
}

// AddMessageIDs adds the "messages" edge to the Message entity by ids.
func (m *UserMutation) AddMessageIDs(ids ...pulid.ID) {
	if m.messages == nil {
		m.messages = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.messages[ids[i]] = struct{}{}
	}
}

// ClearMessages clears the "messages" edge to the Message entity.
func (m *UserMutation) ClearMessages() {
	m.clearedmessages = true
}

// MessagesCleared reports if the "messages" edge to the Message entity was cleared.
func (m *UserMutation) MessagesCleared() bool {
	return m.clearedmessages
}

// RemoveMessageIDs removes the "messages" edge to the Message entity by IDs.
func (m *UserMutation) RemoveMessageIDs(ids ...pulid.ID) {
	if m.removedmessages == nil {
		m.removedmessages = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.messages, ids[i])
		m.removedmessages[ids[i]] = struct{}{}
	}
}

// RemovedMessages returns the removed IDs of the "messages" edge to the Message entity.
func (m *UserMutation) RemovedMessagesIDs() (ids []pulid.ID) {
	for id := range m.removedmessages {
		ids = append(ids, id)
	}
	return
}

// MessagesIDs returns the "messages" edge IDs in the mutation.
func (m *UserMutation) MessagesIDs() (ids []pulid.ID) {
	for id := range m.messages {
		ids = append(ids, id)
	}
	return
}

// ResetMessages resets all changes to the "messages" edge.
func (m *UserMutation) ResetMessages() {
	m.messages = nil
	m.clearedmessages = false
	m.removedmessages = nil
}

// AddUserContactIDs adds the "user_contacts" edge to the UserContact entity by ids.
func (m *UserMutation) AddUserContactIDs(ids ...pulid.ID) {
	if m.user_contacts == nil {
		m.user_contacts = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.user_contacts[ids[i]] = struct{}{}
	}
}

// ClearUserContacts clears the "user_contacts" edge to the UserContact entity.
func (m *UserMutation) ClearUserContacts() {
	m.cleareduser_contacts = true
}

// UserContactsCleared reports if the "user_contacts" edge to the UserContact entity was cleared.
func (m *UserMutation) UserContactsCleared() bool {
	return m.cleareduser_contacts
}

// RemoveUserContactIDs removes the "user_contacts" edge to the UserContact entity by IDs.
func (m *UserMutation) RemoveUserContactIDs(ids ...pulid.ID) {
	if m.removeduser_contacts == nil {
		m.removeduser_contacts = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.user_contacts, ids[i])
		m.removeduser_contacts[ids[i]] = struct{}{}
	}
}

// RemovedUserContacts returns the removed IDs of the "user_contacts" edge to the UserContact entity.
func (m *UserMutation) RemovedUserContactsIDs() (ids []pulid.ID) {
	for id := range m.removeduser_contacts {
		ids = append(ids, id)
	}
	return
}

// UserContactsIDs returns the "user_contacts" edge IDs in the mutation.
func (m *UserMutation) UserContactsIDs() (ids []pulid.ID) {
	for id := range m.user_contacts {
		ids = append(ids, id)
	}
	return
}

// ResetUserContacts resets all changes to the "user_contacts" edge.
func (m *UserMutation) ResetUserContacts() {
	m.user_contacts = nil
	m.cleareduser_contacts = false
	m.removeduser_contacts = nil
}

// AddMembershipIDs adds the "memberships" edge to the RoomMember entity by ids.
func (m *UserMutation) AddMembershipIDs(ids ...pulid.ID) {
	if m.memberships == nil {
		m.memberships = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		m.memberships[ids[i]] = struct{}{}
	}
}

// ClearMemberships clears the "memberships" edge to the RoomMember entity.
func (m *UserMutation) ClearMemberships() {
	m.clearedmemberships = true
}

// MembershipsCleared reports if the "memberships" edge to the RoomMember entity was cleared.
func (m *UserMutation) MembershipsCleared() bool {
	return m.clearedmemberships
}

// RemoveMembershipIDs removes the "memberships" edge to the RoomMember entity by IDs.
func (m *UserMutation) RemoveMembershipIDs(ids ...pulid.ID) {
	if m.removedmemberships == nil {
		m.removedmemberships = make(map[pulid.ID]struct{})
	}
	for i := range ids {
		delete(m.memberships, ids[i])
		m.removedmemberships[ids[i]] = struct{}{}
	}
}

// RemovedMemberships returns the removed IDs of the "memberships" edge to the RoomMember entity.
func (m *UserMutation) RemovedMembershipsIDs() (ids []pulid.ID) {
	for id := range m.removedmemberships {
		ids = append(ids, id)
	}
	return
}

// MembershipsIDs returns the "memberships" edge IDs in the mutation.
func (m *UserMutation) MembershipsIDs() (ids []pulid.ID) {
	for id := range m.memberships {
		ids = append(ids, id)
	}
	return
}

// ResetMemberships resets all changes to the "memberships" edge.
func (m *UserMutation) ResetMemberships() {
	m.memberships = nil
	m.clearedmemberships = false
	m.removedmemberships = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.nickname != nil {
		fields = append(fields, user.FieldNickname)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.contact_pin != nil {
		fields = append(fields, user.FieldContactPin)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldNickname:
		return m.Nickname()
	case user.FieldEmail:
		return m.Email()
	case user.FieldContactPin:
		return m.ContactPin()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldNickname:
		return m.OldNickname(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldContactPin:
		return m.OldContactPin(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldContactPin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactPin(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldContactPin) {
		fields = append(fields, user.FieldContactPin)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldContactPin:
		m.ClearContactPin()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldNickname:
		m.ResetNickname()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldContactPin:
		m.ResetContactPin()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.contacts != nil {
		edges = append(edges, user.EdgeContacts)
	}
	if m.rooms != nil {
		edges = append(edges, user.EdgeRooms)
	}
	if m.messages != nil {
		edges = append(edges, user.EdgeMessages)
	}
	if m.user_contacts != nil {
		edges = append(edges, user.EdgeUserContacts)
	}
	if m.memberships != nil {
		edges = append(edges, user.EdgeMemberships)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeContacts:
		ids := make([]ent.Value, 0, len(m.contacts))
		for id := range m.contacts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRooms:
		ids := make([]ent.Value, 0, len(m.rooms))
		for id := range m.rooms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.messages))
		for id := range m.messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserContacts:
		ids := make([]ent.Value, 0, len(m.user_contacts))
		for id := range m.user_contacts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMemberships:
		ids := make([]ent.Value, 0, len(m.memberships))
		for id := range m.memberships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedcontacts != nil {
		edges = append(edges, user.EdgeContacts)
	}
	if m.removedrooms != nil {
		edges = append(edges, user.EdgeRooms)
	}
	if m.removedmessages != nil {
		edges = append(edges, user.EdgeMessages)
	}
	if m.removeduser_contacts != nil {
		edges = append(edges, user.EdgeUserContacts)
	}
	if m.removedmemberships != nil {
		edges = append(edges, user.EdgeMemberships)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeContacts:
		ids := make([]ent.Value, 0, len(m.removedcontacts))
		for id := range m.removedcontacts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRooms:
		ids := make([]ent.Value, 0, len(m.removedrooms))
		for id := range m.removedrooms {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMessages:
		ids := make([]ent.Value, 0, len(m.removedmessages))
		for id := range m.removedmessages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserContacts:
		ids := make([]ent.Value, 0, len(m.removeduser_contacts))
		for id := range m.removeduser_contacts {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMemberships:
		ids := make([]ent.Value, 0, len(m.removedmemberships))
		for id := range m.removedmemberships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedcontacts {
		edges = append(edges, user.EdgeContacts)
	}
	if m.clearedrooms {
		edges = append(edges, user.EdgeRooms)
	}
	if m.clearedmessages {
		edges = append(edges, user.EdgeMessages)
	}
	if m.cleareduser_contacts {
		edges = append(edges, user.EdgeUserContacts)
	}
	if m.clearedmemberships {
		edges = append(edges, user.EdgeMemberships)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeContacts:
		return m.clearedcontacts
	case user.EdgeRooms:
		return m.clearedrooms
	case user.EdgeMessages:
		return m.clearedmessages
	case user.EdgeUserContacts:
		return m.cleareduser_contacts
	case user.EdgeMemberships:
		return m.clearedmemberships
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeContacts:
		m.ResetContacts()
		return nil
	case user.EdgeRooms:
		m.ResetRooms()
		return nil
	case user.EdgeMessages:
		m.ResetMessages()
		return nil
	case user.EdgeUserContacts:
		m.ResetUserContacts()
		return nil
	case user.EdgeMemberships:
		m.ResetMemberships()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserContactMutation represents an operation that mutates the UserContact nodes in the graph.
type UserContactMutation struct {
	config
	op             Op
	typ            string
	id             *pulid.ID
	deleted_at     *time.Time
	created_at     *time.Time
	clearedFields  map[string]struct{}
	user           *pulid.ID
	cleareduser    bool
	contact        *pulid.ID
	clearedcontact bool
	room           *pulid.ID
	clearedroom    bool
	done           bool
	oldValue       func(context.Context) (*UserContact, error)
	predicates     []predicate.UserContact
}

var _ ent.Mutation = (*UserContactMutation)(nil)

// usercontactOption allows management of the mutation configuration using functional options.
type usercontactOption func(*UserContactMutation)

// newUserContactMutation creates new mutation for the UserContact entity.
func newUserContactMutation(c config, op Op, opts ...usercontactOption) *UserContactMutation {
	m := &UserContactMutation{
		config:        c,
		op:            op,
		typ:           TypeUserContact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserContactID sets the ID field of the mutation.
func withUserContactID(id pulid.ID) usercontactOption {
	return func(m *UserContactMutation) {
		var (
			err   error
			once  sync.Once
			value *UserContact
		)
		m.oldValue = func(ctx context.Context) (*UserContact, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserContact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserContact sets the old UserContact of the mutation.
func withUserContact(node *UserContact) usercontactOption {
	return func(m *UserContactMutation) {
		m.oldValue = func(context.Context) (*UserContact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserContactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserContactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserContact entities.
func (m *UserContactMutation) SetID(id pulid.ID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserContactMutation) ID() (id pulid.ID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserContactMutation) IDs(ctx context.Context) ([]pulid.ID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []pulid.ID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserContact.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserContactMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserContactMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserContact entity.
// If the UserContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserContactMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserContactMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[usercontact.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserContactMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[usercontact.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserContactMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, usercontact.FieldDeletedAt)
}

// SetUserID sets the "user_id" field.
func (m *UserContactMutation) SetUserID(pu pulid.ID) {
	m.user = &pu
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserContactMutation) UserID() (r pulid.ID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserContact entity.
// If the UserContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserContactMutation) OldUserID(ctx context.Context) (v pulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserContactMutation) ResetUserID() {
	m.user = nil
}

// SetContactID sets the "contact_id" field.
func (m *UserContactMutation) SetContactID(pu pulid.ID) {
	m.contact = &pu
}

// ContactID returns the value of the "contact_id" field in the mutation.
func (m *UserContactMutation) ContactID() (r pulid.ID, exists bool) {
	v := m.contact
	if v == nil {
		return
	}
	return *v, true
}

// OldContactID returns the old "contact_id" field's value of the UserContact entity.
// If the UserContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserContactMutation) OldContactID(ctx context.Context) (v pulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContactID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContactID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContactID: %w", err)
	}
	return oldValue.ContactID, nil
}

// ResetContactID resets all changes to the "contact_id" field.
func (m *UserContactMutation) ResetContactID() {
	m.contact = nil
}

// SetRoomID sets the "room_id" field.
func (m *UserContactMutation) SetRoomID(pu pulid.ID) {
	m.room = &pu
}

// RoomID returns the value of the "room_id" field in the mutation.
func (m *UserContactMutation) RoomID() (r pulid.ID, exists bool) {
	v := m.room
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomID returns the old "room_id" field's value of the UserContact entity.
// If the UserContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserContactMutation) OldRoomID(ctx context.Context) (v pulid.ID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoomID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoomID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomID: %w", err)
	}
	return oldValue.RoomID, nil
}

// ClearRoomID clears the value of the "room_id" field.
func (m *UserContactMutation) ClearRoomID() {
	m.room = nil
	m.clearedFields[usercontact.FieldRoomID] = struct{}{}
}

// RoomIDCleared returns if the "room_id" field was cleared in this mutation.
func (m *UserContactMutation) RoomIDCleared() bool {
	_, ok := m.clearedFields[usercontact.FieldRoomID]
	return ok
}

// ResetRoomID resets all changes to the "room_id" field.
func (m *UserContactMutation) ResetRoomID() {
	m.room = nil
	delete(m.clearedFields, usercontact.FieldRoomID)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserContactMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserContactMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserContact entity.
// If the UserContact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserContactMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserContactMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserContactMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[usercontact.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserContactMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserContactMutation) UserIDs() (ids []pulid.ID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserContactMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearContact clears the "contact" edge to the User entity.
func (m *UserContactMutation) ClearContact() {
	m.clearedcontact = true
	m.clearedFields[usercontact.FieldContactID] = struct{}{}
}

// ContactCleared reports if the "contact" edge to the User entity was cleared.
func (m *UserContactMutation) ContactCleared() bool {
	return m.clearedcontact
}

// ContactIDs returns the "contact" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ContactID instead. It exists only for internal usage by the builders.
func (m *UserContactMutation) ContactIDs() (ids []pulid.ID) {
	if id := m.contact; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContact resets all changes to the "contact" edge.
func (m *UserContactMutation) ResetContact() {
	m.contact = nil
	m.clearedcontact = false
}

// ClearRoom clears the "room" edge to the Room entity.
func (m *UserContactMutation) ClearRoom() {
	m.clearedroom = true
	m.clearedFields[usercontact.FieldRoomID] = struct{}{}
}

// RoomCleared reports if the "room" edge to the Room entity was cleared.
func (m *UserContactMutation) RoomCleared() bool {
	return m.RoomIDCleared() || m.clearedroom
}

// RoomIDs returns the "room" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoomID instead. It exists only for internal usage by the builders.
func (m *UserContactMutation) RoomIDs() (ids []pulid.ID) {
	if id := m.room; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoom resets all changes to the "room" edge.
func (m *UserContactMutation) ResetRoom() {
	m.room = nil
	m.clearedroom = false
}

// Where appends a list predicates to the UserContactMutation builder.
func (m *UserContactMutation) Where(ps ...predicate.UserContact) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserContactMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserContactMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserContact, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserContactMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserContactMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserContact).
func (m *UserContactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserContactMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.deleted_at != nil {
		fields = append(fields, usercontact.FieldDeletedAt)
	}
	if m.user != nil {
		fields = append(fields, usercontact.FieldUserID)
	}
	if m.contact != nil {
		fields = append(fields, usercontact.FieldContactID)
	}
	if m.room != nil {
		fields = append(fields, usercontact.FieldRoomID)
	}
	if m.created_at != nil {
		fields = append(fields, usercontact.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserContactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usercontact.FieldDeletedAt:
		return m.DeletedAt()
	case usercontact.FieldUserID:
		return m.UserID()
	case usercontact.FieldContactID:
		return m.ContactID()
	case usercontact.FieldRoomID:
		return m.RoomID()
	case usercontact.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserContactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usercontact.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case usercontact.FieldUserID:
		return m.OldUserID(ctx)
	case usercontact.FieldContactID:
		return m.OldContactID(ctx)
	case usercontact.FieldRoomID:
		return m.OldRoomID(ctx)
	case usercontact.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserContact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserContactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usercontact.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case usercontact.FieldUserID:
		v, ok := value.(pulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usercontact.FieldContactID:
		v, ok := value.(pulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContactID(v)
		return nil
	case usercontact.FieldRoomID:
		v, ok := value.(pulid.ID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomID(v)
		return nil
	case usercontact.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserContact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserContactMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserContactMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserContactMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserContact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserContactMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usercontact.FieldDeletedAt) {
		fields = append(fields, usercontact.FieldDeletedAt)
	}
	if m.FieldCleared(usercontact.FieldRoomID) {
		fields = append(fields, usercontact.FieldRoomID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserContactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserContactMutation) ClearField(name string) error {
	switch name {
	case usercontact.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case usercontact.FieldRoomID:
		m.ClearRoomID()
		return nil
	}
	return fmt.Errorf("unknown UserContact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserContactMutation) ResetField(name string) error {
	switch name {
	case usercontact.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case usercontact.FieldUserID:
		m.ResetUserID()
		return nil
	case usercontact.FieldContactID:
		m.ResetContactID()
		return nil
	case usercontact.FieldRoomID:
		m.ResetRoomID()
		return nil
	case usercontact.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown UserContact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserContactMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, usercontact.EdgeUser)
	}
	if m.contact != nil {
		edges = append(edges, usercontact.EdgeContact)
	}
	if m.room != nil {
		edges = append(edges, usercontact.EdgeRoom)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserContactMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usercontact.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case usercontact.EdgeContact:
		if id := m.contact; id != nil {
			return []ent.Value{*id}
		}
	case usercontact.EdgeRoom:
		if id := m.room; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserContactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserContactMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserContactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, usercontact.EdgeUser)
	}
	if m.clearedcontact {
		edges = append(edges, usercontact.EdgeContact)
	}
	if m.clearedroom {
		edges = append(edges, usercontact.EdgeRoom)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserContactMutation) EdgeCleared(name string) bool {
	switch name {
	case usercontact.EdgeUser:
		return m.cleareduser
	case usercontact.EdgeContact:
		return m.clearedcontact
	case usercontact.EdgeRoom:
		return m.clearedroom
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserContactMutation) ClearEdge(name string) error {
	switch name {
	case usercontact.EdgeUser:
		m.ClearUser()
		return nil
	case usercontact.EdgeContact:
		m.ClearContact()
		return nil
	case usercontact.EdgeRoom:
		m.ClearRoom()
		return nil
	}
	return fmt.Errorf("unknown UserContact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserContactMutation) ResetEdge(name string) error {
	switch name {
	case usercontact.EdgeUser:
		m.ResetUser()
		return nil
	case usercontact.EdgeContact:
		m.ResetContact()
		return nil
	case usercontact.EdgeRoom:
		m.ResetRoom()
		return nil
	}
	return fmt.Errorf("unknown UserContact edge %s", name)
}
