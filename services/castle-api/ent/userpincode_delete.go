// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"journeyhub/ent/predicate"
	"journeyhub/ent/userpincode"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPinCodeDelete is the builder for deleting a UserPinCode entity.
type UserPinCodeDelete struct {
	config
	hooks    []Hook
	mutation *UserPinCodeMutation
}

// Where appends a list predicates to the UserPinCodeDelete builder.
func (upcd *UserPinCodeDelete) Where(ps ...predicate.UserPinCode) *UserPinCodeDelete {
	upcd.mutation.Where(ps...)
	return upcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (upcd *UserPinCodeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, upcd.sqlExec, upcd.mutation, upcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (upcd *UserPinCodeDelete) ExecX(ctx context.Context) int {
	n, err := upcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (upcd *UserPinCodeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(userpincode.Table, sqlgraph.NewFieldSpec(userpincode.FieldID, field.TypeString))
	if ps := upcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, upcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	upcd.mutation.done = true
	return affected, err
}

// UserPinCodeDeleteOne is the builder for deleting a single UserPinCode entity.
type UserPinCodeDeleteOne struct {
	upcd *UserPinCodeDelete
}

// Where appends a list predicates to the UserPinCodeDelete builder.
func (upcdo *UserPinCodeDeleteOne) Where(ps ...predicate.UserPinCode) *UserPinCodeDeleteOne {
	upcdo.upcd.mutation.Where(ps...)
	return upcdo
}

// Exec executes the deletion query.
func (upcdo *UserPinCodeDeleteOne) Exec(ctx context.Context) error {
	n, err := upcdo.upcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{userpincode.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (upcdo *UserPinCodeDeleteOne) ExecX(ctx context.Context) {
	if err := upcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
