// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserContactQuery is the builder for querying UserContact entities.
type UserContactQuery struct {
	config
	ctx         *QueryContext
	order       []usercontact.OrderOption
	inters      []Interceptor
	predicates  []predicate.UserContact
	withUser    *UserQuery
	withContact *UserQuery
	withRoom    *RoomQuery
	modifiers   []func(*sql.Selector)
	loadTotal   []func(context.Context, []*UserContact) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserContactQuery builder.
func (ucq *UserContactQuery) Where(ps ...predicate.UserContact) *UserContactQuery {
	ucq.predicates = append(ucq.predicates, ps...)
	return ucq
}

// Limit the number of records to be returned by this query.
func (ucq *UserContactQuery) Limit(limit int) *UserContactQuery {
	ucq.ctx.Limit = &limit
	return ucq
}

// Offset to start from.
func (ucq *UserContactQuery) Offset(offset int) *UserContactQuery {
	ucq.ctx.Offset = &offset
	return ucq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucq *UserContactQuery) Unique(unique bool) *UserContactQuery {
	ucq.ctx.Unique = &unique
	return ucq
}

// Order specifies how the records should be ordered.
func (ucq *UserContactQuery) Order(o ...usercontact.OrderOption) *UserContactQuery {
	ucq.order = append(ucq.order, o...)
	return ucq
}

// QueryUser chains the current query on the "user" edge.
func (ucq *UserContactQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ucq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercontact.Table, usercontact.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercontact.UserTable, usercontact.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContact chains the current query on the "contact" edge.
func (ucq *UserContactQuery) QueryContact() *UserQuery {
	query := (&UserClient{config: ucq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercontact.Table, usercontact.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercontact.ContactTable, usercontact.ContactColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoom chains the current query on the "room" edge.
func (ucq *UserContactQuery) QueryRoom() *RoomQuery {
	query := (&RoomClient{config: ucq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercontact.Table, usercontact.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercontact.RoomTable, usercontact.RoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserContact entity from the query.
// Returns a *NotFoundError when no UserContact was found.
func (ucq *UserContactQuery) First(ctx context.Context) (*UserContact, error) {
	nodes, err := ucq.Limit(1).All(setContextOp(ctx, ucq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercontact.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucq *UserContactQuery) FirstX(ctx context.Context) *UserContact {
	node, err := ucq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserContact ID from the query.
// Returns a *NotFoundError when no UserContact ID was found.
func (ucq *UserContactQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = ucq.Limit(1).IDs(setContextOp(ctx, ucq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usercontact.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ucq *UserContactQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := ucq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserContact entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserContact entity is found.
// Returns a *NotFoundError when no UserContact entities are found.
func (ucq *UserContactQuery) Only(ctx context.Context) (*UserContact, error) {
	nodes, err := ucq.Limit(2).All(setContextOp(ctx, ucq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercontact.Label}
	default:
		return nil, &NotSingularError{usercontact.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucq *UserContactQuery) OnlyX(ctx context.Context) *UserContact {
	node, err := ucq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserContact ID in the query.
// Returns a *NotSingularError when more than one UserContact ID is found.
// Returns a *NotFoundError when no entities are found.
func (ucq *UserContactQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = ucq.Limit(2).IDs(setContextOp(ctx, ucq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usercontact.Label}
	default:
		err = &NotSingularError{usercontact.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ucq *UserContactQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := ucq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserContacts.
func (ucq *UserContactQuery) All(ctx context.Context) ([]*UserContact, error) {
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryAll)
	if err := ucq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserContact, *UserContactQuery]()
	return withInterceptors[[]*UserContact](ctx, ucq, qr, ucq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ucq *UserContactQuery) AllX(ctx context.Context) []*UserContact {
	nodes, err := ucq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserContact IDs.
func (ucq *UserContactQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if ucq.ctx.Unique == nil && ucq.path != nil {
		ucq.Unique(true)
	}
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryIDs)
	if err = ucq.Select(usercontact.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ucq *UserContactQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := ucq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ucq *UserContactQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryCount)
	if err := ucq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ucq, querierCount[*UserContactQuery](), ucq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ucq *UserContactQuery) CountX(ctx context.Context) int {
	count, err := ucq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucq *UserContactQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ucq.ctx, ent.OpQueryExist)
	switch _, err := ucq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ucq *UserContactQuery) ExistX(ctx context.Context) bool {
	exist, err := ucq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserContactQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucq *UserContactQuery) Clone() *UserContactQuery {
	if ucq == nil {
		return nil
	}
	return &UserContactQuery{
		config:      ucq.config,
		ctx:         ucq.ctx.Clone(),
		order:       append([]usercontact.OrderOption{}, ucq.order...),
		inters:      append([]Interceptor{}, ucq.inters...),
		predicates:  append([]predicate.UserContact{}, ucq.predicates...),
		withUser:    ucq.withUser.Clone(),
		withContact: ucq.withContact.Clone(),
		withRoom:    ucq.withRoom.Clone(),
		// clone intermediate query.
		sql:  ucq.sql.Clone(),
		path: ucq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucq *UserContactQuery) WithUser(opts ...func(*UserQuery)) *UserContactQuery {
	query := (&UserClient{config: ucq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucq.withUser = query
	return ucq
}

// WithContact tells the query-builder to eager-load the nodes that are connected to
// the "contact" edge. The optional arguments are used to configure the query builder of the edge.
func (ucq *UserContactQuery) WithContact(opts ...func(*UserQuery)) *UserContactQuery {
	query := (&UserClient{config: ucq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucq.withContact = query
	return ucq
}

// WithRoom tells the query-builder to eager-load the nodes that are connected to
// the "room" edge. The optional arguments are used to configure the query builder of the edge.
func (ucq *UserContactQuery) WithRoom(opts ...func(*RoomQuery)) *UserContactQuery {
	query := (&RoomClient{config: ucq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucq.withRoom = query
	return ucq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserContact.Query().
//		GroupBy(usercontact.FieldDeletedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ucq *UserContactQuery) GroupBy(field string, fields ...string) *UserContactGroupBy {
	ucq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserContactGroupBy{build: ucq}
	grbuild.flds = &ucq.ctx.Fields
	grbuild.label = usercontact.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		DeletedAt time.Time `json:"deleted_at,omitempty"`
//	}
//
//	client.UserContact.Query().
//		Select(usercontact.FieldDeletedAt).
//		Scan(ctx, &v)
func (ucq *UserContactQuery) Select(fields ...string) *UserContactSelect {
	ucq.ctx.Fields = append(ucq.ctx.Fields, fields...)
	sbuild := &UserContactSelect{UserContactQuery: ucq}
	sbuild.label = usercontact.Label
	sbuild.flds, sbuild.scan = &ucq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserContactSelect configured with the given aggregations.
func (ucq *UserContactQuery) Aggregate(fns ...AggregateFunc) *UserContactSelect {
	return ucq.Select().Aggregate(fns...)
}

func (ucq *UserContactQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ucq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ucq); err != nil {
				return err
			}
		}
	}
	for _, f := range ucq.ctx.Fields {
		if !usercontact.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucq.path != nil {
		prev, err := ucq.path(ctx)
		if err != nil {
			return err
		}
		ucq.sql = prev
	}
	return nil
}

func (ucq *UserContactQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserContact, error) {
	var (
		nodes       = []*UserContact{}
		_spec       = ucq.querySpec()
		loadedTypes = [3]bool{
			ucq.withUser != nil,
			ucq.withContact != nil,
			ucq.withRoom != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserContact).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserContact{config: ucq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ucq.modifiers) > 0 {
		_spec.Modifiers = ucq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ucq.withUser; query != nil {
		if err := ucq.loadUser(ctx, query, nodes, nil,
			func(n *UserContact, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ucq.withContact; query != nil {
		if err := ucq.loadContact(ctx, query, nodes, nil,
			func(n *UserContact, e *User) { n.Edges.Contact = e }); err != nil {
			return nil, err
		}
	}
	if query := ucq.withRoom; query != nil {
		if err := ucq.loadRoom(ctx, query, nodes, nil,
			func(n *UserContact, e *Room) { n.Edges.Room = e }); err != nil {
			return nil, err
		}
	}
	for i := range ucq.loadTotal {
		if err := ucq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ucq *UserContactQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserContact, init func(*UserContact), assign func(*UserContact, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*UserContact)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ucq *UserContactQuery) loadContact(ctx context.Context, query *UserQuery, nodes []*UserContact, init func(*UserContact), assign func(*UserContact, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*UserContact)
	for i := range nodes {
		fk := nodes[i].ContactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ucq *UserContactQuery) loadRoom(ctx context.Context, query *RoomQuery, nodes []*UserContact, init func(*UserContact), assign func(*UserContact, *Room)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*UserContact)
	for i := range nodes {
		fk := nodes[i].RoomID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(room.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "room_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ucq *UserContactQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucq.querySpec()
	if len(ucq.modifiers) > 0 {
		_spec.Modifiers = ucq.modifiers
	}
	_spec.Node.Columns = ucq.ctx.Fields
	if len(ucq.ctx.Fields) > 0 {
		_spec.Unique = ucq.ctx.Unique != nil && *ucq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ucq.driver, _spec)
}

func (ucq *UserContactQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usercontact.Table, usercontact.Columns, sqlgraph.NewFieldSpec(usercontact.FieldID, field.TypeString))
	_spec.From = ucq.sql
	if unique := ucq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ucq.path != nil {
		_spec.Unique = true
	}
	if fields := ucq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usercontact.FieldID)
		for i := range fields {
			if fields[i] != usercontact.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if ucq.withUser != nil {
			_spec.Node.AddColumnOnce(usercontact.FieldUserID)
		}
		if ucq.withContact != nil {
			_spec.Node.AddColumnOnce(usercontact.FieldContactID)
		}
		if ucq.withRoom != nil {
			_spec.Node.AddColumnOnce(usercontact.FieldRoomID)
		}
	}
	if ps := ucq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucq *UserContactQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucq.driver.Dialect())
	t1 := builder.Table(usercontact.Table)
	columns := ucq.ctx.Fields
	if len(columns) == 0 {
		columns = usercontact.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucq.sql != nil {
		selector = ucq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucq.ctx.Unique != nil && *ucq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ucq.predicates {
		p(selector)
	}
	for _, p := range ucq.order {
		p(selector)
	}
	if offset := ucq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserContactGroupBy is the group-by builder for UserContact entities.
type UserContactGroupBy struct {
	selector
	build *UserContactQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucgb *UserContactGroupBy) Aggregate(fns ...AggregateFunc) *UserContactGroupBy {
	ucgb.fns = append(ucgb.fns, fns...)
	return ucgb
}

// Scan applies the selector query and scans the result into the given value.
func (ucgb *UserContactGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucgb.build.ctx, ent.OpQueryGroupBy)
	if err := ucgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserContactQuery, *UserContactGroupBy](ctx, ucgb.build, ucgb, ucgb.build.inters, v)
}

func (ucgb *UserContactGroupBy) sqlScan(ctx context.Context, root *UserContactQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ucgb.fns))
	for _, fn := range ucgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ucgb.flds)+len(ucgb.fns))
		for _, f := range *ucgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ucgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserContactSelect is the builder for selecting fields of UserContact entities.
type UserContactSelect struct {
	*UserContactQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ucs *UserContactSelect) Aggregate(fns ...AggregateFunc) *UserContactSelect {
	ucs.fns = append(ucs.fns, fns...)
	return ucs
}

// Scan applies the selector query and scans the result into the given value.
func (ucs *UserContactSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucs.ctx, ent.OpQuerySelect)
	if err := ucs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserContactQuery, *UserContactSelect](ctx, ucs.UserContactQuery, ucs, ucs.inters, v)
}

func (ucs *UserContactSelect) sqlScan(ctx context.Context, root *UserContactQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ucs.fns))
	for _, fn := range ucs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ucs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
