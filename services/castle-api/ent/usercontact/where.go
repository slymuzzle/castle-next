// Code generated by ent, DO NOT EDIT.

package usercontact

import (
	"journeyhub/ent/predicate"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldUserID, v))
}

// ContactID applies equality check predicate on the "contact_id" field. It's identical to ContactIDEQ.
func ContactID(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldContactID, v))
}

// RoomID applies equality check predicate on the "room_id" field. It's identical to RoomIDEQ.
func RoomID(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldRoomID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldCreatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldContains(FieldUserID, vc))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldHasPrefix(FieldUserID, vc))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldHasSuffix(FieldUserID, vc))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldEqualFold(FieldUserID, vc))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldContainsFold(FieldUserID, vc))
}

// ContactIDEQ applies the EQ predicate on the "contact_id" field.
func ContactIDEQ(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldContactID, v))
}

// ContactIDNEQ applies the NEQ predicate on the "contact_id" field.
func ContactIDNEQ(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNEQ(FieldContactID, v))
}

// ContactIDIn applies the In predicate on the "contact_id" field.
func ContactIDIn(vs ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldIn(FieldContactID, vs...))
}

// ContactIDNotIn applies the NotIn predicate on the "contact_id" field.
func ContactIDNotIn(vs ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNotIn(FieldContactID, vs...))
}

// ContactIDGT applies the GT predicate on the "contact_id" field.
func ContactIDGT(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGT(FieldContactID, v))
}

// ContactIDGTE applies the GTE predicate on the "contact_id" field.
func ContactIDGTE(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGTE(FieldContactID, v))
}

// ContactIDLT applies the LT predicate on the "contact_id" field.
func ContactIDLT(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLT(FieldContactID, v))
}

// ContactIDLTE applies the LTE predicate on the "contact_id" field.
func ContactIDLTE(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLTE(FieldContactID, v))
}

// ContactIDContains applies the Contains predicate on the "contact_id" field.
func ContactIDContains(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldContains(FieldContactID, vc))
}

// ContactIDHasPrefix applies the HasPrefix predicate on the "contact_id" field.
func ContactIDHasPrefix(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldHasPrefix(FieldContactID, vc))
}

// ContactIDHasSuffix applies the HasSuffix predicate on the "contact_id" field.
func ContactIDHasSuffix(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldHasSuffix(FieldContactID, vc))
}

// ContactIDEqualFold applies the EqualFold predicate on the "contact_id" field.
func ContactIDEqualFold(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldEqualFold(FieldContactID, vc))
}

// ContactIDContainsFold applies the ContainsFold predicate on the "contact_id" field.
func ContactIDContainsFold(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldContainsFold(FieldContactID, vc))
}

// RoomIDEQ applies the EQ predicate on the "room_id" field.
func RoomIDEQ(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldRoomID, v))
}

// RoomIDNEQ applies the NEQ predicate on the "room_id" field.
func RoomIDNEQ(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNEQ(FieldRoomID, v))
}

// RoomIDIn applies the In predicate on the "room_id" field.
func RoomIDIn(vs ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldIn(FieldRoomID, vs...))
}

// RoomIDNotIn applies the NotIn predicate on the "room_id" field.
func RoomIDNotIn(vs ...pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldNotIn(FieldRoomID, vs...))
}

// RoomIDGT applies the GT predicate on the "room_id" field.
func RoomIDGT(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGT(FieldRoomID, v))
}

// RoomIDGTE applies the GTE predicate on the "room_id" field.
func RoomIDGTE(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldGTE(FieldRoomID, v))
}

// RoomIDLT applies the LT predicate on the "room_id" field.
func RoomIDLT(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLT(FieldRoomID, v))
}

// RoomIDLTE applies the LTE predicate on the "room_id" field.
func RoomIDLTE(v pulid.ID) predicate.UserContact {
	return predicate.UserContact(sql.FieldLTE(FieldRoomID, v))
}

// RoomIDContains applies the Contains predicate on the "room_id" field.
func RoomIDContains(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldContains(FieldRoomID, vc))
}

// RoomIDHasPrefix applies the HasPrefix predicate on the "room_id" field.
func RoomIDHasPrefix(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldHasPrefix(FieldRoomID, vc))
}

// RoomIDHasSuffix applies the HasSuffix predicate on the "room_id" field.
func RoomIDHasSuffix(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldHasSuffix(FieldRoomID, vc))
}

// RoomIDIsNil applies the IsNil predicate on the "room_id" field.
func RoomIDIsNil() predicate.UserContact {
	return predicate.UserContact(sql.FieldIsNull(FieldRoomID))
}

// RoomIDNotNil applies the NotNil predicate on the "room_id" field.
func RoomIDNotNil() predicate.UserContact {
	return predicate.UserContact(sql.FieldNotNull(FieldRoomID))
}

// RoomIDEqualFold applies the EqualFold predicate on the "room_id" field.
func RoomIDEqualFold(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldEqualFold(FieldRoomID, vc))
}

// RoomIDContainsFold applies the ContainsFold predicate on the "room_id" field.
func RoomIDContainsFold(v pulid.ID) predicate.UserContact {
	vc := string(v)
	return predicate.UserContact(sql.FieldContainsFold(FieldRoomID, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserContact {
	return predicate.UserContact(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserContact {
	return predicate.UserContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserContact {
	return predicate.UserContact(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContact applies the HasEdge predicate on the "contact" edge.
func HasContact() predicate.UserContact {
	return predicate.UserContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ContactTable, ContactColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactWith applies the HasEdge predicate on the "contact" edge with a given conditions (other predicates).
func HasContactWith(preds ...predicate.User) predicate.UserContact {
	return predicate.UserContact(func(s *sql.Selector) {
		step := newContactStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRoom applies the HasEdge predicate on the "room" edge.
func HasRoom() predicate.UserContact {
	return predicate.UserContact(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RoomTable, RoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRoomWith applies the HasEdge predicate on the "room" edge with a given conditions (other predicates).
func HasRoomWith(preds ...predicate.Room) predicate.UserContact {
	return predicate.UserContact(func(s *sql.Selector) {
		step := newRoomStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserContact) predicate.UserContact {
	return predicate.UserContact(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserContact) predicate.UserContact {
	return predicate.UserContact(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserContact) predicate.UserContact {
	return predicate.UserContact(sql.NotPredicates(p))
}
