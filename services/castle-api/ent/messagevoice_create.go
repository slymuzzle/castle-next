// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageVoiceCreate is the builder for creating a MessageVoice entity.
type MessageVoiceCreate struct {
	config
	mutation *MessageVoiceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLength sets the "length" field.
func (mvc *MessageVoiceCreate) SetLength(i int) *MessageVoiceCreate {
	mvc.mutation.SetLength(i)
	return mvc
}

// SetAttachedAt sets the "attached_at" field.
func (mvc *MessageVoiceCreate) SetAttachedAt(t time.Time) *MessageVoiceCreate {
	mvc.mutation.SetAttachedAt(t)
	return mvc
}

// SetNillableAttachedAt sets the "attached_at" field if the given value is not nil.
func (mvc *MessageVoiceCreate) SetNillableAttachedAt(t *time.Time) *MessageVoiceCreate {
	if t != nil {
		mvc.SetAttachedAt(*t)
	}
	return mvc
}

// SetID sets the "id" field.
func (mvc *MessageVoiceCreate) SetID(pu pulid.ID) *MessageVoiceCreate {
	mvc.mutation.SetID(pu)
	return mvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mvc *MessageVoiceCreate) SetNillableID(pu *pulid.ID) *MessageVoiceCreate {
	if pu != nil {
		mvc.SetID(*pu)
	}
	return mvc
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mvc *MessageVoiceCreate) SetFileID(id pulid.ID) *MessageVoiceCreate {
	mvc.mutation.SetFileID(id)
	return mvc
}

// SetFile sets the "file" edge to the File entity.
func (mvc *MessageVoiceCreate) SetFile(f *File) *MessageVoiceCreate {
	return mvc.SetFileID(f.ID)
}

// Mutation returns the MessageVoiceMutation object of the builder.
func (mvc *MessageVoiceCreate) Mutation() *MessageVoiceMutation {
	return mvc.mutation
}

// Save creates the MessageVoice in the database.
func (mvc *MessageVoiceCreate) Save(ctx context.Context) (*MessageVoice, error) {
	mvc.defaults()
	return withHooks(ctx, mvc.sqlSave, mvc.mutation, mvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mvc *MessageVoiceCreate) SaveX(ctx context.Context) *MessageVoice {
	v, err := mvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvc *MessageVoiceCreate) Exec(ctx context.Context) error {
	_, err := mvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvc *MessageVoiceCreate) ExecX(ctx context.Context) {
	if err := mvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mvc *MessageVoiceCreate) defaults() {
	if _, ok := mvc.mutation.AttachedAt(); !ok {
		v := messagevoice.DefaultAttachedAt()
		mvc.mutation.SetAttachedAt(v)
	}
	if _, ok := mvc.mutation.ID(); !ok {
		v := messagevoice.DefaultID()
		mvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvc *MessageVoiceCreate) check() error {
	if _, ok := mvc.mutation.Length(); !ok {
		return &ValidationError{Name: "length", err: errors.New(`ent: missing required field "MessageVoice.length"`)}
	}
	if _, ok := mvc.mutation.AttachedAt(); !ok {
		return &ValidationError{Name: "attached_at", err: errors.New(`ent: missing required field "MessageVoice.attached_at"`)}
	}
	if len(mvc.mutation.FileIDs()) == 0 {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "MessageVoice.file"`)}
	}
	return nil
}

func (mvc *MessageVoiceCreate) sqlSave(ctx context.Context) (*MessageVoice, error) {
	if err := mvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mvc.mutation.id = &_node.ID
	mvc.mutation.done = true
	return _node, nil
}

func (mvc *MessageVoiceCreate) createSpec() (*MessageVoice, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageVoice{config: mvc.config}
		_spec = sqlgraph.NewCreateSpec(messagevoice.Table, sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString))
	)
	_spec.OnConflict = mvc.conflict
	if id, ok := mvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mvc.mutation.Length(); ok {
		_spec.SetField(messagevoice.FieldLength, field.TypeInt, value)
		_node.Length = value
	}
	if value, ok := mvc.mutation.AttachedAt(); ok {
		_spec.SetField(messagevoice.FieldAttachedAt, field.TypeTime, value)
		_node.AttachedAt = value
	}
	if nodes := mvc.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   messagevoice.FileTable,
			Columns: []string{messagevoice.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageVoice.Create().
//		SetLength(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageVoiceUpsert) {
//			SetLength(v+v).
//		}).
//		Exec(ctx)
func (mvc *MessageVoiceCreate) OnConflict(opts ...sql.ConflictOption) *MessageVoiceUpsertOne {
	mvc.conflict = opts
	return &MessageVoiceUpsertOne{
		create: mvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageVoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mvc *MessageVoiceCreate) OnConflictColumns(columns ...string) *MessageVoiceUpsertOne {
	mvc.conflict = append(mvc.conflict, sql.ConflictColumns(columns...))
	return &MessageVoiceUpsertOne{
		create: mvc,
	}
}

type (
	// MessageVoiceUpsertOne is the builder for "upsert"-ing
	//  one MessageVoice node.
	MessageVoiceUpsertOne struct {
		create *MessageVoiceCreate
	}

	// MessageVoiceUpsert is the "OnConflict" setter.
	MessageVoiceUpsert struct {
		*sql.UpdateSet
	}
)

// SetLength sets the "length" field.
func (u *MessageVoiceUpsert) SetLength(v int) *MessageVoiceUpsert {
	u.Set(messagevoice.FieldLength, v)
	return u
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *MessageVoiceUpsert) UpdateLength() *MessageVoiceUpsert {
	u.SetExcluded(messagevoice.FieldLength)
	return u
}

// AddLength adds v to the "length" field.
func (u *MessageVoiceUpsert) AddLength(v int) *MessageVoiceUpsert {
	u.Add(messagevoice.FieldLength, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MessageVoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messagevoice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageVoiceUpsertOne) UpdateNewValues() *MessageVoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(messagevoice.FieldID)
		}
		if _, exists := u.create.mutation.AttachedAt(); exists {
			s.SetIgnore(messagevoice.FieldAttachedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageVoice.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MessageVoiceUpsertOne) Ignore() *MessageVoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageVoiceUpsertOne) DoNothing() *MessageVoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageVoiceCreate.OnConflict
// documentation for more info.
func (u *MessageVoiceUpsertOne) Update(set func(*MessageVoiceUpsert)) *MessageVoiceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageVoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetLength sets the "length" field.
func (u *MessageVoiceUpsertOne) SetLength(v int) *MessageVoiceUpsertOne {
	return u.Update(func(s *MessageVoiceUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *MessageVoiceUpsertOne) AddLength(v int) *MessageVoiceUpsertOne {
	return u.Update(func(s *MessageVoiceUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *MessageVoiceUpsertOne) UpdateLength() *MessageVoiceUpsertOne {
	return u.Update(func(s *MessageVoiceUpsert) {
		s.UpdateLength()
	})
}

// Exec executes the query.
func (u *MessageVoiceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageVoiceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageVoiceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MessageVoiceUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MessageVoiceUpsertOne.ID is not supported by MySQL driver. Use MessageVoiceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MessageVoiceUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MessageVoiceCreateBulk is the builder for creating many MessageVoice entities in bulk.
type MessageVoiceCreateBulk struct {
	config
	err      error
	builders []*MessageVoiceCreate
	conflict []sql.ConflictOption
}

// Save creates the MessageVoice entities in the database.
func (mvcb *MessageVoiceCreateBulk) Save(ctx context.Context) ([]*MessageVoice, error) {
	if mvcb.err != nil {
		return nil, mvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mvcb.builders))
	nodes := make([]*MessageVoice, len(mvcb.builders))
	mutators := make([]Mutator, len(mvcb.builders))
	for i := range mvcb.builders {
		func(i int, root context.Context) {
			builder := mvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageVoiceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mvcb *MessageVoiceCreateBulk) SaveX(ctx context.Context) []*MessageVoice {
	v, err := mvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mvcb *MessageVoiceCreateBulk) Exec(ctx context.Context) error {
	_, err := mvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvcb *MessageVoiceCreateBulk) ExecX(ctx context.Context) {
	if err := mvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageVoice.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageVoiceUpsert) {
//			SetLength(v+v).
//		}).
//		Exec(ctx)
func (mvcb *MessageVoiceCreateBulk) OnConflict(opts ...sql.ConflictOption) *MessageVoiceUpsertBulk {
	mvcb.conflict = opts
	return &MessageVoiceUpsertBulk{
		create: mvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageVoice.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mvcb *MessageVoiceCreateBulk) OnConflictColumns(columns ...string) *MessageVoiceUpsertBulk {
	mvcb.conflict = append(mvcb.conflict, sql.ConflictColumns(columns...))
	return &MessageVoiceUpsertBulk{
		create: mvcb,
	}
}

// MessageVoiceUpsertBulk is the builder for "upsert"-ing
// a bulk of MessageVoice nodes.
type MessageVoiceUpsertBulk struct {
	create *MessageVoiceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MessageVoice.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messagevoice.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageVoiceUpsertBulk) UpdateNewValues() *MessageVoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(messagevoice.FieldID)
			}
			if _, exists := b.mutation.AttachedAt(); exists {
				s.SetIgnore(messagevoice.FieldAttachedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageVoice.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MessageVoiceUpsertBulk) Ignore() *MessageVoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageVoiceUpsertBulk) DoNothing() *MessageVoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageVoiceCreateBulk.OnConflict
// documentation for more info.
func (u *MessageVoiceUpsertBulk) Update(set func(*MessageVoiceUpsert)) *MessageVoiceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageVoiceUpsert{UpdateSet: update})
	}))
	return u
}

// SetLength sets the "length" field.
func (u *MessageVoiceUpsertBulk) SetLength(v int) *MessageVoiceUpsertBulk {
	return u.Update(func(s *MessageVoiceUpsert) {
		s.SetLength(v)
	})
}

// AddLength adds v to the "length" field.
func (u *MessageVoiceUpsertBulk) AddLength(v int) *MessageVoiceUpsertBulk {
	return u.Update(func(s *MessageVoiceUpsert) {
		s.AddLength(v)
	})
}

// UpdateLength sets the "length" field to the value that was provided on create.
func (u *MessageVoiceUpsertBulk) UpdateLength() *MessageVoiceUpsertBulk {
	return u.Update(func(s *MessageVoiceUpsert) {
		s.UpdateLength()
	})
}

// Exec executes the query.
func (u *MessageVoiceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MessageVoiceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageVoiceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageVoiceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
