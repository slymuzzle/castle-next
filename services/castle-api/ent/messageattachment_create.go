// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageAttachmentCreate is the builder for creating a MessageAttachment entity.
type MessageAttachmentCreate struct {
	config
	mutation *MessageAttachmentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (mac *MessageAttachmentCreate) SetType(m messageattachment.Type) *MessageAttachmentCreate {
	mac.mutation.SetType(m)
	return mac
}

// SetOrder sets the "order" field.
func (mac *MessageAttachmentCreate) SetOrder(u uint64) *MessageAttachmentCreate {
	mac.mutation.SetOrder(u)
	return mac
}

// SetAttachedAt sets the "attached_at" field.
func (mac *MessageAttachmentCreate) SetAttachedAt(t time.Time) *MessageAttachmentCreate {
	mac.mutation.SetAttachedAt(t)
	return mac
}

// SetNillableAttachedAt sets the "attached_at" field if the given value is not nil.
func (mac *MessageAttachmentCreate) SetNillableAttachedAt(t *time.Time) *MessageAttachmentCreate {
	if t != nil {
		mac.SetAttachedAt(*t)
	}
	return mac
}

// SetID sets the "id" field.
func (mac *MessageAttachmentCreate) SetID(pu pulid.ID) *MessageAttachmentCreate {
	mac.mutation.SetID(pu)
	return mac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mac *MessageAttachmentCreate) SetNillableID(pu *pulid.ID) *MessageAttachmentCreate {
	if pu != nil {
		mac.SetID(*pu)
	}
	return mac
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mac *MessageAttachmentCreate) SetMessageID(id pulid.ID) *MessageAttachmentCreate {
	mac.mutation.SetMessageID(id)
	return mac
}

// SetMessage sets the "message" edge to the Message entity.
func (mac *MessageAttachmentCreate) SetMessage(m *Message) *MessageAttachmentCreate {
	return mac.SetMessageID(m.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mac *MessageAttachmentCreate) SetFileID(id pulid.ID) *MessageAttachmentCreate {
	mac.mutation.SetFileID(id)
	return mac
}

// SetFile sets the "file" edge to the File entity.
func (mac *MessageAttachmentCreate) SetFile(f *File) *MessageAttachmentCreate {
	return mac.SetFileID(f.ID)
}

// Mutation returns the MessageAttachmentMutation object of the builder.
func (mac *MessageAttachmentCreate) Mutation() *MessageAttachmentMutation {
	return mac.mutation
}

// Save creates the MessageAttachment in the database.
func (mac *MessageAttachmentCreate) Save(ctx context.Context) (*MessageAttachment, error) {
	mac.defaults()
	return withHooks(ctx, mac.sqlSave, mac.mutation, mac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mac *MessageAttachmentCreate) SaveX(ctx context.Context) *MessageAttachment {
	v, err := mac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mac *MessageAttachmentCreate) Exec(ctx context.Context) error {
	_, err := mac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mac *MessageAttachmentCreate) ExecX(ctx context.Context) {
	if err := mac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mac *MessageAttachmentCreate) defaults() {
	if _, ok := mac.mutation.AttachedAt(); !ok {
		v := messageattachment.DefaultAttachedAt()
		mac.mutation.SetAttachedAt(v)
	}
	if _, ok := mac.mutation.ID(); !ok {
		v := messageattachment.DefaultID()
		mac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mac *MessageAttachmentCreate) check() error {
	if _, ok := mac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "MessageAttachment.type"`)}
	}
	if v, ok := mac.mutation.GetType(); ok {
		if err := messageattachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MessageAttachment.type": %w`, err)}
		}
	}
	if _, ok := mac.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "MessageAttachment.order"`)}
	}
	if _, ok := mac.mutation.AttachedAt(); !ok {
		return &ValidationError{Name: "attached_at", err: errors.New(`ent: missing required field "MessageAttachment.attached_at"`)}
	}
	if len(mac.mutation.MessageIDs()) == 0 {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required edge "MessageAttachment.message"`)}
	}
	if len(mac.mutation.FileIDs()) == 0 {
		return &ValidationError{Name: "file", err: errors.New(`ent: missing required edge "MessageAttachment.file"`)}
	}
	return nil
}

func (mac *MessageAttachmentCreate) sqlSave(ctx context.Context) (*MessageAttachment, error) {
	if err := mac.check(); err != nil {
		return nil, err
	}
	_node, _spec := mac.createSpec()
	if err := sqlgraph.CreateNode(ctx, mac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mac.mutation.id = &_node.ID
	mac.mutation.done = true
	return _node, nil
}

func (mac *MessageAttachmentCreate) createSpec() (*MessageAttachment, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageAttachment{config: mac.config}
		_spec = sqlgraph.NewCreateSpec(messageattachment.Table, sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString))
	)
	_spec.OnConflict = mac.conflict
	if id, ok := mac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mac.mutation.GetType(); ok {
		_spec.SetField(messageattachment.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := mac.mutation.Order(); ok {
		_spec.SetField(messageattachment.FieldOrder, field.TypeUint64, value)
		_node.Order = value
	}
	if value, ok := mac.mutation.AttachedAt(); ok {
		_spec.SetField(messageattachment.FieldAttachedAt, field.TypeTime, value)
		_node.AttachedAt = value
	}
	if nodes := mac.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messageattachment.MessageTable,
			Columns: []string{messageattachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_attachments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mac.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   messageattachment.FileTable,
			Columns: []string{messageattachment.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageAttachment.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageAttachmentUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (mac *MessageAttachmentCreate) OnConflict(opts ...sql.ConflictOption) *MessageAttachmentUpsertOne {
	mac.conflict = opts
	return &MessageAttachmentUpsertOne{
		create: mac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageAttachment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mac *MessageAttachmentCreate) OnConflictColumns(columns ...string) *MessageAttachmentUpsertOne {
	mac.conflict = append(mac.conflict, sql.ConflictColumns(columns...))
	return &MessageAttachmentUpsertOne{
		create: mac,
	}
}

type (
	// MessageAttachmentUpsertOne is the builder for "upsert"-ing
	//  one MessageAttachment node.
	MessageAttachmentUpsertOne struct {
		create *MessageAttachmentCreate
	}

	// MessageAttachmentUpsert is the "OnConflict" setter.
	MessageAttachmentUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *MessageAttachmentUpsert) SetType(v messageattachment.Type) *MessageAttachmentUpsert {
	u.Set(messageattachment.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageAttachmentUpsert) UpdateType() *MessageAttachmentUpsert {
	u.SetExcluded(messageattachment.FieldType)
	return u
}

// SetOrder sets the "order" field.
func (u *MessageAttachmentUpsert) SetOrder(v uint64) *MessageAttachmentUpsert {
	u.Set(messageattachment.FieldOrder, v)
	return u
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *MessageAttachmentUpsert) UpdateOrder() *MessageAttachmentUpsert {
	u.SetExcluded(messageattachment.FieldOrder)
	return u
}

// AddOrder adds v to the "order" field.
func (u *MessageAttachmentUpsert) AddOrder(v uint64) *MessageAttachmentUpsert {
	u.Add(messageattachment.FieldOrder, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MessageAttachment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messageattachment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageAttachmentUpsertOne) UpdateNewValues() *MessageAttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(messageattachment.FieldID)
		}
		if _, exists := u.create.mutation.AttachedAt(); exists {
			s.SetIgnore(messageattachment.FieldAttachedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageAttachment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MessageAttachmentUpsertOne) Ignore() *MessageAttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageAttachmentUpsertOne) DoNothing() *MessageAttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageAttachmentCreate.OnConflict
// documentation for more info.
func (u *MessageAttachmentUpsertOne) Update(set func(*MessageAttachmentUpsert)) *MessageAttachmentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageAttachmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *MessageAttachmentUpsertOne) SetType(v messageattachment.Type) *MessageAttachmentUpsertOne {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageAttachmentUpsertOne) UpdateType() *MessageAttachmentUpsertOne {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.UpdateType()
	})
}

// SetOrder sets the "order" field.
func (u *MessageAttachmentUpsertOne) SetOrder(v uint64) *MessageAttachmentUpsertOne {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *MessageAttachmentUpsertOne) AddOrder(v uint64) *MessageAttachmentUpsertOne {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *MessageAttachmentUpsertOne) UpdateOrder() *MessageAttachmentUpsertOne {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *MessageAttachmentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageAttachmentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageAttachmentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MessageAttachmentUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MessageAttachmentUpsertOne.ID is not supported by MySQL driver. Use MessageAttachmentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MessageAttachmentUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MessageAttachmentCreateBulk is the builder for creating many MessageAttachment entities in bulk.
type MessageAttachmentCreateBulk struct {
	config
	err      error
	builders []*MessageAttachmentCreate
	conflict []sql.ConflictOption
}

// Save creates the MessageAttachment entities in the database.
func (macb *MessageAttachmentCreateBulk) Save(ctx context.Context) ([]*MessageAttachment, error) {
	if macb.err != nil {
		return nil, macb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(macb.builders))
	nodes := make([]*MessageAttachment, len(macb.builders))
	mutators := make([]Mutator, len(macb.builders))
	for i := range macb.builders {
		func(i int, root context.Context) {
			builder := macb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageAttachmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, macb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = macb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, macb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, macb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (macb *MessageAttachmentCreateBulk) SaveX(ctx context.Context) []*MessageAttachment {
	v, err := macb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (macb *MessageAttachmentCreateBulk) Exec(ctx context.Context) error {
	_, err := macb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (macb *MessageAttachmentCreateBulk) ExecX(ctx context.Context) {
	if err := macb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageAttachment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageAttachmentUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (macb *MessageAttachmentCreateBulk) OnConflict(opts ...sql.ConflictOption) *MessageAttachmentUpsertBulk {
	macb.conflict = opts
	return &MessageAttachmentUpsertBulk{
		create: macb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageAttachment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (macb *MessageAttachmentCreateBulk) OnConflictColumns(columns ...string) *MessageAttachmentUpsertBulk {
	macb.conflict = append(macb.conflict, sql.ConflictColumns(columns...))
	return &MessageAttachmentUpsertBulk{
		create: macb,
	}
}

// MessageAttachmentUpsertBulk is the builder for "upsert"-ing
// a bulk of MessageAttachment nodes.
type MessageAttachmentUpsertBulk struct {
	create *MessageAttachmentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MessageAttachment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messageattachment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageAttachmentUpsertBulk) UpdateNewValues() *MessageAttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(messageattachment.FieldID)
			}
			if _, exists := b.mutation.AttachedAt(); exists {
				s.SetIgnore(messageattachment.FieldAttachedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageAttachment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MessageAttachmentUpsertBulk) Ignore() *MessageAttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageAttachmentUpsertBulk) DoNothing() *MessageAttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageAttachmentCreateBulk.OnConflict
// documentation for more info.
func (u *MessageAttachmentUpsertBulk) Update(set func(*MessageAttachmentUpsert)) *MessageAttachmentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageAttachmentUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *MessageAttachmentUpsertBulk) SetType(v messageattachment.Type) *MessageAttachmentUpsertBulk {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *MessageAttachmentUpsertBulk) UpdateType() *MessageAttachmentUpsertBulk {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.UpdateType()
	})
}

// SetOrder sets the "order" field.
func (u *MessageAttachmentUpsertBulk) SetOrder(v uint64) *MessageAttachmentUpsertBulk {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.SetOrder(v)
	})
}

// AddOrder adds v to the "order" field.
func (u *MessageAttachmentUpsertBulk) AddOrder(v uint64) *MessageAttachmentUpsertBulk {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.AddOrder(v)
	})
}

// UpdateOrder sets the "order" field to the value that was provided on create.
func (u *MessageAttachmentUpsertBulk) UpdateOrder() *MessageAttachmentUpsertBulk {
	return u.Update(func(s *MessageAttachmentUpsert) {
		s.UpdateOrder()
	})
}

// Exec executes the query.
func (u *MessageAttachmentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MessageAttachmentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageAttachmentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageAttachmentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
