// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/userpincode"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPinCodeQuery is the builder for querying UserPinCode entities.
type UserPinCodeQuery struct {
	config
	ctx         *QueryContext
	order       []userpincode.OrderOption
	inters      []Interceptor
	predicates  []predicate.UserPinCode
	withUser    *UserQuery
	withContact *UserQuery
	withRoom    *RoomQuery
	modifiers   []func(*sql.Selector)
	loadTotal   []func(context.Context, []*UserPinCode) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserPinCodeQuery builder.
func (upcq *UserPinCodeQuery) Where(ps ...predicate.UserPinCode) *UserPinCodeQuery {
	upcq.predicates = append(upcq.predicates, ps...)
	return upcq
}

// Limit the number of records to be returned by this query.
func (upcq *UserPinCodeQuery) Limit(limit int) *UserPinCodeQuery {
	upcq.ctx.Limit = &limit
	return upcq
}

// Offset to start from.
func (upcq *UserPinCodeQuery) Offset(offset int) *UserPinCodeQuery {
	upcq.ctx.Offset = &offset
	return upcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (upcq *UserPinCodeQuery) Unique(unique bool) *UserPinCodeQuery {
	upcq.ctx.Unique = &unique
	return upcq
}

// Order specifies how the records should be ordered.
func (upcq *UserPinCodeQuery) Order(o ...userpincode.OrderOption) *UserPinCodeQuery {
	upcq.order = append(upcq.order, o...)
	return upcq
}

// QueryUser chains the current query on the "user" edge.
func (upcq *UserPinCodeQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: upcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userpincode.Table, userpincode.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpincode.UserTable, userpincode.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(upcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryContact chains the current query on the "contact" edge.
func (upcq *UserPinCodeQuery) QueryContact() *UserQuery {
	query := (&UserClient{config: upcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userpincode.Table, userpincode.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpincode.ContactTable, userpincode.ContactColumn),
		)
		fromU = sqlgraph.SetNeighbors(upcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRoom chains the current query on the "room" edge.
func (upcq *UserPinCodeQuery) QueryRoom() *RoomQuery {
	query := (&RoomClient{config: upcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := upcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := upcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(userpincode.Table, userpincode.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, userpincode.RoomTable, userpincode.RoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(upcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserPinCode entity from the query.
// Returns a *NotFoundError when no UserPinCode was found.
func (upcq *UserPinCodeQuery) First(ctx context.Context) (*UserPinCode, error) {
	nodes, err := upcq.Limit(1).All(setContextOp(ctx, upcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{userpincode.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (upcq *UserPinCodeQuery) FirstX(ctx context.Context) *UserPinCode {
	node, err := upcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserPinCode ID from the query.
// Returns a *NotFoundError when no UserPinCode ID was found.
func (upcq *UserPinCodeQuery) FirstID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = upcq.Limit(1).IDs(setContextOp(ctx, upcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{userpincode.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (upcq *UserPinCodeQuery) FirstIDX(ctx context.Context) pulid.ID {
	id, err := upcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserPinCode entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserPinCode entity is found.
// Returns a *NotFoundError when no UserPinCode entities are found.
func (upcq *UserPinCodeQuery) Only(ctx context.Context) (*UserPinCode, error) {
	nodes, err := upcq.Limit(2).All(setContextOp(ctx, upcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{userpincode.Label}
	default:
		return nil, &NotSingularError{userpincode.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (upcq *UserPinCodeQuery) OnlyX(ctx context.Context) *UserPinCode {
	node, err := upcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserPinCode ID in the query.
// Returns a *NotSingularError when more than one UserPinCode ID is found.
// Returns a *NotFoundError when no entities are found.
func (upcq *UserPinCodeQuery) OnlyID(ctx context.Context) (id pulid.ID, err error) {
	var ids []pulid.ID
	if ids, err = upcq.Limit(2).IDs(setContextOp(ctx, upcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{userpincode.Label}
	default:
		err = &NotSingularError{userpincode.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (upcq *UserPinCodeQuery) OnlyIDX(ctx context.Context) pulid.ID {
	id, err := upcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserPinCodes.
func (upcq *UserPinCodeQuery) All(ctx context.Context) ([]*UserPinCode, error) {
	ctx = setContextOp(ctx, upcq.ctx, ent.OpQueryAll)
	if err := upcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserPinCode, *UserPinCodeQuery]()
	return withInterceptors[[]*UserPinCode](ctx, upcq, qr, upcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (upcq *UserPinCodeQuery) AllX(ctx context.Context) []*UserPinCode {
	nodes, err := upcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserPinCode IDs.
func (upcq *UserPinCodeQuery) IDs(ctx context.Context) (ids []pulid.ID, err error) {
	if upcq.ctx.Unique == nil && upcq.path != nil {
		upcq.Unique(true)
	}
	ctx = setContextOp(ctx, upcq.ctx, ent.OpQueryIDs)
	if err = upcq.Select(userpincode.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (upcq *UserPinCodeQuery) IDsX(ctx context.Context) []pulid.ID {
	ids, err := upcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (upcq *UserPinCodeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, upcq.ctx, ent.OpQueryCount)
	if err := upcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, upcq, querierCount[*UserPinCodeQuery](), upcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (upcq *UserPinCodeQuery) CountX(ctx context.Context) int {
	count, err := upcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (upcq *UserPinCodeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, upcq.ctx, ent.OpQueryExist)
	switch _, err := upcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (upcq *UserPinCodeQuery) ExistX(ctx context.Context) bool {
	exist, err := upcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserPinCodeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (upcq *UserPinCodeQuery) Clone() *UserPinCodeQuery {
	if upcq == nil {
		return nil
	}
	return &UserPinCodeQuery{
		config:      upcq.config,
		ctx:         upcq.ctx.Clone(),
		order:       append([]userpincode.OrderOption{}, upcq.order...),
		inters:      append([]Interceptor{}, upcq.inters...),
		predicates:  append([]predicate.UserPinCode{}, upcq.predicates...),
		withUser:    upcq.withUser.Clone(),
		withContact: upcq.withContact.Clone(),
		withRoom:    upcq.withRoom.Clone(),
		// clone intermediate query.
		sql:  upcq.sql.Clone(),
		path: upcq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (upcq *UserPinCodeQuery) WithUser(opts ...func(*UserQuery)) *UserPinCodeQuery {
	query := (&UserClient{config: upcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	upcq.withUser = query
	return upcq
}

// WithContact tells the query-builder to eager-load the nodes that are connected to
// the "contact" edge. The optional arguments are used to configure the query builder of the edge.
func (upcq *UserPinCodeQuery) WithContact(opts ...func(*UserQuery)) *UserPinCodeQuery {
	query := (&UserClient{config: upcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	upcq.withContact = query
	return upcq
}

// WithRoom tells the query-builder to eager-load the nodes that are connected to
// the "room" edge. The optional arguments are used to configure the query builder of the edge.
func (upcq *UserPinCodeQuery) WithRoom(opts ...func(*RoomQuery)) *UserPinCodeQuery {
	query := (&RoomClient{config: upcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	upcq.withRoom = query
	return upcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID pulid.ID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserPinCode.Query().
//		GroupBy(userpincode.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (upcq *UserPinCodeQuery) GroupBy(field string, fields ...string) *UserPinCodeGroupBy {
	upcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserPinCodeGroupBy{build: upcq}
	grbuild.flds = &upcq.ctx.Fields
	grbuild.label = userpincode.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID pulid.ID `json:"user_id,omitempty"`
//	}
//
//	client.UserPinCode.Query().
//		Select(userpincode.FieldUserID).
//		Scan(ctx, &v)
func (upcq *UserPinCodeQuery) Select(fields ...string) *UserPinCodeSelect {
	upcq.ctx.Fields = append(upcq.ctx.Fields, fields...)
	sbuild := &UserPinCodeSelect{UserPinCodeQuery: upcq}
	sbuild.label = userpincode.Label
	sbuild.flds, sbuild.scan = &upcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserPinCodeSelect configured with the given aggregations.
func (upcq *UserPinCodeQuery) Aggregate(fns ...AggregateFunc) *UserPinCodeSelect {
	return upcq.Select().Aggregate(fns...)
}

func (upcq *UserPinCodeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range upcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, upcq); err != nil {
				return err
			}
		}
	}
	for _, f := range upcq.ctx.Fields {
		if !userpincode.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if upcq.path != nil {
		prev, err := upcq.path(ctx)
		if err != nil {
			return err
		}
		upcq.sql = prev
	}
	return nil
}

func (upcq *UserPinCodeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserPinCode, error) {
	var (
		nodes       = []*UserPinCode{}
		_spec       = upcq.querySpec()
		loadedTypes = [3]bool{
			upcq.withUser != nil,
			upcq.withContact != nil,
			upcq.withRoom != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserPinCode).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserPinCode{config: upcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(upcq.modifiers) > 0 {
		_spec.Modifiers = upcq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, upcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := upcq.withUser; query != nil {
		if err := upcq.loadUser(ctx, query, nodes, nil,
			func(n *UserPinCode, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := upcq.withContact; query != nil {
		if err := upcq.loadContact(ctx, query, nodes, nil,
			func(n *UserPinCode, e *User) { n.Edges.Contact = e }); err != nil {
			return nil, err
		}
	}
	if query := upcq.withRoom; query != nil {
		if err := upcq.loadRoom(ctx, query, nodes, nil,
			func(n *UserPinCode, e *Room) { n.Edges.Room = e }); err != nil {
			return nil, err
		}
	}
	for i := range upcq.loadTotal {
		if err := upcq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (upcq *UserPinCodeQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserPinCode, init func(*UserPinCode), assign func(*UserPinCode, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*UserPinCode)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (upcq *UserPinCodeQuery) loadContact(ctx context.Context, query *UserQuery, nodes []*UserPinCode, init func(*UserPinCode), assign func(*UserPinCode, *User)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*UserPinCode)
	for i := range nodes {
		fk := nodes[i].ContactID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "contact_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (upcq *UserPinCodeQuery) loadRoom(ctx context.Context, query *RoomQuery, nodes []*UserPinCode, init func(*UserPinCode), assign func(*UserPinCode, *Room)) error {
	ids := make([]pulid.ID, 0, len(nodes))
	nodeids := make(map[pulid.ID][]*UserPinCode)
	for i := range nodes {
		fk := nodes[i].RoomID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(room.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "room_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (upcq *UserPinCodeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := upcq.querySpec()
	if len(upcq.modifiers) > 0 {
		_spec.Modifiers = upcq.modifiers
	}
	_spec.Node.Columns = upcq.ctx.Fields
	if len(upcq.ctx.Fields) > 0 {
		_spec.Unique = upcq.ctx.Unique != nil && *upcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, upcq.driver, _spec)
}

func (upcq *UserPinCodeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(userpincode.Table, userpincode.Columns, sqlgraph.NewFieldSpec(userpincode.FieldID, field.TypeString))
	_spec.From = upcq.sql
	if unique := upcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if upcq.path != nil {
		_spec.Unique = true
	}
	if fields := upcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpincode.FieldID)
		for i := range fields {
			if fields[i] != userpincode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if upcq.withUser != nil {
			_spec.Node.AddColumnOnce(userpincode.FieldUserID)
		}
		if upcq.withContact != nil {
			_spec.Node.AddColumnOnce(userpincode.FieldContactID)
		}
		if upcq.withRoom != nil {
			_spec.Node.AddColumnOnce(userpincode.FieldRoomID)
		}
	}
	if ps := upcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := upcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := upcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := upcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (upcq *UserPinCodeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(upcq.driver.Dialect())
	t1 := builder.Table(userpincode.Table)
	columns := upcq.ctx.Fields
	if len(columns) == 0 {
		columns = userpincode.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if upcq.sql != nil {
		selector = upcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if upcq.ctx.Unique != nil && *upcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range upcq.predicates {
		p(selector)
	}
	for _, p := range upcq.order {
		p(selector)
	}
	if offset := upcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := upcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserPinCodeGroupBy is the group-by builder for UserPinCode entities.
type UserPinCodeGroupBy struct {
	selector
	build *UserPinCodeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (upcgb *UserPinCodeGroupBy) Aggregate(fns ...AggregateFunc) *UserPinCodeGroupBy {
	upcgb.fns = append(upcgb.fns, fns...)
	return upcgb
}

// Scan applies the selector query and scans the result into the given value.
func (upcgb *UserPinCodeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, upcgb.build.ctx, ent.OpQueryGroupBy)
	if err := upcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserPinCodeQuery, *UserPinCodeGroupBy](ctx, upcgb.build, upcgb, upcgb.build.inters, v)
}

func (upcgb *UserPinCodeGroupBy) sqlScan(ctx context.Context, root *UserPinCodeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(upcgb.fns))
	for _, fn := range upcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*upcgb.flds)+len(upcgb.fns))
		for _, f := range *upcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*upcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := upcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserPinCodeSelect is the builder for selecting fields of UserPinCode entities.
type UserPinCodeSelect struct {
	*UserPinCodeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (upcs *UserPinCodeSelect) Aggregate(fns ...AggregateFunc) *UserPinCodeSelect {
	upcs.fns = append(upcs.fns, fns...)
	return upcs
}

// Scan applies the selector query and scans the result into the given value.
func (upcs *UserPinCodeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, upcs.ctx, ent.OpQuerySelect)
	if err := upcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserPinCodeQuery, *UserPinCodeSelect](ctx, upcs.UserPinCodeQuery, upcs, upcs.inters, v)
}

func (upcs *UserPinCodeSelect) sqlScan(ctx context.Context, root *UserPinCodeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(upcs.fns))
	for _, fn := range upcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*upcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := upcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
