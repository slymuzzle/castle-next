// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/userpincode"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPinCodeUpdate is the builder for updating UserPinCode entities.
type UserPinCodeUpdate struct {
	config
	hooks    []Hook
	mutation *UserPinCodeMutation
}

// Where appends a list predicates to the UserPinCodeUpdate builder.
func (upcu *UserPinCodeUpdate) Where(ps ...predicate.UserPinCode) *UserPinCodeUpdate {
	upcu.mutation.Where(ps...)
	return upcu
}

// SetUserID sets the "user_id" field.
func (upcu *UserPinCodeUpdate) SetUserID(pu pulid.ID) *UserPinCodeUpdate {
	upcu.mutation.SetUserID(pu)
	return upcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upcu *UserPinCodeUpdate) SetNillableUserID(pu *pulid.ID) *UserPinCodeUpdate {
	if pu != nil {
		upcu.SetUserID(*pu)
	}
	return upcu
}

// SetContactID sets the "contact_id" field.
func (upcu *UserPinCodeUpdate) SetContactID(pu pulid.ID) *UserPinCodeUpdate {
	upcu.mutation.SetContactID(pu)
	return upcu
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (upcu *UserPinCodeUpdate) SetNillableContactID(pu *pulid.ID) *UserPinCodeUpdate {
	if pu != nil {
		upcu.SetContactID(*pu)
	}
	return upcu
}

// SetRoomID sets the "room_id" field.
func (upcu *UserPinCodeUpdate) SetRoomID(pu pulid.ID) *UserPinCodeUpdate {
	upcu.mutation.SetRoomID(pu)
	return upcu
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (upcu *UserPinCodeUpdate) SetNillableRoomID(pu *pulid.ID) *UserPinCodeUpdate {
	if pu != nil {
		upcu.SetRoomID(*pu)
	}
	return upcu
}

// ClearRoomID clears the value of the "room_id" field.
func (upcu *UserPinCodeUpdate) ClearRoomID() *UserPinCodeUpdate {
	upcu.mutation.ClearRoomID()
	return upcu
}

// SetCreatedAt sets the "created_at" field.
func (upcu *UserPinCodeUpdate) SetCreatedAt(t time.Time) *UserPinCodeUpdate {
	upcu.mutation.SetCreatedAt(t)
	return upcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upcu *UserPinCodeUpdate) SetNillableCreatedAt(t *time.Time) *UserPinCodeUpdate {
	if t != nil {
		upcu.SetCreatedAt(*t)
	}
	return upcu
}

// SetUser sets the "user" edge to the User entity.
func (upcu *UserPinCodeUpdate) SetUser(u *User) *UserPinCodeUpdate {
	return upcu.SetUserID(u.ID)
}

// SetContact sets the "contact" edge to the User entity.
func (upcu *UserPinCodeUpdate) SetContact(u *User) *UserPinCodeUpdate {
	return upcu.SetContactID(u.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (upcu *UserPinCodeUpdate) SetRoom(r *Room) *UserPinCodeUpdate {
	return upcu.SetRoomID(r.ID)
}

// Mutation returns the UserPinCodeMutation object of the builder.
func (upcu *UserPinCodeUpdate) Mutation() *UserPinCodeMutation {
	return upcu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upcu *UserPinCodeUpdate) ClearUser() *UserPinCodeUpdate {
	upcu.mutation.ClearUser()
	return upcu
}

// ClearContact clears the "contact" edge to the User entity.
func (upcu *UserPinCodeUpdate) ClearContact() *UserPinCodeUpdate {
	upcu.mutation.ClearContact()
	return upcu
}

// ClearRoom clears the "room" edge to the Room entity.
func (upcu *UserPinCodeUpdate) ClearRoom() *UserPinCodeUpdate {
	upcu.mutation.ClearRoom()
	return upcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upcu *UserPinCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upcu.sqlSave, upcu.mutation, upcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upcu *UserPinCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := upcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upcu *UserPinCodeUpdate) Exec(ctx context.Context) error {
	_, err := upcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcu *UserPinCodeUpdate) ExecX(ctx context.Context) {
	if err := upcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upcu *UserPinCodeUpdate) check() error {
	if upcu.mutation.UserCleared() && len(upcu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPinCode.user"`)
	}
	if upcu.mutation.ContactCleared() && len(upcu.mutation.ContactIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPinCode.contact"`)
	}
	return nil
}

func (upcu *UserPinCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := upcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpincode.Table, userpincode.Columns, sqlgraph.NewFieldSpec(userpincode.FieldID, field.TypeString))
	if ps := upcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upcu.mutation.CreatedAt(); ok {
		_spec.SetField(userpincode.FieldCreatedAt, field.TypeTime, value)
	}
	if upcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.UserTable,
			Columns: []string{userpincode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.UserTable,
			Columns: []string{userpincode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upcu.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.ContactTable,
			Columns: []string{userpincode.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcu.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.ContactTable,
			Columns: []string{userpincode.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upcu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.RoomTable,
			Columns: []string{userpincode.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.RoomTable,
			Columns: []string{userpincode.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpincode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upcu.mutation.done = true
	return n, nil
}

// UserPinCodeUpdateOne is the builder for updating a single UserPinCode entity.
type UserPinCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPinCodeMutation
}

// SetUserID sets the "user_id" field.
func (upcuo *UserPinCodeUpdateOne) SetUserID(pu pulid.ID) *UserPinCodeUpdateOne {
	upcuo.mutation.SetUserID(pu)
	return upcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upcuo *UserPinCodeUpdateOne) SetNillableUserID(pu *pulid.ID) *UserPinCodeUpdateOne {
	if pu != nil {
		upcuo.SetUserID(*pu)
	}
	return upcuo
}

// SetContactID sets the "contact_id" field.
func (upcuo *UserPinCodeUpdateOne) SetContactID(pu pulid.ID) *UserPinCodeUpdateOne {
	upcuo.mutation.SetContactID(pu)
	return upcuo
}

// SetNillableContactID sets the "contact_id" field if the given value is not nil.
func (upcuo *UserPinCodeUpdateOne) SetNillableContactID(pu *pulid.ID) *UserPinCodeUpdateOne {
	if pu != nil {
		upcuo.SetContactID(*pu)
	}
	return upcuo
}

// SetRoomID sets the "room_id" field.
func (upcuo *UserPinCodeUpdateOne) SetRoomID(pu pulid.ID) *UserPinCodeUpdateOne {
	upcuo.mutation.SetRoomID(pu)
	return upcuo
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (upcuo *UserPinCodeUpdateOne) SetNillableRoomID(pu *pulid.ID) *UserPinCodeUpdateOne {
	if pu != nil {
		upcuo.SetRoomID(*pu)
	}
	return upcuo
}

// ClearRoomID clears the value of the "room_id" field.
func (upcuo *UserPinCodeUpdateOne) ClearRoomID() *UserPinCodeUpdateOne {
	upcuo.mutation.ClearRoomID()
	return upcuo
}

// SetCreatedAt sets the "created_at" field.
func (upcuo *UserPinCodeUpdateOne) SetCreatedAt(t time.Time) *UserPinCodeUpdateOne {
	upcuo.mutation.SetCreatedAt(t)
	return upcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (upcuo *UserPinCodeUpdateOne) SetNillableCreatedAt(t *time.Time) *UserPinCodeUpdateOne {
	if t != nil {
		upcuo.SetCreatedAt(*t)
	}
	return upcuo
}

// SetUser sets the "user" edge to the User entity.
func (upcuo *UserPinCodeUpdateOne) SetUser(u *User) *UserPinCodeUpdateOne {
	return upcuo.SetUserID(u.ID)
}

// SetContact sets the "contact" edge to the User entity.
func (upcuo *UserPinCodeUpdateOne) SetContact(u *User) *UserPinCodeUpdateOne {
	return upcuo.SetContactID(u.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (upcuo *UserPinCodeUpdateOne) SetRoom(r *Room) *UserPinCodeUpdateOne {
	return upcuo.SetRoomID(r.ID)
}

// Mutation returns the UserPinCodeMutation object of the builder.
func (upcuo *UserPinCodeUpdateOne) Mutation() *UserPinCodeMutation {
	return upcuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (upcuo *UserPinCodeUpdateOne) ClearUser() *UserPinCodeUpdateOne {
	upcuo.mutation.ClearUser()
	return upcuo
}

// ClearContact clears the "contact" edge to the User entity.
func (upcuo *UserPinCodeUpdateOne) ClearContact() *UserPinCodeUpdateOne {
	upcuo.mutation.ClearContact()
	return upcuo
}

// ClearRoom clears the "room" edge to the Room entity.
func (upcuo *UserPinCodeUpdateOne) ClearRoom() *UserPinCodeUpdateOne {
	upcuo.mutation.ClearRoom()
	return upcuo
}

// Where appends a list predicates to the UserPinCodeUpdate builder.
func (upcuo *UserPinCodeUpdateOne) Where(ps ...predicate.UserPinCode) *UserPinCodeUpdateOne {
	upcuo.mutation.Where(ps...)
	return upcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upcuo *UserPinCodeUpdateOne) Select(field string, fields ...string) *UserPinCodeUpdateOne {
	upcuo.fields = append([]string{field}, fields...)
	return upcuo
}

// Save executes the query and returns the updated UserPinCode entity.
func (upcuo *UserPinCodeUpdateOne) Save(ctx context.Context) (*UserPinCode, error) {
	return withHooks(ctx, upcuo.sqlSave, upcuo.mutation, upcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upcuo *UserPinCodeUpdateOne) SaveX(ctx context.Context) *UserPinCode {
	node, err := upcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upcuo *UserPinCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := upcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcuo *UserPinCodeUpdateOne) ExecX(ctx context.Context) {
	if err := upcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upcuo *UserPinCodeUpdateOne) check() error {
	if upcuo.mutation.UserCleared() && len(upcuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPinCode.user"`)
	}
	if upcuo.mutation.ContactCleared() && len(upcuo.mutation.ContactIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "UserPinCode.contact"`)
	}
	return nil
}

func (upcuo *UserPinCodeUpdateOne) sqlSave(ctx context.Context) (_node *UserPinCode, err error) {
	if err := upcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userpincode.Table, userpincode.Columns, sqlgraph.NewFieldSpec(userpincode.FieldID, field.TypeString))
	id, ok := upcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPinCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpincode.FieldID)
		for _, f := range fields {
			if !userpincode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpincode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upcuo.mutation.CreatedAt(); ok {
		_spec.SetField(userpincode.FieldCreatedAt, field.TypeTime, value)
	}
	if upcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.UserTable,
			Columns: []string{userpincode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.UserTable,
			Columns: []string{userpincode.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upcuo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.ContactTable,
			Columns: []string{userpincode.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcuo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.ContactTable,
			Columns: []string{userpincode.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if upcuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.RoomTable,
			Columns: []string{userpincode.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := upcuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userpincode.RoomTable,
			Columns: []string{userpincode.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserPinCode{config: upcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpincode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upcuo.mutation.done = true
	return _node, nil
}
