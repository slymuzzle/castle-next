// Code generated by ent, DO NOT EDIT.

package file

import (
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the file type in the database.
	Label = "file"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMimeType holds the string denoting the mime_type field in the database.
	FieldMimeType = "mime_type"
	// FieldDisk holds the string denoting the disk field in the database.
	FieldDisk = "disk"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeMessageAttachment holds the string denoting the message_attachment edge name in mutations.
	EdgeMessageAttachment = "message_attachment"
	// EdgeMessageVoice holds the string denoting the message_voice edge name in mutations.
	EdgeMessageVoice = "message_voice"
	// Table holds the table name of the file in the database.
	Table = "files"
	// MessageAttachmentTable is the table that holds the message_attachment relation/edge.
	MessageAttachmentTable = "message_attachments"
	// MessageAttachmentInverseTable is the table name for the MessageAttachment entity.
	// It exists in this package in order to avoid circular dependency with the "messageattachment" package.
	MessageAttachmentInverseTable = "message_attachments"
	// MessageAttachmentColumn is the table column denoting the message_attachment relation/edge.
	MessageAttachmentColumn = "file_message_attachment"
	// MessageVoiceTable is the table that holds the message_voice relation/edge.
	MessageVoiceTable = "message_voices"
	// MessageVoiceInverseTable is the table name for the MessageVoice entity.
	// It exists in this package in order to avoid circular dependency with the "messagevoice" package.
	MessageVoiceInverseTable = "message_voices"
	// MessageVoiceColumn is the table column denoting the message_voice relation/edge.
	MessageVoiceColumn = "file_message_voice"
)

// Columns holds all SQL columns for file fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMimeType,
	FieldDisk,
	FieldSize,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() pulid.ID
)

// OrderOption defines the ordering options for the File queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMimeType orders the results by the mime_type field.
func ByMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMimeType, opts...).ToFunc()
}

// ByDisk orders the results by the disk field.
func ByDisk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisk, opts...).ToFunc()
}

// BySize orders the results by the size field.
func BySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSize, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByMessageAttachmentField orders the results by message_attachment field.
func ByMessageAttachmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageAttachmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByMessageVoiceField orders the results by message_voice field.
func ByMessageVoiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageVoiceStep(), sql.OrderByField(field, opts...))
	}
}
func newMessageAttachmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageAttachmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MessageAttachmentTable, MessageAttachmentColumn),
	)
}
func newMessageVoiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageVoiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MessageVoiceTable, MessageVoiceColumn),
	)
}
