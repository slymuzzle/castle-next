// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageAttachmentDelete is the builder for deleting a MessageAttachment entity.
type MessageAttachmentDelete struct {
	config
	hooks    []Hook
	mutation *MessageAttachmentMutation
}

// Where appends a list predicates to the MessageAttachmentDelete builder.
func (mad *MessageAttachmentDelete) Where(ps ...predicate.MessageAttachment) *MessageAttachmentDelete {
	mad.mutation.Where(ps...)
	return mad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (mad *MessageAttachmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, mad.sqlExec, mad.mutation, mad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (mad *MessageAttachmentDelete) ExecX(ctx context.Context) int {
	n, err := mad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (mad *MessageAttachmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(messageattachment.Table, sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString))
	if ps := mad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, mad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	mad.mutation.done = true
	return affected, err
}

// MessageAttachmentDeleteOne is the builder for deleting a single MessageAttachment entity.
type MessageAttachmentDeleteOne struct {
	mad *MessageAttachmentDelete
}

// Where appends a list predicates to the MessageAttachmentDelete builder.
func (mado *MessageAttachmentDeleteOne) Where(ps ...predicate.MessageAttachment) *MessageAttachmentDeleteOne {
	mado.mad.mutation.Where(ps...)
	return mado
}

// Exec executes the deletion query.
func (mado *MessageAttachmentDeleteOne) Exec(ctx context.Context) error {
	n, err := mado.mad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{messageattachment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (mado *MessageAttachmentDeleteOne) ExecX(ctx context.Context) {
	if err := mado.Exec(ctx); err != nil {
		panic(err)
	}
}
