// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"journeyhub/ent/device"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/notification"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[pulid.ID]
	PageInfo       = entgql.PageInfo[pulid.ID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// DeviceEdge is the edge representation of Device.
type DeviceEdge struct {
	Node   *Device `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// DeviceConnection is the connection containing edges to Device.
type DeviceConnection struct {
	Edges      []*DeviceEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *DeviceConnection) build(nodes []*Device, pager *devicePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Device
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Device {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Device {
			return nodes[i]
		}
	}
	c.Edges = make([]*DeviceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &DeviceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// DevicePaginateOption enables pagination customization.
type DevicePaginateOption func(*devicePager) error

// WithDeviceOrder configures pagination ordering.
func WithDeviceOrder(order []*DeviceOrder) DevicePaginateOption {
	return func(pager *devicePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithDeviceFilter configures pagination filter.
func WithDeviceFilter(filter func(*DeviceQuery) (*DeviceQuery, error)) DevicePaginateOption {
	return func(pager *devicePager) error {
		if filter == nil {
			return errors.New("DeviceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type devicePager struct {
	reverse bool
	order   []*DeviceOrder
	filter  func(*DeviceQuery) (*DeviceQuery, error)
}

func newDevicePager(opts []DevicePaginateOption, reverse bool) (*devicePager, error) {
	pager := &devicePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *devicePager) applyFilter(query *DeviceQuery) (*DeviceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *devicePager) toCursor(d *Device) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(d).Value)
	}
	return Cursor{ID: d.ID, Value: cs_}
}

func (p *devicePager) applyCursors(query *DeviceQuery, after, before *Cursor) (*DeviceQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultDeviceOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *devicePager) applyOrder(query *DeviceQuery) *DeviceQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultDeviceOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultDeviceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *devicePager) orderExpr(query *DeviceQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultDeviceOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Device.
func (d *DeviceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DevicePaginateOption,
) (*DeviceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDevicePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if d, err = pager.applyFilter(d); err != nil {
		return nil, err
	}
	conn := &DeviceConnection{Edges: []*DeviceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := d.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if d, err = pager.applyCursors(d, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		d.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := d.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	d = pager.applyOrder(d)
	nodes, err := d.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// DeviceOrderFieldDeviceID orders Device by device_id.
	DeviceOrderFieldDeviceID = &DeviceOrderField{
		Value: func(d *Device) (ent.Value, error) {
			return d.DeviceID, nil
		},
		column: device.FieldDeviceID,
		toTerm: device.ByDeviceID,
		toCursor: func(d *Device) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.DeviceID,
			}
		},
	}
	// DeviceOrderFieldFcmToken orders Device by fcm_token.
	DeviceOrderFieldFcmToken = &DeviceOrderField{
		Value: func(d *Device) (ent.Value, error) {
			return d.FcmToken, nil
		},
		column: device.FieldFcmToken,
		toTerm: device.ByFcmToken,
		toCursor: func(d *Device) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.FcmToken,
			}
		},
	}
	// DeviceOrderFieldCreatedAt orders Device by created_at.
	DeviceOrderFieldCreatedAt = &DeviceOrderField{
		Value: func(d *Device) (ent.Value, error) {
			return d.CreatedAt, nil
		},
		column: device.FieldCreatedAt,
		toTerm: device.ByCreatedAt,
		toCursor: func(d *Device) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.CreatedAt,
			}
		},
	}
	// DeviceOrderFieldUpdatedAt orders Device by updated_at.
	DeviceOrderFieldUpdatedAt = &DeviceOrderField{
		Value: func(d *Device) (ent.Value, error) {
			return d.UpdatedAt, nil
		},
		column: device.FieldUpdatedAt,
		toTerm: device.ByUpdatedAt,
		toCursor: func(d *Device) Cursor {
			return Cursor{
				ID:    d.ID,
				Value: d.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f DeviceOrderField) String() string {
	var str string
	switch f.column {
	case DeviceOrderFieldDeviceID.column:
		str = "DEVICE_ID"
	case DeviceOrderFieldFcmToken.column:
		str = "FCM_TOKEN"
	case DeviceOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case DeviceOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f DeviceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *DeviceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("DeviceOrderField %T must be a string", v)
	}
	switch str {
	case "DEVICE_ID":
		*f = *DeviceOrderFieldDeviceID
	case "FCM_TOKEN":
		*f = *DeviceOrderFieldFcmToken
	case "CREATED_AT":
		*f = *DeviceOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *DeviceOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid DeviceOrderField", str)
	}
	return nil
}

// DeviceOrderField defines the ordering field of Device.
type DeviceOrderField struct {
	// Value extracts the ordering value from the given Device.
	Value    func(*Device) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) device.OrderOption
	toCursor func(*Device) Cursor
}

// DeviceOrder defines the ordering of Device.
type DeviceOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *DeviceOrderField `json:"field"`
}

// DefaultDeviceOrder is the default ordering of Device.
var DefaultDeviceOrder = &DeviceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &DeviceOrderField{
		Value: func(d *Device) (ent.Value, error) {
			return d.ID, nil
		},
		column: device.FieldID,
		toTerm: device.ByID,
		toCursor: func(d *Device) Cursor {
			return Cursor{ID: d.ID}
		},
	},
}

// ToEdge converts Device into DeviceEdge.
func (d *Device) ToEdge(order *DeviceOrder) *DeviceEdge {
	if order == nil {
		order = DefaultDeviceOrder
	}
	return &DeviceEdge{
		Node:   d,
		Cursor: order.Field.toCursor(d),
	}
}

// FileEdge is the edge representation of File.
type FileEdge struct {
	Node   *File  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// FileConnection is the connection containing edges to File.
type FileConnection struct {
	Edges      []*FileEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *FileConnection) build(nodes []*File, pager *filePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *File
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *File {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *File {
			return nodes[i]
		}
	}
	c.Edges = make([]*FileEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &FileEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// FilePaginateOption enables pagination customization.
type FilePaginateOption func(*filePager) error

// WithFileOrder configures pagination ordering.
func WithFileOrder(order *FileOrder) FilePaginateOption {
	if order == nil {
		order = DefaultFileOrder
	}
	o := *order
	return func(pager *filePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultFileOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithFileFilter configures pagination filter.
func WithFileFilter(filter func(*FileQuery) (*FileQuery, error)) FilePaginateOption {
	return func(pager *filePager) error {
		if filter == nil {
			return errors.New("FileQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type filePager struct {
	reverse bool
	order   *FileOrder
	filter  func(*FileQuery) (*FileQuery, error)
}

func newFilePager(opts []FilePaginateOption, reverse bool) (*filePager, error) {
	pager := &filePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultFileOrder
	}
	return pager, nil
}

func (p *filePager) applyFilter(query *FileQuery) (*FileQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *filePager) toCursor(f *File) Cursor {
	return p.order.Field.toCursor(f)
}

func (p *filePager) applyCursors(query *FileQuery, after, before *Cursor) (*FileQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultFileOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *filePager) applyOrder(query *FileQuery) *FileQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultFileOrder.Field {
		query = query.Order(DefaultFileOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *filePager) orderExpr(query *FileQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultFileOrder.Field {
			b.Comma().Ident(DefaultFileOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to File.
func (f *FileQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...FilePaginateOption,
) (*FileConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newFilePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if f, err = pager.applyFilter(f); err != nil {
		return nil, err
	}
	conn := &FileConnection{Edges: []*FileEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := f.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if f, err = pager.applyCursors(f, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		f.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := f.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	f = pager.applyOrder(f)
	nodes, err := f.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// FileOrderFieldName orders File by name.
	FileOrderFieldName = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Name, nil
		},
		column: file.FieldName,
		toTerm: file.ByName,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Name,
			}
		},
	}
	// FileOrderFieldContentType orders File by content_type.
	FileOrderFieldContentType = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.ContentType, nil
		},
		column: file.FieldContentType,
		toTerm: file.ByContentType,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.ContentType,
			}
		},
	}
	// FileOrderFieldSize orders File by size.
	FileOrderFieldSize = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Size, nil
		},
		column: file.FieldSize,
		toTerm: file.BySize,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Size,
			}
		},
	}
	// FileOrderFieldLocation orders File by location.
	FileOrderFieldLocation = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Location, nil
		},
		column: file.FieldLocation,
		toTerm: file.ByLocation,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Location,
			}
		},
	}
	// FileOrderFieldBucket orders File by bucket.
	FileOrderFieldBucket = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Bucket, nil
		},
		column: file.FieldBucket,
		toTerm: file.ByBucket,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Bucket,
			}
		},
	}
	// FileOrderFieldPath orders File by path.
	FileOrderFieldPath = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.Path, nil
		},
		column: file.FieldPath,
		toTerm: file.ByPath,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.Path,
			}
		},
	}
	// FileOrderFieldCreatedAt orders File by created_at.
	FileOrderFieldCreatedAt = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.CreatedAt, nil
		},
		column: file.FieldCreatedAt,
		toTerm: file.ByCreatedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.CreatedAt,
			}
		},
	}
	// FileOrderFieldUpdatedAt orders File by updated_at.
	FileOrderFieldUpdatedAt = &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.UpdatedAt, nil
		},
		column: file.FieldUpdatedAt,
		toTerm: file.ByUpdatedAt,
		toCursor: func(f *File) Cursor {
			return Cursor{
				ID:    f.ID,
				Value: f.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f FileOrderField) String() string {
	var str string
	switch f.column {
	case FileOrderFieldName.column:
		str = "NAME"
	case FileOrderFieldContentType.column:
		str = "CONTENT_TYPE"
	case FileOrderFieldSize.column:
		str = "SIZE"
	case FileOrderFieldLocation.column:
		str = "LOCATION"
	case FileOrderFieldBucket.column:
		str = "BUCKET"
	case FileOrderFieldPath.column:
		str = "PATH"
	case FileOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case FileOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f FileOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *FileOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("FileOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *FileOrderFieldName
	case "CONTENT_TYPE":
		*f = *FileOrderFieldContentType
	case "SIZE":
		*f = *FileOrderFieldSize
	case "LOCATION":
		*f = *FileOrderFieldLocation
	case "BUCKET":
		*f = *FileOrderFieldBucket
	case "PATH":
		*f = *FileOrderFieldPath
	case "CREATED_AT":
		*f = *FileOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *FileOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid FileOrderField", str)
	}
	return nil
}

// FileOrderField defines the ordering field of File.
type FileOrderField struct {
	// Value extracts the ordering value from the given File.
	Value    func(*File) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) file.OrderOption
	toCursor func(*File) Cursor
}

// FileOrder defines the ordering of File.
type FileOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *FileOrderField `json:"field"`
}

// DefaultFileOrder is the default ordering of File.
var DefaultFileOrder = &FileOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &FileOrderField{
		Value: func(f *File) (ent.Value, error) {
			return f.ID, nil
		},
		column: file.FieldID,
		toTerm: file.ByID,
		toCursor: func(f *File) Cursor {
			return Cursor{ID: f.ID}
		},
	},
}

// ToEdge converts File into FileEdge.
func (f *File) ToEdge(order *FileOrder) *FileEdge {
	if order == nil {
		order = DefaultFileOrder
	}
	return &FileEdge{
		Node:   f,
		Cursor: order.Field.toCursor(f),
	}
}

// MessageEdge is the edge representation of Message.
type MessageEdge struct {
	Node   *Message `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// MessageConnection is the connection containing edges to Message.
type MessageConnection struct {
	Edges      []*MessageEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *MessageConnection) build(nodes []*Message, pager *messagePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Message
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Message {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Message {
			return nodes[i]
		}
	}
	c.Edges = make([]*MessageEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MessageEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MessagePaginateOption enables pagination customization.
type MessagePaginateOption func(*messagePager) error

// WithMessageOrder configures pagination ordering.
func WithMessageOrder(order []*MessageOrder) MessagePaginateOption {
	return func(pager *messagePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithMessageFilter configures pagination filter.
func WithMessageFilter(filter func(*MessageQuery) (*MessageQuery, error)) MessagePaginateOption {
	return func(pager *messagePager) error {
		if filter == nil {
			return errors.New("MessageQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messagePager struct {
	reverse bool
	order   []*MessageOrder
	filter  func(*MessageQuery) (*MessageQuery, error)
}

func newMessagePager(opts []MessagePaginateOption, reverse bool) (*messagePager, error) {
	pager := &messagePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *messagePager) applyFilter(query *MessageQuery) (*MessageQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messagePager) toCursor(m *Message) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(m).Value)
	}
	return Cursor{ID: m.ID, Value: cs_}
}

func (p *messagePager) applyCursors(query *MessageQuery, after, before *Cursor) (*MessageQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultMessageOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *messagePager) applyOrder(query *MessageQuery) *MessageQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultMessageOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultMessageOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *messagePager) orderExpr(query *MessageQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultMessageOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Message.
func (m *MessageQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessagePaginateOption,
) (*MessageConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessagePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MessageConnection{Edges: []*MessageEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MessageOrderFieldCreatedAt orders Message by created_at.
	MessageOrderFieldCreatedAt = &MessageOrderField{
		Value: func(m *Message) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: message.FieldCreatedAt,
		toTerm: message.ByCreatedAt,
		toCursor: func(m *Message) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
	// MessageOrderFieldUpdatedAt orders Message by updated_at.
	MessageOrderFieldUpdatedAt = &MessageOrderField{
		Value: func(m *Message) (ent.Value, error) {
			return m.UpdatedAt, nil
		},
		column: message.FieldUpdatedAt,
		toTerm: message.ByUpdatedAt,
		toCursor: func(m *Message) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageOrderField) String() string {
	var str string
	switch f.column {
	case MessageOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case MessageOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *MessageOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MessageOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MessageOrderField", str)
	}
	return nil
}

// MessageOrderField defines the ordering field of Message.
type MessageOrderField struct {
	// Value extracts the ordering value from the given Message.
	Value    func(*Message) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) message.OrderOption
	toCursor func(*Message) Cursor
}

// MessageOrder defines the ordering of Message.
type MessageOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *MessageOrderField `json:"field"`
}

// DefaultMessageOrder is the default ordering of Message.
var DefaultMessageOrder = &MessageOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MessageOrderField{
		Value: func(m *Message) (ent.Value, error) {
			return m.ID, nil
		},
		column: message.FieldID,
		toTerm: message.ByID,
		toCursor: func(m *Message) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Message into MessageEdge.
func (m *Message) ToEdge(order *MessageOrder) *MessageEdge {
	if order == nil {
		order = DefaultMessageOrder
	}
	return &MessageEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// MessageAttachmentEdge is the edge representation of MessageAttachment.
type MessageAttachmentEdge struct {
	Node   *MessageAttachment `json:"node"`
	Cursor Cursor             `json:"cursor"`
}

// MessageAttachmentConnection is the connection containing edges to MessageAttachment.
type MessageAttachmentConnection struct {
	Edges      []*MessageAttachmentEdge `json:"edges"`
	PageInfo   PageInfo                 `json:"pageInfo"`
	TotalCount int                      `json:"totalCount"`
}

func (c *MessageAttachmentConnection) build(nodes []*MessageAttachment, pager *messageattachmentPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MessageAttachment
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MessageAttachment {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MessageAttachment {
			return nodes[i]
		}
	}
	c.Edges = make([]*MessageAttachmentEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MessageAttachmentEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MessageAttachmentPaginateOption enables pagination customization.
type MessageAttachmentPaginateOption func(*messageattachmentPager) error

// WithMessageAttachmentOrder configures pagination ordering.
func WithMessageAttachmentOrder(order []*MessageAttachmentOrder) MessageAttachmentPaginateOption {
	return func(pager *messageattachmentPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithMessageAttachmentFilter configures pagination filter.
func WithMessageAttachmentFilter(filter func(*MessageAttachmentQuery) (*MessageAttachmentQuery, error)) MessageAttachmentPaginateOption {
	return func(pager *messageattachmentPager) error {
		if filter == nil {
			return errors.New("MessageAttachmentQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messageattachmentPager struct {
	reverse bool
	order   []*MessageAttachmentOrder
	filter  func(*MessageAttachmentQuery) (*MessageAttachmentQuery, error)
}

func newMessageAttachmentPager(opts []MessageAttachmentPaginateOption, reverse bool) (*messageattachmentPager, error) {
	pager := &messageattachmentPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *messageattachmentPager) applyFilter(query *MessageAttachmentQuery) (*MessageAttachmentQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messageattachmentPager) toCursor(ma *MessageAttachment) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(ma).Value)
	}
	return Cursor{ID: ma.ID, Value: cs_}
}

func (p *messageattachmentPager) applyCursors(query *MessageAttachmentQuery, after, before *Cursor) (*MessageAttachmentQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultMessageAttachmentOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *messageattachmentPager) applyOrder(query *MessageAttachmentQuery) *MessageAttachmentQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultMessageAttachmentOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultMessageAttachmentOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *messageattachmentPager) orderExpr(query *MessageAttachmentQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultMessageAttachmentOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to MessageAttachment.
func (ma *MessageAttachmentQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessageAttachmentPaginateOption,
) (*MessageAttachmentConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessageAttachmentPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ma, err = pager.applyFilter(ma); err != nil {
		return nil, err
	}
	conn := &MessageAttachmentConnection{Edges: []*MessageAttachmentEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ma.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ma, err = pager.applyCursors(ma, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ma.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ma.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ma = pager.applyOrder(ma)
	nodes, err := ma.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MessageAttachmentOrderFieldType orders MessageAttachment by type.
	MessageAttachmentOrderFieldType = &MessageAttachmentOrderField{
		Value: func(ma *MessageAttachment) (ent.Value, error) {
			return ma.Type, nil
		},
		column: messageattachment.FieldType,
		toTerm: messageattachment.ByType,
		toCursor: func(ma *MessageAttachment) Cursor {
			return Cursor{
				ID:    ma.ID,
				Value: ma.Type,
			}
		},
	}
	// MessageAttachmentOrderFieldOrder orders MessageAttachment by order.
	MessageAttachmentOrderFieldOrder = &MessageAttachmentOrderField{
		Value: func(ma *MessageAttachment) (ent.Value, error) {
			return ma.Order, nil
		},
		column: messageattachment.FieldOrder,
		toTerm: messageattachment.ByOrder,
		toCursor: func(ma *MessageAttachment) Cursor {
			return Cursor{
				ID:    ma.ID,
				Value: ma.Order,
			}
		},
	}
	// MessageAttachmentOrderFieldAttachedAt orders MessageAttachment by attached_at.
	MessageAttachmentOrderFieldAttachedAt = &MessageAttachmentOrderField{
		Value: func(ma *MessageAttachment) (ent.Value, error) {
			return ma.AttachedAt, nil
		},
		column: messageattachment.FieldAttachedAt,
		toTerm: messageattachment.ByAttachedAt,
		toCursor: func(ma *MessageAttachment) Cursor {
			return Cursor{
				ID:    ma.ID,
				Value: ma.AttachedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageAttachmentOrderField) String() string {
	var str string
	switch f.column {
	case MessageAttachmentOrderFieldType.column:
		str = "TYPE"
	case MessageAttachmentOrderFieldOrder.column:
		str = "ORDER"
	case MessageAttachmentOrderFieldAttachedAt.column:
		str = "ATTACHED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageAttachmentOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageAttachmentOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageAttachmentOrderField %T must be a string", v)
	}
	switch str {
	case "TYPE":
		*f = *MessageAttachmentOrderFieldType
	case "ORDER":
		*f = *MessageAttachmentOrderFieldOrder
	case "ATTACHED_AT":
		*f = *MessageAttachmentOrderFieldAttachedAt
	default:
		return fmt.Errorf("%s is not a valid MessageAttachmentOrderField", str)
	}
	return nil
}

// MessageAttachmentOrderField defines the ordering field of MessageAttachment.
type MessageAttachmentOrderField struct {
	// Value extracts the ordering value from the given MessageAttachment.
	Value    func(*MessageAttachment) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) messageattachment.OrderOption
	toCursor func(*MessageAttachment) Cursor
}

// MessageAttachmentOrder defines the ordering of MessageAttachment.
type MessageAttachmentOrder struct {
	Direction OrderDirection               `json:"direction"`
	Field     *MessageAttachmentOrderField `json:"field"`
}

// DefaultMessageAttachmentOrder is the default ordering of MessageAttachment.
var DefaultMessageAttachmentOrder = &MessageAttachmentOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MessageAttachmentOrderField{
		Value: func(ma *MessageAttachment) (ent.Value, error) {
			return ma.ID, nil
		},
		column: messageattachment.FieldID,
		toTerm: messageattachment.ByID,
		toCursor: func(ma *MessageAttachment) Cursor {
			return Cursor{ID: ma.ID}
		},
	},
}

// ToEdge converts MessageAttachment into MessageAttachmentEdge.
func (ma *MessageAttachment) ToEdge(order *MessageAttachmentOrder) *MessageAttachmentEdge {
	if order == nil {
		order = DefaultMessageAttachmentOrder
	}
	return &MessageAttachmentEdge{
		Node:   ma,
		Cursor: order.Field.toCursor(ma),
	}
}

// MessageLinkEdge is the edge representation of MessageLink.
type MessageLinkEdge struct {
	Node   *MessageLink `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// MessageLinkConnection is the connection containing edges to MessageLink.
type MessageLinkConnection struct {
	Edges      []*MessageLinkEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *MessageLinkConnection) build(nodes []*MessageLink, pager *messagelinkPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MessageLink
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MessageLink {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MessageLink {
			return nodes[i]
		}
	}
	c.Edges = make([]*MessageLinkEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MessageLinkEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MessageLinkPaginateOption enables pagination customization.
type MessageLinkPaginateOption func(*messagelinkPager) error

// WithMessageLinkOrder configures pagination ordering.
func WithMessageLinkOrder(order []*MessageLinkOrder) MessageLinkPaginateOption {
	return func(pager *messagelinkPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithMessageLinkFilter configures pagination filter.
func WithMessageLinkFilter(filter func(*MessageLinkQuery) (*MessageLinkQuery, error)) MessageLinkPaginateOption {
	return func(pager *messagelinkPager) error {
		if filter == nil {
			return errors.New("MessageLinkQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messagelinkPager struct {
	reverse bool
	order   []*MessageLinkOrder
	filter  func(*MessageLinkQuery) (*MessageLinkQuery, error)
}

func newMessageLinkPager(opts []MessageLinkPaginateOption, reverse bool) (*messagelinkPager, error) {
	pager := &messagelinkPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *messagelinkPager) applyFilter(query *MessageLinkQuery) (*MessageLinkQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messagelinkPager) toCursor(ml *MessageLink) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(ml).Value)
	}
	return Cursor{ID: ml.ID, Value: cs_}
}

func (p *messagelinkPager) applyCursors(query *MessageLinkQuery, after, before *Cursor) (*MessageLinkQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultMessageLinkOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *messagelinkPager) applyOrder(query *MessageLinkQuery) *MessageLinkQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultMessageLinkOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultMessageLinkOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *messagelinkPager) orderExpr(query *MessageLinkQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultMessageLinkOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to MessageLink.
func (ml *MessageLinkQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessageLinkPaginateOption,
) (*MessageLinkConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessageLinkPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ml, err = pager.applyFilter(ml); err != nil {
		return nil, err
	}
	conn := &MessageLinkConnection{Edges: []*MessageLinkEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ml.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ml, err = pager.applyCursors(ml, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ml.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ml.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ml = pager.applyOrder(ml)
	nodes, err := ml.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MessageLinkOrderFieldLink orders MessageLink by link.
	MessageLinkOrderFieldLink = &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.Link, nil
		},
		column: messagelink.FieldLink,
		toTerm: messagelink.ByLink,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{
				ID:    ml.ID,
				Value: ml.Link,
			}
		},
	}
	// MessageLinkOrderFieldTitle orders MessageLink by title.
	MessageLinkOrderFieldTitle = &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.Title, nil
		},
		column: messagelink.FieldTitle,
		toTerm: messagelink.ByTitle,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{
				ID:    ml.ID,
				Value: ml.Title,
			}
		},
	}
	// MessageLinkOrderFieldDescription orders MessageLink by description.
	MessageLinkOrderFieldDescription = &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.Description, nil
		},
		column: messagelink.FieldDescription,
		toTerm: messagelink.ByDescription,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{
				ID:    ml.ID,
				Value: ml.Description,
			}
		},
	}
	// MessageLinkOrderFieldImageURL orders MessageLink by image_url.
	MessageLinkOrderFieldImageURL = &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.ImageURL, nil
		},
		column: messagelink.FieldImageURL,
		toTerm: messagelink.ByImageURL,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{
				ID:    ml.ID,
				Value: ml.ImageURL,
			}
		},
	}
	// MessageLinkOrderFieldCreatedAt orders MessageLink by created_at.
	MessageLinkOrderFieldCreatedAt = &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.CreatedAt, nil
		},
		column: messagelink.FieldCreatedAt,
		toTerm: messagelink.ByCreatedAt,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{
				ID:    ml.ID,
				Value: ml.CreatedAt,
			}
		},
	}
	// MessageLinkOrderFieldUpdatedAt orders MessageLink by updated_at.
	MessageLinkOrderFieldUpdatedAt = &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.UpdatedAt, nil
		},
		column: messagelink.FieldUpdatedAt,
		toTerm: messagelink.ByUpdatedAt,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{
				ID:    ml.ID,
				Value: ml.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageLinkOrderField) String() string {
	var str string
	switch f.column {
	case MessageLinkOrderFieldLink.column:
		str = "LINK"
	case MessageLinkOrderFieldTitle.column:
		str = "TITLE"
	case MessageLinkOrderFieldDescription.column:
		str = "DESCRIPTION"
	case MessageLinkOrderFieldImageURL.column:
		str = "IMAGE_URL"
	case MessageLinkOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case MessageLinkOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageLinkOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageLinkOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageLinkOrderField %T must be a string", v)
	}
	switch str {
	case "LINK":
		*f = *MessageLinkOrderFieldLink
	case "TITLE":
		*f = *MessageLinkOrderFieldTitle
	case "DESCRIPTION":
		*f = *MessageLinkOrderFieldDescription
	case "IMAGE_URL":
		*f = *MessageLinkOrderFieldImageURL
	case "CREATED_AT":
		*f = *MessageLinkOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *MessageLinkOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid MessageLinkOrderField", str)
	}
	return nil
}

// MessageLinkOrderField defines the ordering field of MessageLink.
type MessageLinkOrderField struct {
	// Value extracts the ordering value from the given MessageLink.
	Value    func(*MessageLink) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) messagelink.OrderOption
	toCursor func(*MessageLink) Cursor
}

// MessageLinkOrder defines the ordering of MessageLink.
type MessageLinkOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *MessageLinkOrderField `json:"field"`
}

// DefaultMessageLinkOrder is the default ordering of MessageLink.
var DefaultMessageLinkOrder = &MessageLinkOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MessageLinkOrderField{
		Value: func(ml *MessageLink) (ent.Value, error) {
			return ml.ID, nil
		},
		column: messagelink.FieldID,
		toTerm: messagelink.ByID,
		toCursor: func(ml *MessageLink) Cursor {
			return Cursor{ID: ml.ID}
		},
	},
}

// ToEdge converts MessageLink into MessageLinkEdge.
func (ml *MessageLink) ToEdge(order *MessageLinkOrder) *MessageLinkEdge {
	if order == nil {
		order = DefaultMessageLinkOrder
	}
	return &MessageLinkEdge{
		Node:   ml,
		Cursor: order.Field.toCursor(ml),
	}
}

// MessageVoiceEdge is the edge representation of MessageVoice.
type MessageVoiceEdge struct {
	Node   *MessageVoice `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// MessageVoiceConnection is the connection containing edges to MessageVoice.
type MessageVoiceConnection struct {
	Edges      []*MessageVoiceEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *MessageVoiceConnection) build(nodes []*MessageVoice, pager *messagevoicePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *MessageVoice
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *MessageVoice {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *MessageVoice {
			return nodes[i]
		}
	}
	c.Edges = make([]*MessageVoiceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MessageVoiceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MessageVoicePaginateOption enables pagination customization.
type MessageVoicePaginateOption func(*messagevoicePager) error

// WithMessageVoiceOrder configures pagination ordering.
func WithMessageVoiceOrder(order []*MessageVoiceOrder) MessageVoicePaginateOption {
	return func(pager *messagevoicePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithMessageVoiceFilter configures pagination filter.
func WithMessageVoiceFilter(filter func(*MessageVoiceQuery) (*MessageVoiceQuery, error)) MessageVoicePaginateOption {
	return func(pager *messagevoicePager) error {
		if filter == nil {
			return errors.New("MessageVoiceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type messagevoicePager struct {
	reverse bool
	order   []*MessageVoiceOrder
	filter  func(*MessageVoiceQuery) (*MessageVoiceQuery, error)
}

func newMessageVoicePager(opts []MessageVoicePaginateOption, reverse bool) (*messagevoicePager, error) {
	pager := &messagevoicePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *messagevoicePager) applyFilter(query *MessageVoiceQuery) (*MessageVoiceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *messagevoicePager) toCursor(mv *MessageVoice) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(mv).Value)
	}
	return Cursor{ID: mv.ID, Value: cs_}
}

func (p *messagevoicePager) applyCursors(query *MessageVoiceQuery, after, before *Cursor) (*MessageVoiceQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultMessageVoiceOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *messagevoicePager) applyOrder(query *MessageVoiceQuery) *MessageVoiceQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultMessageVoiceOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultMessageVoiceOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *messagevoicePager) orderExpr(query *MessageVoiceQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultMessageVoiceOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to MessageVoice.
func (mv *MessageVoiceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MessageVoicePaginateOption,
) (*MessageVoiceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMessageVoicePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if mv, err = pager.applyFilter(mv); err != nil {
		return nil, err
	}
	conn := &MessageVoiceConnection{Edges: []*MessageVoiceEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := mv.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if mv, err = pager.applyCursors(mv, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		mv.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := mv.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	mv = pager.applyOrder(mv)
	nodes, err := mv.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MessageVoiceOrderFieldLength orders MessageVoice by length.
	MessageVoiceOrderFieldLength = &MessageVoiceOrderField{
		Value: func(mv *MessageVoice) (ent.Value, error) {
			return mv.Length, nil
		},
		column: messagevoice.FieldLength,
		toTerm: messagevoice.ByLength,
		toCursor: func(mv *MessageVoice) Cursor {
			return Cursor{
				ID:    mv.ID,
				Value: mv.Length,
			}
		},
	}
	// MessageVoiceOrderFieldAttachedAt orders MessageVoice by attached_at.
	MessageVoiceOrderFieldAttachedAt = &MessageVoiceOrderField{
		Value: func(mv *MessageVoice) (ent.Value, error) {
			return mv.AttachedAt, nil
		},
		column: messagevoice.FieldAttachedAt,
		toTerm: messagevoice.ByAttachedAt,
		toCursor: func(mv *MessageVoice) Cursor {
			return Cursor{
				ID:    mv.ID,
				Value: mv.AttachedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MessageVoiceOrderField) String() string {
	var str string
	switch f.column {
	case MessageVoiceOrderFieldLength.column:
		str = "LENGTH"
	case MessageVoiceOrderFieldAttachedAt.column:
		str = "ATTACHED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MessageVoiceOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MessageVoiceOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MessageVoiceOrderField %T must be a string", v)
	}
	switch str {
	case "LENGTH":
		*f = *MessageVoiceOrderFieldLength
	case "ATTACHED_AT":
		*f = *MessageVoiceOrderFieldAttachedAt
	default:
		return fmt.Errorf("%s is not a valid MessageVoiceOrderField", str)
	}
	return nil
}

// MessageVoiceOrderField defines the ordering field of MessageVoice.
type MessageVoiceOrderField struct {
	// Value extracts the ordering value from the given MessageVoice.
	Value    func(*MessageVoice) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) messagevoice.OrderOption
	toCursor func(*MessageVoice) Cursor
}

// MessageVoiceOrder defines the ordering of MessageVoice.
type MessageVoiceOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *MessageVoiceOrderField `json:"field"`
}

// DefaultMessageVoiceOrder is the default ordering of MessageVoice.
var DefaultMessageVoiceOrder = &MessageVoiceOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MessageVoiceOrderField{
		Value: func(mv *MessageVoice) (ent.Value, error) {
			return mv.ID, nil
		},
		column: messagevoice.FieldID,
		toTerm: messagevoice.ByID,
		toCursor: func(mv *MessageVoice) Cursor {
			return Cursor{ID: mv.ID}
		},
	},
}

// ToEdge converts MessageVoice into MessageVoiceEdge.
func (mv *MessageVoice) ToEdge(order *MessageVoiceOrder) *MessageVoiceEdge {
	if order == nil {
		order = DefaultMessageVoiceOrder
	}
	return &MessageVoiceEdge{
		Node:   mv,
		Cursor: order.Field.toCursor(mv),
	}
}

// NotificationEdge is the edge representation of Notification.
type NotificationEdge struct {
	Node   *Notification `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// NotificationConnection is the connection containing edges to Notification.
type NotificationConnection struct {
	Edges      []*NotificationEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *NotificationConnection) build(nodes []*Notification, pager *notificationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Notification
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Notification {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Notification {
			return nodes[i]
		}
	}
	c.Edges = make([]*NotificationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &NotificationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// NotificationPaginateOption enables pagination customization.
type NotificationPaginateOption func(*notificationPager) error

// WithNotificationOrder configures pagination ordering.
func WithNotificationOrder(order []*NotificationOrder) NotificationPaginateOption {
	return func(pager *notificationPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithNotificationFilter configures pagination filter.
func WithNotificationFilter(filter func(*NotificationQuery) (*NotificationQuery, error)) NotificationPaginateOption {
	return func(pager *notificationPager) error {
		if filter == nil {
			return errors.New("NotificationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type notificationPager struct {
	reverse bool
	order   []*NotificationOrder
	filter  func(*NotificationQuery) (*NotificationQuery, error)
}

func newNotificationPager(opts []NotificationPaginateOption, reverse bool) (*notificationPager, error) {
	pager := &notificationPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *notificationPager) applyFilter(query *NotificationQuery) (*NotificationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *notificationPager) toCursor(n *Notification) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(n).Value)
	}
	return Cursor{ID: n.ID, Value: cs_}
}

func (p *notificationPager) applyCursors(query *NotificationQuery, after, before *Cursor) (*NotificationQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultNotificationOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *notificationPager) applyOrder(query *NotificationQuery) *NotificationQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultNotificationOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultNotificationOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *notificationPager) orderExpr(query *NotificationQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultNotificationOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Notification.
func (n *NotificationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...NotificationPaginateOption,
) (*NotificationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newNotificationPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if n, err = pager.applyFilter(n); err != nil {
		return nil, err
	}
	conn := &NotificationConnection{Edges: []*NotificationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := n.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if n, err = pager.applyCursors(n, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		n.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := n.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	n = pager.applyOrder(n)
	nodes, err := n.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// NotificationOrderFieldTitle orders Notification by title.
	NotificationOrderFieldTitle = &NotificationOrderField{
		Value: func(n *Notification) (ent.Value, error) {
			return n.Title, nil
		},
		column: notification.FieldTitle,
		toTerm: notification.ByTitle,
		toCursor: func(n *Notification) Cursor {
			return Cursor{
				ID:    n.ID,
				Value: n.Title,
			}
		},
	}
	// NotificationOrderFieldCreatedAt orders Notification by created_at.
	NotificationOrderFieldCreatedAt = &NotificationOrderField{
		Value: func(n *Notification) (ent.Value, error) {
			return n.CreatedAt, nil
		},
		column: notification.FieldCreatedAt,
		toTerm: notification.ByCreatedAt,
		toCursor: func(n *Notification) Cursor {
			return Cursor{
				ID:    n.ID,
				Value: n.CreatedAt,
			}
		},
	}
	// NotificationOrderFieldUpdatedAt orders Notification by updated_at.
	NotificationOrderFieldUpdatedAt = &NotificationOrderField{
		Value: func(n *Notification) (ent.Value, error) {
			return n.UpdatedAt, nil
		},
		column: notification.FieldUpdatedAt,
		toTerm: notification.ByUpdatedAt,
		toCursor: func(n *Notification) Cursor {
			return Cursor{
				ID:    n.ID,
				Value: n.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f NotificationOrderField) String() string {
	var str string
	switch f.column {
	case NotificationOrderFieldTitle.column:
		str = "TITLE"
	case NotificationOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case NotificationOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f NotificationOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *NotificationOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("NotificationOrderField %T must be a string", v)
	}
	switch str {
	case "TITLE":
		*f = *NotificationOrderFieldTitle
	case "CREATED_AT":
		*f = *NotificationOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *NotificationOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid NotificationOrderField", str)
	}
	return nil
}

// NotificationOrderField defines the ordering field of Notification.
type NotificationOrderField struct {
	// Value extracts the ordering value from the given Notification.
	Value    func(*Notification) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) notification.OrderOption
	toCursor func(*Notification) Cursor
}

// NotificationOrder defines the ordering of Notification.
type NotificationOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *NotificationOrderField `json:"field"`
}

// DefaultNotificationOrder is the default ordering of Notification.
var DefaultNotificationOrder = &NotificationOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &NotificationOrderField{
		Value: func(n *Notification) (ent.Value, error) {
			return n.ID, nil
		},
		column: notification.FieldID,
		toTerm: notification.ByID,
		toCursor: func(n *Notification) Cursor {
			return Cursor{ID: n.ID}
		},
	},
}

// ToEdge converts Notification into NotificationEdge.
func (n *Notification) ToEdge(order *NotificationOrder) *NotificationEdge {
	if order == nil {
		order = DefaultNotificationOrder
	}
	return &NotificationEdge{
		Node:   n,
		Cursor: order.Field.toCursor(n),
	}
}

// RoomEdge is the edge representation of Room.
type RoomEdge struct {
	Node   *Room  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// RoomConnection is the connection containing edges to Room.
type RoomConnection struct {
	Edges      []*RoomEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *RoomConnection) build(nodes []*Room, pager *roomPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Room
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Room {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Room {
			return nodes[i]
		}
	}
	c.Edges = make([]*RoomEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RoomEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RoomPaginateOption enables pagination customization.
type RoomPaginateOption func(*roomPager) error

// WithRoomOrder configures pagination ordering.
func WithRoomOrder(order []*RoomOrder) RoomPaginateOption {
	return func(pager *roomPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithRoomFilter configures pagination filter.
func WithRoomFilter(filter func(*RoomQuery) (*RoomQuery, error)) RoomPaginateOption {
	return func(pager *roomPager) error {
		if filter == nil {
			return errors.New("RoomQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type roomPager struct {
	reverse bool
	order   []*RoomOrder
	filter  func(*RoomQuery) (*RoomQuery, error)
}

func newRoomPager(opts []RoomPaginateOption, reverse bool) (*roomPager, error) {
	pager := &roomPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *roomPager) applyFilter(query *RoomQuery) (*RoomQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *roomPager) toCursor(r *Room) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(r).Value)
	}
	return Cursor{ID: r.ID, Value: cs_}
}

func (p *roomPager) applyCursors(query *RoomQuery, after, before *Cursor) (*RoomQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultRoomOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *roomPager) applyOrder(query *RoomQuery) *RoomQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultRoomOrder.Field.column {
			defaultOrdered = true
		}
		switch o.Field.column {
		case RoomOrderFieldLastMessageCreatedAt.column:
		default:
			if len(query.ctx.Fields) > 0 {
				query.ctx.AppendFieldOnce(o.Field.column)
			}
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultRoomOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *roomPager) orderExpr(query *RoomQuery) sql.Querier {
	for _, o := range p.order {
		switch o.Field.column {
		case RoomOrderFieldLastMessageCreatedAt.column:
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		default:
			if len(query.ctx.Fields) > 0 {
				query.ctx.AppendFieldOnce(o.Field.column)
			}
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultRoomOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Room.
func (r *RoomQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RoomPaginateOption,
) (*RoomConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRoomPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if r, err = pager.applyFilter(r); err != nil {
		return nil, err
	}
	conn := &RoomConnection{Edges: []*RoomEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := r.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if r, err = pager.applyCursors(r, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		r.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := r.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	r = pager.applyOrder(r)
	nodes, err := r.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RoomOrderFieldName orders Room by name.
	RoomOrderFieldName = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.Name, nil
		},
		column: room.FieldName,
		toTerm: room.ByName,
		toCursor: func(r *Room) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Name,
			}
		},
	}
	// RoomOrderFieldDescription orders Room by description.
	RoomOrderFieldDescription = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.Description, nil
		},
		column: room.FieldDescription,
		toTerm: room.ByDescription,
		toCursor: func(r *Room) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Description,
			}
		},
	}
	// RoomOrderFieldVersion orders Room by version.
	RoomOrderFieldVersion = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.Version, nil
		},
		column: room.FieldVersion,
		toTerm: room.ByVersion,
		toCursor: func(r *Room) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Version,
			}
		},
	}
	// RoomOrderFieldType orders Room by type.
	RoomOrderFieldType = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.Type, nil
		},
		column: room.FieldType,
		toTerm: room.ByType,
		toCursor: func(r *Room) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.Type,
			}
		},
	}
	// RoomOrderFieldCreatedAt orders Room by created_at.
	RoomOrderFieldCreatedAt = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.CreatedAt, nil
		},
		column: room.FieldCreatedAt,
		toTerm: room.ByCreatedAt,
		toCursor: func(r *Room) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.CreatedAt,
			}
		},
	}
	// RoomOrderFieldUpdatedAt orders Room by updated_at.
	RoomOrderFieldUpdatedAt = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.UpdatedAt, nil
		},
		column: room.FieldUpdatedAt,
		toTerm: room.ByUpdatedAt,
		toCursor: func(r *Room) Cursor {
			return Cursor{
				ID:    r.ID,
				Value: r.UpdatedAt,
			}
		},
	}
	// RoomOrderFieldLastMessageCreatedAt orders by LAST_MESSAGE_CREATED_AT.
	RoomOrderFieldLastMessageCreatedAt = &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.Value("last_message_created_at")
		},
		column: "last_message_created_at",
		toTerm: func(opts ...sql.OrderTermOption) room.OrderOption {
			return room.ByLastMessageField(
				message.FieldCreatedAt,
				append(opts, sql.OrderSelectAs("last_message_created_at"))...,
			)
		},
		toCursor: func(r *Room) Cursor {
			cv, _ := r.Value("last_message_created_at")
			return Cursor{
				ID:    r.ID,
				Value: cv,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RoomOrderField) String() string {
	var str string
	switch f.column {
	case RoomOrderFieldName.column:
		str = "NAME"
	case RoomOrderFieldDescription.column:
		str = "DESCRIPTION"
	case RoomOrderFieldVersion.column:
		str = "VERSION"
	case RoomOrderFieldType.column:
		str = "TYPE"
	case RoomOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case RoomOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case RoomOrderFieldLastMessageCreatedAt.column:
		str = "LAST_MESSAGE_CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RoomOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RoomOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RoomOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *RoomOrderFieldName
	case "DESCRIPTION":
		*f = *RoomOrderFieldDescription
	case "VERSION":
		*f = *RoomOrderFieldVersion
	case "TYPE":
		*f = *RoomOrderFieldType
	case "CREATED_AT":
		*f = *RoomOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *RoomOrderFieldUpdatedAt
	case "LAST_MESSAGE_CREATED_AT":
		*f = *RoomOrderFieldLastMessageCreatedAt
	default:
		return fmt.Errorf("%s is not a valid RoomOrderField", str)
	}
	return nil
}

// RoomOrderField defines the ordering field of Room.
type RoomOrderField struct {
	// Value extracts the ordering value from the given Room.
	Value    func(*Room) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) room.OrderOption
	toCursor func(*Room) Cursor
}

// RoomOrder defines the ordering of Room.
type RoomOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *RoomOrderField `json:"field"`
}

// DefaultRoomOrder is the default ordering of Room.
var DefaultRoomOrder = &RoomOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RoomOrderField{
		Value: func(r *Room) (ent.Value, error) {
			return r.ID, nil
		},
		column: room.FieldID,
		toTerm: room.ByID,
		toCursor: func(r *Room) Cursor {
			return Cursor{ID: r.ID}
		},
	},
}

// ToEdge converts Room into RoomEdge.
func (r *Room) ToEdge(order *RoomOrder) *RoomEdge {
	if order == nil {
		order = DefaultRoomOrder
	}
	return &RoomEdge{
		Node:   r,
		Cursor: order.Field.toCursor(r),
	}
}

// RoomMemberEdge is the edge representation of RoomMember.
type RoomMemberEdge struct {
	Node   *RoomMember `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// RoomMemberConnection is the connection containing edges to RoomMember.
type RoomMemberConnection struct {
	Edges      []*RoomMemberEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *RoomMemberConnection) build(nodes []*RoomMember, pager *roommemberPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *RoomMember
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *RoomMember {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *RoomMember {
			return nodes[i]
		}
	}
	c.Edges = make([]*RoomMemberEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RoomMemberEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RoomMemberPaginateOption enables pagination customization.
type RoomMemberPaginateOption func(*roommemberPager) error

// WithRoomMemberOrder configures pagination ordering.
func WithRoomMemberOrder(order []*RoomMemberOrder) RoomMemberPaginateOption {
	return func(pager *roommemberPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithRoomMemberFilter configures pagination filter.
func WithRoomMemberFilter(filter func(*RoomMemberQuery) (*RoomMemberQuery, error)) RoomMemberPaginateOption {
	return func(pager *roommemberPager) error {
		if filter == nil {
			return errors.New("RoomMemberQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type roommemberPager struct {
	reverse bool
	order   []*RoomMemberOrder
	filter  func(*RoomMemberQuery) (*RoomMemberQuery, error)
}

func newRoomMemberPager(opts []RoomMemberPaginateOption, reverse bool) (*roommemberPager, error) {
	pager := &roommemberPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *roommemberPager) applyFilter(query *RoomMemberQuery) (*RoomMemberQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *roommemberPager) toCursor(rm *RoomMember) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(rm).Value)
	}
	return Cursor{ID: rm.ID, Value: cs_}
}

func (p *roommemberPager) applyCursors(query *RoomMemberQuery, after, before *Cursor) (*RoomMemberQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultRoomMemberOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *roommemberPager) applyOrder(query *RoomMemberQuery) *RoomMemberQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultRoomMemberOrder.Field.column {
			defaultOrdered = true
		}
		switch o.Field.column {
		case RoomMemberOrderFieldRoomUpdatedAt.column:
		default:
			if len(query.ctx.Fields) > 0 {
				query.ctx.AppendFieldOnce(o.Field.column)
			}
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultRoomMemberOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *roommemberPager) orderExpr(query *RoomMemberQuery) sql.Querier {
	for _, o := range p.order {
		switch o.Field.column {
		case RoomMemberOrderFieldRoomUpdatedAt.column:
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		default:
			if len(query.ctx.Fields) > 0 {
				query.ctx.AppendFieldOnce(o.Field.column)
			}
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultRoomMemberOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to RoomMember.
func (rm *RoomMemberQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RoomMemberPaginateOption,
) (*RoomMemberConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRoomMemberPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if rm, err = pager.applyFilter(rm); err != nil {
		return nil, err
	}
	conn := &RoomMemberConnection{Edges: []*RoomMemberEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := rm.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if rm, err = pager.applyCursors(rm, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		rm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := rm.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	rm = pager.applyOrder(rm)
	nodes, err := rm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RoomMemberOrderFieldName orders RoomMember by name.
	RoomMemberOrderFieldName = &RoomMemberOrderField{
		Value: func(rm *RoomMember) (ent.Value, error) {
			return rm.Name, nil
		},
		column: roommember.FieldName,
		toTerm: roommember.ByName,
		toCursor: func(rm *RoomMember) Cursor {
			return Cursor{
				ID:    rm.ID,
				Value: rm.Name,
			}
		},
	}
	// RoomMemberOrderFieldUnreadMessagesCount orders RoomMember by unread_messages_count.
	RoomMemberOrderFieldUnreadMessagesCount = &RoomMemberOrderField{
		Value: func(rm *RoomMember) (ent.Value, error) {
			return rm.UnreadMessagesCount, nil
		},
		column: roommember.FieldUnreadMessagesCount,
		toTerm: roommember.ByUnreadMessagesCount,
		toCursor: func(rm *RoomMember) Cursor {
			return Cursor{
				ID:    rm.ID,
				Value: rm.UnreadMessagesCount,
			}
		},
	}
	// RoomMemberOrderFieldJoinedAt orders RoomMember by joined_at.
	RoomMemberOrderFieldJoinedAt = &RoomMemberOrderField{
		Value: func(rm *RoomMember) (ent.Value, error) {
			return rm.JoinedAt, nil
		},
		column: roommember.FieldJoinedAt,
		toTerm: roommember.ByJoinedAt,
		toCursor: func(rm *RoomMember) Cursor {
			return Cursor{
				ID:    rm.ID,
				Value: rm.JoinedAt,
			}
		},
	}
	// RoomMemberOrderFieldUpdatedAt orders RoomMember by updated_at.
	RoomMemberOrderFieldUpdatedAt = &RoomMemberOrderField{
		Value: func(rm *RoomMember) (ent.Value, error) {
			return rm.UpdatedAt, nil
		},
		column: roommember.FieldUpdatedAt,
		toTerm: roommember.ByUpdatedAt,
		toCursor: func(rm *RoomMember) Cursor {
			return Cursor{
				ID:    rm.ID,
				Value: rm.UpdatedAt,
			}
		},
	}
	// RoomMemberOrderFieldRoomUpdatedAt orders by ROOM_UPDATED_AT.
	RoomMemberOrderFieldRoomUpdatedAt = &RoomMemberOrderField{
		Value: func(rm *RoomMember) (ent.Value, error) {
			return rm.Value("room_updated_at")
		},
		column: "room_updated_at",
		toTerm: func(opts ...sql.OrderTermOption) roommember.OrderOption {
			return roommember.ByRoomField(
				room.FieldUpdatedAt,
				append(opts, sql.OrderSelectAs("room_updated_at"))...,
			)
		},
		toCursor: func(rm *RoomMember) Cursor {
			cv, _ := rm.Value("room_updated_at")
			return Cursor{
				ID:    rm.ID,
				Value: cv,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RoomMemberOrderField) String() string {
	var str string
	switch f.column {
	case RoomMemberOrderFieldName.column:
		str = "NAME"
	case RoomMemberOrderFieldUnreadMessagesCount.column:
		str = "UNREAD_MESSAGES_COUNT"
	case RoomMemberOrderFieldJoinedAt.column:
		str = "JOINED_AT"
	case RoomMemberOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	case RoomMemberOrderFieldRoomUpdatedAt.column:
		str = "ROOM_UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RoomMemberOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RoomMemberOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RoomMemberOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *RoomMemberOrderFieldName
	case "UNREAD_MESSAGES_COUNT":
		*f = *RoomMemberOrderFieldUnreadMessagesCount
	case "JOINED_AT":
		*f = *RoomMemberOrderFieldJoinedAt
	case "UPDATED_AT":
		*f = *RoomMemberOrderFieldUpdatedAt
	case "ROOM_UPDATED_AT":
		*f = *RoomMemberOrderFieldRoomUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid RoomMemberOrderField", str)
	}
	return nil
}

// RoomMemberOrderField defines the ordering field of RoomMember.
type RoomMemberOrderField struct {
	// Value extracts the ordering value from the given RoomMember.
	Value    func(*RoomMember) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) roommember.OrderOption
	toCursor func(*RoomMember) Cursor
}

// RoomMemberOrder defines the ordering of RoomMember.
type RoomMemberOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *RoomMemberOrderField `json:"field"`
}

// DefaultRoomMemberOrder is the default ordering of RoomMember.
var DefaultRoomMemberOrder = &RoomMemberOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RoomMemberOrderField{
		Value: func(rm *RoomMember) (ent.Value, error) {
			return rm.ID, nil
		},
		column: roommember.FieldID,
		toTerm: roommember.ByID,
		toCursor: func(rm *RoomMember) Cursor {
			return Cursor{ID: rm.ID}
		},
	},
}

// ToEdge converts RoomMember into RoomMemberEdge.
func (rm *RoomMember) ToEdge(order *RoomMemberOrder) *RoomMemberEdge {
	if order == nil {
		order = DefaultRoomMemberOrder
	}
	return &RoomMemberEdge{
		Node:   rm,
		Cursor: order.Field.toCursor(rm),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order []*UserOrder) UserPaginateOption {
	return func(pager *userPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	reverse bool
	order   []*UserOrder
	filter  func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption, reverse bool) (*userPager, error) {
	pager := &userPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(u).Value)
	}
	return Cursor{ID: u.ID, Value: cs_}
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) (*UserQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultUserOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *userPager) applyOrder(query *UserQuery) *UserQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultUserOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultUserOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *userPager) orderExpr(query *UserQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultUserOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := u.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if u, err = pager.applyCursors(u, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	u = pager.applyOrder(u)
	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserOrderFieldFirstName orders User by first_name.
	UserOrderFieldFirstName = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.FirstName, nil
		},
		column: user.FieldFirstName,
		toTerm: user.ByFirstName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.FirstName,
			}
		},
	}
	// UserOrderFieldLastName orders User by last_name.
	UserOrderFieldLastName = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.LastName, nil
		},
		column: user.FieldLastName,
		toTerm: user.ByLastName,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.LastName,
			}
		},
	}
	// UserOrderFieldNickname orders User by nickname.
	UserOrderFieldNickname = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Nickname, nil
		},
		column: user.FieldNickname,
		toTerm: user.ByNickname,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Nickname,
			}
		},
	}
	// UserOrderFieldEmail orders User by email.
	UserOrderFieldEmail = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.Email, nil
		},
		column: user.FieldEmail,
		toTerm: user.ByEmail,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.Email,
			}
		},
	}
	// UserOrderFieldCreatedAt orders User by created_at.
	UserOrderFieldCreatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.CreatedAt, nil
		},
		column: user.FieldCreatedAt,
		toTerm: user.ByCreatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.CreatedAt,
			}
		},
	}
	// UserOrderFieldUpdatedAt orders User by updated_at.
	UserOrderFieldUpdatedAt = &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.UpdatedAt, nil
		},
		column: user.FieldUpdatedAt,
		toTerm: user.ByUpdatedAt,
		toCursor: func(u *User) Cursor {
			return Cursor{
				ID:    u.ID,
				Value: u.UpdatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserOrderField) String() string {
	var str string
	switch f.column {
	case UserOrderFieldFirstName.column:
		str = "FIRST_NAME"
	case UserOrderFieldLastName.column:
		str = "LAST_NAME"
	case UserOrderFieldNickname.column:
		str = "NICKNAME"
	case UserOrderFieldEmail.column:
		str = "EMAIL"
	case UserOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case UserOrderFieldUpdatedAt.column:
		str = "UPDATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserOrderField %T must be a string", v)
	}
	switch str {
	case "FIRST_NAME":
		*f = *UserOrderFieldFirstName
	case "LAST_NAME":
		*f = *UserOrderFieldLastName
	case "NICKNAME":
		*f = *UserOrderFieldNickname
	case "EMAIL":
		*f = *UserOrderFieldEmail
	case "CREATED_AT":
		*f = *UserOrderFieldCreatedAt
	case "UPDATED_AT":
		*f = *UserOrderFieldUpdatedAt
	default:
		return fmt.Errorf("%s is not a valid UserOrderField", str)
	}
	return nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	// Value extracts the ordering value from the given User.
	Value    func(*User) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) user.OrderOption
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserOrderField{
		Value: func(u *User) (ent.Value, error) {
			return u.ID, nil
		},
		column: user.FieldID,
		toTerm: user.ByID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}

// UserContactEdge is the edge representation of UserContact.
type UserContactEdge struct {
	Node   *UserContact `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// UserContactConnection is the connection containing edges to UserContact.
type UserContactConnection struct {
	Edges      []*UserContactEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *UserContactConnection) build(nodes []*UserContact, pager *usercontactPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *UserContact
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *UserContact {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *UserContact {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserContactEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserContactEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserContactPaginateOption enables pagination customization.
type UserContactPaginateOption func(*usercontactPager) error

// WithUserContactOrder configures pagination ordering.
func WithUserContactOrder(order []*UserContactOrder) UserContactPaginateOption {
	return func(pager *usercontactPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithUserContactFilter configures pagination filter.
func WithUserContactFilter(filter func(*UserContactQuery) (*UserContactQuery, error)) UserContactPaginateOption {
	return func(pager *usercontactPager) error {
		if filter == nil {
			return errors.New("UserContactQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type usercontactPager struct {
	reverse bool
	order   []*UserContactOrder
	filter  func(*UserContactQuery) (*UserContactQuery, error)
}

func newUserContactPager(opts []UserContactPaginateOption, reverse bool) (*usercontactPager, error) {
	pager := &usercontactPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *usercontactPager) applyFilter(query *UserContactQuery) (*UserContactQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *usercontactPager) toCursor(uc *UserContact) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(uc).Value)
	}
	return Cursor{ID: uc.ID, Value: cs_}
}

func (p *usercontactPager) applyCursors(query *UserContactQuery, after, before *Cursor) (*UserContactQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultUserContactOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *usercontactPager) applyOrder(query *UserContactQuery) *UserContactQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultUserContactOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultUserContactOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *usercontactPager) orderExpr(query *UserContactQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultUserContactOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to UserContact.
func (uc *UserContactQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserContactPaginateOption,
) (*UserContactConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserContactPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if uc, err = pager.applyFilter(uc); err != nil {
		return nil, err
	}
	conn := &UserContactConnection{Edges: []*UserContactEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := uc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if uc, err = pager.applyCursors(uc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		uc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := uc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	uc = pager.applyOrder(uc)
	nodes, err := uc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// UserContactOrderFieldCreatedAt orders UserContact by created_at.
	UserContactOrderFieldCreatedAt = &UserContactOrderField{
		Value: func(uc *UserContact) (ent.Value, error) {
			return uc.CreatedAt, nil
		},
		column: usercontact.FieldCreatedAt,
		toTerm: usercontact.ByCreatedAt,
		toCursor: func(uc *UserContact) Cursor {
			return Cursor{
				ID:    uc.ID,
				Value: uc.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f UserContactOrderField) String() string {
	var str string
	switch f.column {
	case UserContactOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f UserContactOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *UserContactOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("UserContactOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *UserContactOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid UserContactOrderField", str)
	}
	return nil
}

// UserContactOrderField defines the ordering field of UserContact.
type UserContactOrderField struct {
	// Value extracts the ordering value from the given UserContact.
	Value    func(*UserContact) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) usercontact.OrderOption
	toCursor func(*UserContact) Cursor
}

// UserContactOrder defines the ordering of UserContact.
type UserContactOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *UserContactOrderField `json:"field"`
}

// DefaultUserContactOrder is the default ordering of UserContact.
var DefaultUserContactOrder = &UserContactOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &UserContactOrderField{
		Value: func(uc *UserContact) (ent.Value, error) {
			return uc.ID, nil
		},
		column: usercontact.FieldID,
		toTerm: usercontact.ByID,
		toCursor: func(uc *UserContact) Cursor {
			return Cursor{ID: uc.ID}
		},
	},
}

// ToEdge converts UserContact into UserContactEdge.
func (uc *UserContact) ToEdge(order *UserContactOrder) *UserContactEdge {
	if order == nil {
		order = DefaultUserContactOrder
	}
	return &UserContactEdge{
		Node:   uc,
		Cursor: order.Field.toCursor(uc),
	}
}
