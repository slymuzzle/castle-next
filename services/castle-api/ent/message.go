// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/message"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges            MessageEdges `json:"edges"`
	message_reply_to *pulid.ID
	room_messages    *pulid.ID
	user_messages    *pulid.ID
	selectValues     sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// ReplyTo holds the value of the reply_to edge.
	ReplyTo *Message `json:"reply_to,omitempty"`
	// Attachments holds the value of the attachments edge.
	Attachments []*MessageAttachment `json:"attachments,omitempty"`
	// Links holds the value of the links edge.
	Links []*MessageLink `json:"links,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedAttachments map[string][]*MessageAttachment
	namedLinks       map[string][]*MessageLink
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// ReplyToOrErr returns the ReplyTo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ReplyToOrErr() (*Message, error) {
	if e.ReplyTo != nil {
		return e.ReplyTo, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "reply_to"}
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) AttachmentsOrErr() ([]*MessageAttachment, error) {
	if e.loadedTypes[3] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// LinksOrErr returns the Links value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) LinksOrErr() ([]*MessageLink, error) {
	if e.loadedTypes[4] {
		return e.Links, nil
	}
	return nil, &NotLoadedError{edge: "links"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			values[i] = new(pulid.ID)
		case message.FieldContent:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case message.ForeignKeys[0]: // message_reply_to
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case message.ForeignKeys[1]: // room_messages
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case message.ForeignKeys[2]: // user_messages
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				m.Content = value.String
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field message_reply_to", values[i])
			} else if value.Valid {
				m.message_reply_to = new(pulid.ID)
				*m.message_reply_to = *value.S.(*pulid.ID)
			}
		case message.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field room_messages", values[i])
			} else if value.Valid {
				m.room_messages = new(pulid.ID)
				*m.room_messages = *value.S.(*pulid.ID)
			}
		case message.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_messages", values[i])
			} else if value.Valid {
				m.user_messages = new(pulid.ID)
				*m.user_messages = *value.S.(*pulid.ID)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Message entity.
func (m *Message) QueryUser() *UserQuery {
	return NewMessageClient(m.config).QueryUser(m)
}

// QueryRoom queries the "room" edge of the Message entity.
func (m *Message) QueryRoom() *RoomQuery {
	return NewMessageClient(m.config).QueryRoom(m)
}

// QueryReplyTo queries the "reply_to" edge of the Message entity.
func (m *Message) QueryReplyTo() *MessageQuery {
	return NewMessageClient(m.config).QueryReplyTo(m)
}

// QueryAttachments queries the "attachments" edge of the Message entity.
func (m *Message) QueryAttachments() *MessageAttachmentQuery {
	return NewMessageClient(m.config).QueryAttachments(m)
}

// QueryLinks queries the "links" edge of the Message entity.
func (m *Message) QueryLinks() *MessageLinkQuery {
	return NewMessageClient(m.config).QueryLinks(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("content=")
	builder.WriteString(m.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedAttachments returns the Attachments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Message) NamedAttachments(name string) ([]*MessageAttachment, error) {
	if m.Edges.namedAttachments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedAttachments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Message) appendNamedAttachments(name string, edges ...*MessageAttachment) {
	if m.Edges.namedAttachments == nil {
		m.Edges.namedAttachments = make(map[string][]*MessageAttachment)
	}
	if len(edges) == 0 {
		m.Edges.namedAttachments[name] = []*MessageAttachment{}
	} else {
		m.Edges.namedAttachments[name] = append(m.Edges.namedAttachments[name], edges...)
	}
}

// NamedLinks returns the Links named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Message) NamedLinks(name string) ([]*MessageLink, error) {
	if m.Edges.namedLinks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedLinks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Message) appendNamedLinks(name string, edges ...*MessageLink) {
	if m.Edges.namedLinks == nil {
		m.Edges.namedLinks = make(map[string][]*MessageLink)
	}
	if len(edges) == 0 {
		m.Edges.namedLinks[name] = []*MessageLink{}
	} else {
		m.Edges.namedLinks[name] = append(m.Edges.namedLinks[name], edges...)
	}
}

// Messages is a parsable slice of Message.
type Messages []*Message
