// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageVoiceUpdate is the builder for updating MessageVoice entities.
type MessageVoiceUpdate struct {
	config
	hooks    []Hook
	mutation *MessageVoiceMutation
}

// Where appends a list predicates to the MessageVoiceUpdate builder.
func (mvu *MessageVoiceUpdate) Where(ps ...predicate.MessageVoice) *MessageVoiceUpdate {
	mvu.mutation.Where(ps...)
	return mvu
}

// SetLength sets the "length" field.
func (mvu *MessageVoiceUpdate) SetLength(i int) *MessageVoiceUpdate {
	mvu.mutation.ResetLength()
	mvu.mutation.SetLength(i)
	return mvu
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (mvu *MessageVoiceUpdate) SetNillableLength(i *int) *MessageVoiceUpdate {
	if i != nil {
		mvu.SetLength(*i)
	}
	return mvu
}

// AddLength adds i to the "length" field.
func (mvu *MessageVoiceUpdate) AddLength(i int) *MessageVoiceUpdate {
	mvu.mutation.AddLength(i)
	return mvu
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (mvu *MessageVoiceUpdate) SetRoomID(id pulid.ID) *MessageVoiceUpdate {
	mvu.mutation.SetRoomID(id)
	return mvu
}

// SetRoom sets the "room" edge to the Room entity.
func (mvu *MessageVoiceUpdate) SetRoom(r *Room) *MessageVoiceUpdate {
	return mvu.SetRoomID(r.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mvu *MessageVoiceUpdate) SetMessageID(id pulid.ID) *MessageVoiceUpdate {
	mvu.mutation.SetMessageID(id)
	return mvu
}

// SetMessage sets the "message" edge to the Message entity.
func (mvu *MessageVoiceUpdate) SetMessage(m *Message) *MessageVoiceUpdate {
	return mvu.SetMessageID(m.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mvu *MessageVoiceUpdate) SetFileID(id pulid.ID) *MessageVoiceUpdate {
	mvu.mutation.SetFileID(id)
	return mvu
}

// SetFile sets the "file" edge to the File entity.
func (mvu *MessageVoiceUpdate) SetFile(f *File) *MessageVoiceUpdate {
	return mvu.SetFileID(f.ID)
}

// Mutation returns the MessageVoiceMutation object of the builder.
func (mvu *MessageVoiceUpdate) Mutation() *MessageVoiceMutation {
	return mvu.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (mvu *MessageVoiceUpdate) ClearRoom() *MessageVoiceUpdate {
	mvu.mutation.ClearRoom()
	return mvu
}

// ClearMessage clears the "message" edge to the Message entity.
func (mvu *MessageVoiceUpdate) ClearMessage() *MessageVoiceUpdate {
	mvu.mutation.ClearMessage()
	return mvu
}

// ClearFile clears the "file" edge to the File entity.
func (mvu *MessageVoiceUpdate) ClearFile() *MessageVoiceUpdate {
	mvu.mutation.ClearFile()
	return mvu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mvu *MessageVoiceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mvu.sqlSave, mvu.mutation, mvu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvu *MessageVoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := mvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mvu *MessageVoiceUpdate) Exec(ctx context.Context) error {
	_, err := mvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvu *MessageVoiceUpdate) ExecX(ctx context.Context) {
	if err := mvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvu *MessageVoiceUpdate) check() error {
	if mvu.mutation.RoomCleared() && len(mvu.mutation.RoomIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageVoice.room"`)
	}
	if mvu.mutation.MessageCleared() && len(mvu.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageVoice.message"`)
	}
	if mvu.mutation.FileCleared() && len(mvu.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageVoice.file"`)
	}
	return nil
}

func (mvu *MessageVoiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mvu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagevoice.Table, messagevoice.Columns, sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString))
	if ps := mvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvu.mutation.Length(); ok {
		_spec.SetField(messagevoice.FieldLength, field.TypeInt, value)
	}
	if value, ok := mvu.mutation.AddedLength(); ok {
		_spec.AddField(messagevoice.FieldLength, field.TypeInt, value)
	}
	if mvu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagevoice.RoomTable,
			Columns: []string{messagevoice.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagevoice.RoomTable,
			Columns: []string{messagevoice.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.MessageTable,
			Columns: []string{messagevoice.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.MessageTable,
			Columns: []string{messagevoice.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.FileTable,
			Columns: []string{messagevoice.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.FileTable,
			Columns: []string{messagevoice.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagevoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mvu.mutation.done = true
	return n, nil
}

// MessageVoiceUpdateOne is the builder for updating a single MessageVoice entity.
type MessageVoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageVoiceMutation
}

// SetLength sets the "length" field.
func (mvuo *MessageVoiceUpdateOne) SetLength(i int) *MessageVoiceUpdateOne {
	mvuo.mutation.ResetLength()
	mvuo.mutation.SetLength(i)
	return mvuo
}

// SetNillableLength sets the "length" field if the given value is not nil.
func (mvuo *MessageVoiceUpdateOne) SetNillableLength(i *int) *MessageVoiceUpdateOne {
	if i != nil {
		mvuo.SetLength(*i)
	}
	return mvuo
}

// AddLength adds i to the "length" field.
func (mvuo *MessageVoiceUpdateOne) AddLength(i int) *MessageVoiceUpdateOne {
	mvuo.mutation.AddLength(i)
	return mvuo
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (mvuo *MessageVoiceUpdateOne) SetRoomID(id pulid.ID) *MessageVoiceUpdateOne {
	mvuo.mutation.SetRoomID(id)
	return mvuo
}

// SetRoom sets the "room" edge to the Room entity.
func (mvuo *MessageVoiceUpdateOne) SetRoom(r *Room) *MessageVoiceUpdateOne {
	return mvuo.SetRoomID(r.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mvuo *MessageVoiceUpdateOne) SetMessageID(id pulid.ID) *MessageVoiceUpdateOne {
	mvuo.mutation.SetMessageID(id)
	return mvuo
}

// SetMessage sets the "message" edge to the Message entity.
func (mvuo *MessageVoiceUpdateOne) SetMessage(m *Message) *MessageVoiceUpdateOne {
	return mvuo.SetMessageID(m.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mvuo *MessageVoiceUpdateOne) SetFileID(id pulid.ID) *MessageVoiceUpdateOne {
	mvuo.mutation.SetFileID(id)
	return mvuo
}

// SetFile sets the "file" edge to the File entity.
func (mvuo *MessageVoiceUpdateOne) SetFile(f *File) *MessageVoiceUpdateOne {
	return mvuo.SetFileID(f.ID)
}

// Mutation returns the MessageVoiceMutation object of the builder.
func (mvuo *MessageVoiceUpdateOne) Mutation() *MessageVoiceMutation {
	return mvuo.mutation
}

// ClearRoom clears the "room" edge to the Room entity.
func (mvuo *MessageVoiceUpdateOne) ClearRoom() *MessageVoiceUpdateOne {
	mvuo.mutation.ClearRoom()
	return mvuo
}

// ClearMessage clears the "message" edge to the Message entity.
func (mvuo *MessageVoiceUpdateOne) ClearMessage() *MessageVoiceUpdateOne {
	mvuo.mutation.ClearMessage()
	return mvuo
}

// ClearFile clears the "file" edge to the File entity.
func (mvuo *MessageVoiceUpdateOne) ClearFile() *MessageVoiceUpdateOne {
	mvuo.mutation.ClearFile()
	return mvuo
}

// Where appends a list predicates to the MessageVoiceUpdate builder.
func (mvuo *MessageVoiceUpdateOne) Where(ps ...predicate.MessageVoice) *MessageVoiceUpdateOne {
	mvuo.mutation.Where(ps...)
	return mvuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mvuo *MessageVoiceUpdateOne) Select(field string, fields ...string) *MessageVoiceUpdateOne {
	mvuo.fields = append([]string{field}, fields...)
	return mvuo
}

// Save executes the query and returns the updated MessageVoice entity.
func (mvuo *MessageVoiceUpdateOne) Save(ctx context.Context) (*MessageVoice, error) {
	return withHooks(ctx, mvuo.sqlSave, mvuo.mutation, mvuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mvuo *MessageVoiceUpdateOne) SaveX(ctx context.Context) *MessageVoice {
	node, err := mvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mvuo *MessageVoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := mvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mvuo *MessageVoiceUpdateOne) ExecX(ctx context.Context) {
	if err := mvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mvuo *MessageVoiceUpdateOne) check() error {
	if mvuo.mutation.RoomCleared() && len(mvuo.mutation.RoomIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageVoice.room"`)
	}
	if mvuo.mutation.MessageCleared() && len(mvuo.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageVoice.message"`)
	}
	if mvuo.mutation.FileCleared() && len(mvuo.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageVoice.file"`)
	}
	return nil
}

func (mvuo *MessageVoiceUpdateOne) sqlSave(ctx context.Context) (_node *MessageVoice, err error) {
	if err := mvuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagevoice.Table, messagevoice.Columns, sqlgraph.NewFieldSpec(messagevoice.FieldID, field.TypeString))
	id, ok := mvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageVoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagevoice.FieldID)
		for _, f := range fields {
			if !messagevoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagevoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mvuo.mutation.Length(); ok {
		_spec.SetField(messagevoice.FieldLength, field.TypeInt, value)
	}
	if value, ok := mvuo.mutation.AddedLength(); ok {
		_spec.AddField(messagevoice.FieldLength, field.TypeInt, value)
	}
	if mvuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagevoice.RoomTable,
			Columns: []string{messagevoice.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagevoice.RoomTable,
			Columns: []string{messagevoice.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvuo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.MessageTable,
			Columns: []string{messagevoice.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.MessageTable,
			Columns: []string{messagevoice.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mvuo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.FileTable,
			Columns: []string{messagevoice.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mvuo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   messagevoice.FileTable,
			Columns: []string{messagevoice.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MessageVoice{config: mvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagevoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mvuo.mutation.done = true
	return _node, nil
}
