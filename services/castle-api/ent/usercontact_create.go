// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserContactCreate is the builder for creating a UserContact entity.
type UserContactCreate struct {
	config
	mutation *UserContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (ucc *UserContactCreate) SetUserID(pu pulid.ID) *UserContactCreate {
	ucc.mutation.SetUserID(pu)
	return ucc
}

// SetContactID sets the "contact_id" field.
func (ucc *UserContactCreate) SetContactID(pu pulid.ID) *UserContactCreate {
	ucc.mutation.SetContactID(pu)
	return ucc
}

// SetRoomID sets the "room_id" field.
func (ucc *UserContactCreate) SetRoomID(pu pulid.ID) *UserContactCreate {
	ucc.mutation.SetRoomID(pu)
	return ucc
}

// SetNillableRoomID sets the "room_id" field if the given value is not nil.
func (ucc *UserContactCreate) SetNillableRoomID(pu *pulid.ID) *UserContactCreate {
	if pu != nil {
		ucc.SetRoomID(*pu)
	}
	return ucc
}

// SetCreatedAt sets the "created_at" field.
func (ucc *UserContactCreate) SetCreatedAt(t time.Time) *UserContactCreate {
	ucc.mutation.SetCreatedAt(t)
	return ucc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ucc *UserContactCreate) SetNillableCreatedAt(t *time.Time) *UserContactCreate {
	if t != nil {
		ucc.SetCreatedAt(*t)
	}
	return ucc
}

// SetID sets the "id" field.
func (ucc *UserContactCreate) SetID(pu pulid.ID) *UserContactCreate {
	ucc.mutation.SetID(pu)
	return ucc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ucc *UserContactCreate) SetNillableID(pu *pulid.ID) *UserContactCreate {
	if pu != nil {
		ucc.SetID(*pu)
	}
	return ucc
}

// SetUser sets the "user" edge to the User entity.
func (ucc *UserContactCreate) SetUser(u *User) *UserContactCreate {
	return ucc.SetUserID(u.ID)
}

// SetContact sets the "contact" edge to the User entity.
func (ucc *UserContactCreate) SetContact(u *User) *UserContactCreate {
	return ucc.SetContactID(u.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (ucc *UserContactCreate) SetRoom(r *Room) *UserContactCreate {
	return ucc.SetRoomID(r.ID)
}

// Mutation returns the UserContactMutation object of the builder.
func (ucc *UserContactCreate) Mutation() *UserContactMutation {
	return ucc.mutation
}

// Save creates the UserContact in the database.
func (ucc *UserContactCreate) Save(ctx context.Context) (*UserContact, error) {
	ucc.defaults()
	return withHooks(ctx, ucc.sqlSave, ucc.mutation, ucc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucc *UserContactCreate) SaveX(ctx context.Context) *UserContact {
	v, err := ucc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucc *UserContactCreate) Exec(ctx context.Context) error {
	_, err := ucc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucc *UserContactCreate) ExecX(ctx context.Context) {
	if err := ucc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucc *UserContactCreate) defaults() {
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		v := usercontact.DefaultCreatedAt()
		ucc.mutation.SetCreatedAt(v)
	}
	if _, ok := ucc.mutation.ID(); !ok {
		v := usercontact.DefaultID()
		ucc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucc *UserContactCreate) check() error {
	if _, ok := ucc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserContact.user_id"`)}
	}
	if _, ok := ucc.mutation.ContactID(); !ok {
		return &ValidationError{Name: "contact_id", err: errors.New(`ent: missing required field "UserContact.contact_id"`)}
	}
	if _, ok := ucc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserContact.created_at"`)}
	}
	if len(ucc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserContact.user"`)}
	}
	if len(ucc.mutation.ContactIDs()) == 0 {
		return &ValidationError{Name: "contact", err: errors.New(`ent: missing required edge "UserContact.contact"`)}
	}
	return nil
}

func (ucc *UserContactCreate) sqlSave(ctx context.Context) (*UserContact, error) {
	if err := ucc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ucc.mutation.id = &_node.ID
	ucc.mutation.done = true
	return _node, nil
}

func (ucc *UserContactCreate) createSpec() (*UserContact, *sqlgraph.CreateSpec) {
	var (
		_node = &UserContact{config: ucc.config}
		_spec = sqlgraph.NewCreateSpec(usercontact.Table, sqlgraph.NewFieldSpec(usercontact.FieldID, field.TypeString))
	)
	_spec.OnConflict = ucc.conflict
	if id, ok := ucc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ucc.mutation.CreatedAt(); ok {
		_spec.SetField(usercontact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ucc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.UserTable,
			Columns: []string{usercontact.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucc.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.ContactTable,
			Columns: []string{usercontact.ContactColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ContactID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercontact.RoomTable,
			Columns: []string{usercontact.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserContact.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserContactUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ucc *UserContactCreate) OnConflict(opts ...sql.ConflictOption) *UserContactUpsertOne {
	ucc.conflict = opts
	return &UserContactUpsertOne{
		create: ucc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucc *UserContactCreate) OnConflictColumns(columns ...string) *UserContactUpsertOne {
	ucc.conflict = append(ucc.conflict, sql.ConflictColumns(columns...))
	return &UserContactUpsertOne{
		create: ucc,
	}
}

type (
	// UserContactUpsertOne is the builder for "upsert"-ing
	//  one UserContact node.
	UserContactUpsertOne struct {
		create *UserContactCreate
	}

	// UserContactUpsert is the "OnConflict" setter.
	UserContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *UserContactUpsert) SetUserID(v pulid.ID) *UserContactUpsert {
	u.Set(usercontact.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserContactUpsert) UpdateUserID() *UserContactUpsert {
	u.SetExcluded(usercontact.FieldUserID)
	return u
}

// SetContactID sets the "contact_id" field.
func (u *UserContactUpsert) SetContactID(v pulid.ID) *UserContactUpsert {
	u.Set(usercontact.FieldContactID, v)
	return u
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *UserContactUpsert) UpdateContactID() *UserContactUpsert {
	u.SetExcluded(usercontact.FieldContactID)
	return u
}

// SetRoomID sets the "room_id" field.
func (u *UserContactUpsert) SetRoomID(v pulid.ID) *UserContactUpsert {
	u.Set(usercontact.FieldRoomID, v)
	return u
}

// UpdateRoomID sets the "room_id" field to the value that was provided on create.
func (u *UserContactUpsert) UpdateRoomID() *UserContactUpsert {
	u.SetExcluded(usercontact.FieldRoomID)
	return u
}

// ClearRoomID clears the value of the "room_id" field.
func (u *UserContactUpsert) ClearRoomID() *UserContactUpsert {
	u.SetNull(usercontact.FieldRoomID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserContactUpsert) SetCreatedAt(v time.Time) *UserContactUpsert {
	u.Set(usercontact.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserContactUpsert) UpdateCreatedAt() *UserContactUpsert {
	u.SetExcluded(usercontact.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UserContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usercontact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserContactUpsertOne) UpdateNewValues() *UserContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(usercontact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserContact.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UserContactUpsertOne) Ignore() *UserContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserContactUpsertOne) DoNothing() *UserContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserContactCreate.OnConflict
// documentation for more info.
func (u *UserContactUpsertOne) Update(set func(*UserContactUpsert)) *UserContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserContactUpsertOne) SetUserID(v pulid.ID) *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserContactUpsertOne) UpdateUserID() *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateUserID()
	})
}

// SetContactID sets the "contact_id" field.
func (u *UserContactUpsertOne) SetContactID(v pulid.ID) *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.SetContactID(v)
	})
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *UserContactUpsertOne) UpdateContactID() *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateContactID()
	})
}

// SetRoomID sets the "room_id" field.
func (u *UserContactUpsertOne) SetRoomID(v pulid.ID) *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.SetRoomID(v)
	})
}

// UpdateRoomID sets the "room_id" field to the value that was provided on create.
func (u *UserContactUpsertOne) UpdateRoomID() *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateRoomID()
	})
}

// ClearRoomID clears the value of the "room_id" field.
func (u *UserContactUpsertOne) ClearRoomID() *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.ClearRoomID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserContactUpsertOne) SetCreatedAt(v time.Time) *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserContactUpsertOne) UpdateCreatedAt() *UserContactUpsertOne {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *UserContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserContactUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserContactUpsertOne.ID is not supported by MySQL driver. Use UserContactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserContactUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserContactCreateBulk is the builder for creating many UserContact entities in bulk.
type UserContactCreateBulk struct {
	config
	err      error
	builders []*UserContactCreate
	conflict []sql.ConflictOption
}

// Save creates the UserContact entities in the database.
func (uccb *UserContactCreateBulk) Save(ctx context.Context) ([]*UserContact, error) {
	if uccb.err != nil {
		return nil, uccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(uccb.builders))
	nodes := make([]*UserContact, len(uccb.builders))
	mutators := make([]Mutator, len(uccb.builders))
	for i := range uccb.builders {
		func(i int, root context.Context) {
			builder := uccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, uccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = uccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, uccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, uccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (uccb *UserContactCreateBulk) SaveX(ctx context.Context) []*UserContact {
	v, err := uccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uccb *UserContactCreateBulk) Exec(ctx context.Context) error {
	_, err := uccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uccb *UserContactCreateBulk) ExecX(ctx context.Context) {
	if err := uccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UserContact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserContactUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (uccb *UserContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserContactUpsertBulk {
	uccb.conflict = opts
	return &UserContactUpsertBulk{
		create: uccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UserContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uccb *UserContactCreateBulk) OnConflictColumns(columns ...string) *UserContactUpsertBulk {
	uccb.conflict = append(uccb.conflict, sql.ConflictColumns(columns...))
	return &UserContactUpsertBulk{
		create: uccb,
	}
}

// UserContactUpsertBulk is the builder for "upsert"-ing
// a bulk of UserContact nodes.
type UserContactUpsertBulk struct {
	create *UserContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UserContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(usercontact.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UserContactUpsertBulk) UpdateNewValues() *UserContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(usercontact.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UserContact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UserContactUpsertBulk) Ignore() *UserContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserContactUpsertBulk) DoNothing() *UserContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserContactCreateBulk.OnConflict
// documentation for more info.
func (u *UserContactUpsertBulk) Update(set func(*UserContactUpsert)) *UserContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *UserContactUpsertBulk) SetUserID(v pulid.ID) *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *UserContactUpsertBulk) UpdateUserID() *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateUserID()
	})
}

// SetContactID sets the "contact_id" field.
func (u *UserContactUpsertBulk) SetContactID(v pulid.ID) *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.SetContactID(v)
	})
}

// UpdateContactID sets the "contact_id" field to the value that was provided on create.
func (u *UserContactUpsertBulk) UpdateContactID() *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateContactID()
	})
}

// SetRoomID sets the "room_id" field.
func (u *UserContactUpsertBulk) SetRoomID(v pulid.ID) *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.SetRoomID(v)
	})
}

// UpdateRoomID sets the "room_id" field to the value that was provided on create.
func (u *UserContactUpsertBulk) UpdateRoomID() *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateRoomID()
	})
}

// ClearRoomID clears the value of the "room_id" field.
func (u *UserContactUpsertBulk) ClearRoomID() *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.ClearRoomID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UserContactUpsertBulk) SetCreatedAt(v time.Time) *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserContactUpsertBulk) UpdateCreatedAt() *UserContactUpsertBulk {
	return u.Update(func(s *UserContactUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *UserContactUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
