// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoomMemberCreate is the builder for creating a RoomMember entity.
type RoomMemberCreate struct {
	config
	mutation *RoomMemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeletedAt sets the "deleted_at" field.
func (rmc *RoomMemberCreate) SetDeletedAt(t time.Time) *RoomMemberCreate {
	rmc.mutation.SetDeletedAt(t)
	return rmc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rmc *RoomMemberCreate) SetNillableDeletedAt(t *time.Time) *RoomMemberCreate {
	if t != nil {
		rmc.SetDeletedAt(*t)
	}
	return rmc
}

// SetName sets the "name" field.
func (rmc *RoomMemberCreate) SetName(s string) *RoomMemberCreate {
	rmc.mutation.SetName(s)
	return rmc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (rmc *RoomMemberCreate) SetNillableName(s *string) *RoomMemberCreate {
	if s != nil {
		rmc.SetName(*s)
	}
	return rmc
}

// SetUnreadMessagesCount sets the "unread_messages_count" field.
func (rmc *RoomMemberCreate) SetUnreadMessagesCount(i int) *RoomMemberCreate {
	rmc.mutation.SetUnreadMessagesCount(i)
	return rmc
}

// SetNillableUnreadMessagesCount sets the "unread_messages_count" field if the given value is not nil.
func (rmc *RoomMemberCreate) SetNillableUnreadMessagesCount(i *int) *RoomMemberCreate {
	if i != nil {
		rmc.SetUnreadMessagesCount(*i)
	}
	return rmc
}

// SetUserID sets the "user_id" field.
func (rmc *RoomMemberCreate) SetUserID(pu pulid.ID) *RoomMemberCreate {
	rmc.mutation.SetUserID(pu)
	return rmc
}

// SetRoomID sets the "room_id" field.
func (rmc *RoomMemberCreate) SetRoomID(pu pulid.ID) *RoomMemberCreate {
	rmc.mutation.SetRoomID(pu)
	return rmc
}

// SetJoinedAt sets the "joined_at" field.
func (rmc *RoomMemberCreate) SetJoinedAt(t time.Time) *RoomMemberCreate {
	rmc.mutation.SetJoinedAt(t)
	return rmc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (rmc *RoomMemberCreate) SetNillableJoinedAt(t *time.Time) *RoomMemberCreate {
	if t != nil {
		rmc.SetJoinedAt(*t)
	}
	return rmc
}

// SetUpdatedAt sets the "updated_at" field.
func (rmc *RoomMemberCreate) SetUpdatedAt(t time.Time) *RoomMemberCreate {
	rmc.mutation.SetUpdatedAt(t)
	return rmc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rmc *RoomMemberCreate) SetNillableUpdatedAt(t *time.Time) *RoomMemberCreate {
	if t != nil {
		rmc.SetUpdatedAt(*t)
	}
	return rmc
}

// SetID sets the "id" field.
func (rmc *RoomMemberCreate) SetID(pu pulid.ID) *RoomMemberCreate {
	rmc.mutation.SetID(pu)
	return rmc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rmc *RoomMemberCreate) SetNillableID(pu *pulid.ID) *RoomMemberCreate {
	if pu != nil {
		rmc.SetID(*pu)
	}
	return rmc
}

// SetUser sets the "user" edge to the User entity.
func (rmc *RoomMemberCreate) SetUser(u *User) *RoomMemberCreate {
	return rmc.SetUserID(u.ID)
}

// SetRoom sets the "room" edge to the Room entity.
func (rmc *RoomMemberCreate) SetRoom(r *Room) *RoomMemberCreate {
	return rmc.SetRoomID(r.ID)
}

// Mutation returns the RoomMemberMutation object of the builder.
func (rmc *RoomMemberCreate) Mutation() *RoomMemberMutation {
	return rmc.mutation
}

// Save creates the RoomMember in the database.
func (rmc *RoomMemberCreate) Save(ctx context.Context) (*RoomMember, error) {
	if err := rmc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RoomMemberCreate) SaveX(ctx context.Context) *RoomMember {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RoomMemberCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RoomMemberCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rmc *RoomMemberCreate) defaults() error {
	if _, ok := rmc.mutation.UnreadMessagesCount(); !ok {
		v := roommember.DefaultUnreadMessagesCount
		rmc.mutation.SetUnreadMessagesCount(v)
	}
	if _, ok := rmc.mutation.JoinedAt(); !ok {
		if roommember.DefaultJoinedAt == nil {
			return fmt.Errorf("ent: uninitialized roommember.DefaultJoinedAt (forgotten import ent/runtime?)")
		}
		v := roommember.DefaultJoinedAt()
		rmc.mutation.SetJoinedAt(v)
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		if roommember.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized roommember.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := roommember.DefaultUpdatedAt()
		rmc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rmc.mutation.ID(); !ok {
		if roommember.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized roommember.DefaultID (forgotten import ent/runtime?)")
		}
		v := roommember.DefaultID()
		rmc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RoomMemberCreate) check() error {
	if _, ok := rmc.mutation.UnreadMessagesCount(); !ok {
		return &ValidationError{Name: "unread_messages_count", err: errors.New(`ent: missing required field "RoomMember.unread_messages_count"`)}
	}
	if _, ok := rmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RoomMember.user_id"`)}
	}
	if _, ok := rmc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room_id", err: errors.New(`ent: missing required field "RoomMember.room_id"`)}
	}
	if _, ok := rmc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "RoomMember.joined_at"`)}
	}
	if _, ok := rmc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoomMember.updated_at"`)}
	}
	if len(rmc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RoomMember.user"`)}
	}
	if len(rmc.mutation.RoomIDs()) == 0 {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "RoomMember.room"`)}
	}
	return nil
}

func (rmc *RoomMemberCreate) sqlSave(ctx context.Context) (*RoomMember, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RoomMemberCreate) createSpec() (*RoomMember, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomMember{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(roommember.Table, sqlgraph.NewFieldSpec(roommember.FieldID, field.TypeString))
	)
	_spec.OnConflict = rmc.conflict
	if id, ok := rmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rmc.mutation.DeletedAt(); ok {
		_spec.SetField(roommember.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rmc.mutation.Name(); ok {
		_spec.SetField(roommember.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rmc.mutation.UnreadMessagesCount(); ok {
		_spec.SetField(roommember.FieldUnreadMessagesCount, field.TypeInt, value)
		_node.UnreadMessagesCount = value
	}
	if value, ok := rmc.mutation.JoinedAt(); ok {
		_spec.SetField(roommember.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if value, ok := rmc.mutation.UpdatedAt(); ok {
		_spec.SetField(roommember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := rmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommember.UserTable,
			Columns: []string{roommember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   roommember.RoomTable,
			Columns: []string{roommember.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoomID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoomMember.Create().
//		SetDeletedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoomMemberUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmc *RoomMemberCreate) OnConflict(opts ...sql.ConflictOption) *RoomMemberUpsertOne {
	rmc.conflict = opts
	return &RoomMemberUpsertOne{
		create: rmc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoomMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmc *RoomMemberCreate) OnConflictColumns(columns ...string) *RoomMemberUpsertOne {
	rmc.conflict = append(rmc.conflict, sql.ConflictColumns(columns...))
	return &RoomMemberUpsertOne{
		create: rmc,
	}
}

type (
	// RoomMemberUpsertOne is the builder for "upsert"-ing
	//  one RoomMember node.
	RoomMemberUpsertOne struct {
		create *RoomMemberCreate
	}

	// RoomMemberUpsert is the "OnConflict" setter.
	RoomMemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeletedAt sets the "deleted_at" field.
func (u *RoomMemberUpsert) SetDeletedAt(v time.Time) *RoomMemberUpsert {
	u.Set(roommember.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoomMemberUpsert) UpdateDeletedAt() *RoomMemberUpsert {
	u.SetExcluded(roommember.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoomMemberUpsert) ClearDeletedAt() *RoomMemberUpsert {
	u.SetNull(roommember.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *RoomMemberUpsert) SetName(v string) *RoomMemberUpsert {
	u.Set(roommember.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoomMemberUpsert) UpdateName() *RoomMemberUpsert {
	u.SetExcluded(roommember.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RoomMemberUpsert) ClearName() *RoomMemberUpsert {
	u.SetNull(roommember.FieldName)
	return u
}

// SetUnreadMessagesCount sets the "unread_messages_count" field.
func (u *RoomMemberUpsert) SetUnreadMessagesCount(v int) *RoomMemberUpsert {
	u.Set(roommember.FieldUnreadMessagesCount, v)
	return u
}

// UpdateUnreadMessagesCount sets the "unread_messages_count" field to the value that was provided on create.
func (u *RoomMemberUpsert) UpdateUnreadMessagesCount() *RoomMemberUpsert {
	u.SetExcluded(roommember.FieldUnreadMessagesCount)
	return u
}

// AddUnreadMessagesCount adds v to the "unread_messages_count" field.
func (u *RoomMemberUpsert) AddUnreadMessagesCount(v int) *RoomMemberUpsert {
	u.Add(roommember.FieldUnreadMessagesCount, v)
	return u
}

// SetUserID sets the "user_id" field.
func (u *RoomMemberUpsert) SetUserID(v pulid.ID) *RoomMemberUpsert {
	u.Set(roommember.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RoomMemberUpsert) UpdateUserID() *RoomMemberUpsert {
	u.SetExcluded(roommember.FieldUserID)
	return u
}

// SetRoomID sets the "room_id" field.
func (u *RoomMemberUpsert) SetRoomID(v pulid.ID) *RoomMemberUpsert {
	u.Set(roommember.FieldRoomID, v)
	return u
}

// UpdateRoomID sets the "room_id" field to the value that was provided on create.
func (u *RoomMemberUpsert) UpdateRoomID() *RoomMemberUpsert {
	u.SetExcluded(roommember.FieldRoomID)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoomMemberUpsert) SetUpdatedAt(v time.Time) *RoomMemberUpsert {
	u.Set(roommember.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoomMemberUpsert) UpdateUpdatedAt() *RoomMemberUpsert {
	u.SetExcluded(roommember.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RoomMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(roommember.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoomMemberUpsertOne) UpdateNewValues() *RoomMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(roommember.FieldID)
		}
		if _, exists := u.create.mutation.JoinedAt(); exists {
			s.SetIgnore(roommember.FieldJoinedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoomMember.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RoomMemberUpsertOne) Ignore() *RoomMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoomMemberUpsertOne) DoNothing() *RoomMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoomMemberCreate.OnConflict
// documentation for more info.
func (u *RoomMemberUpsertOne) Update(set func(*RoomMemberUpsert)) *RoomMemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoomMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoomMemberUpsertOne) SetDeletedAt(v time.Time) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoomMemberUpsertOne) UpdateDeletedAt() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoomMemberUpsertOne) ClearDeletedAt() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *RoomMemberUpsertOne) SetName(v string) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoomMemberUpsertOne) UpdateName() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RoomMemberUpsertOne) ClearName() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.ClearName()
	})
}

// SetUnreadMessagesCount sets the "unread_messages_count" field.
func (u *RoomMemberUpsertOne) SetUnreadMessagesCount(v int) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetUnreadMessagesCount(v)
	})
}

// AddUnreadMessagesCount adds v to the "unread_messages_count" field.
func (u *RoomMemberUpsertOne) AddUnreadMessagesCount(v int) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.AddUnreadMessagesCount(v)
	})
}

// UpdateUnreadMessagesCount sets the "unread_messages_count" field to the value that was provided on create.
func (u *RoomMemberUpsertOne) UpdateUnreadMessagesCount() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateUnreadMessagesCount()
	})
}

// SetUserID sets the "user_id" field.
func (u *RoomMemberUpsertOne) SetUserID(v pulid.ID) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RoomMemberUpsertOne) UpdateUserID() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateUserID()
	})
}

// SetRoomID sets the "room_id" field.
func (u *RoomMemberUpsertOne) SetRoomID(v pulid.ID) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetRoomID(v)
	})
}

// UpdateRoomID sets the "room_id" field to the value that was provided on create.
func (u *RoomMemberUpsertOne) UpdateRoomID() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateRoomID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoomMemberUpsertOne) SetUpdatedAt(v time.Time) *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoomMemberUpsertOne) UpdateUpdatedAt() *RoomMemberUpsertOne {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *RoomMemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoomMemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoomMemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RoomMemberUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RoomMemberUpsertOne.ID is not supported by MySQL driver. Use RoomMemberUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RoomMemberUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RoomMemberCreateBulk is the builder for creating many RoomMember entities in bulk.
type RoomMemberCreateBulk struct {
	config
	err      error
	builders []*RoomMemberCreate
	conflict []sql.ConflictOption
}

// Save creates the RoomMember entities in the database.
func (rmcb *RoomMemberCreateBulk) Save(ctx context.Context) ([]*RoomMember, error) {
	if rmcb.err != nil {
		return nil, rmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RoomMember, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rmcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RoomMemberCreateBulk) SaveX(ctx context.Context) []*RoomMember {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RoomMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RoomMemberCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RoomMember.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RoomMemberUpsert) {
//			SetDeletedAt(v+v).
//		}).
//		Exec(ctx)
func (rmcb *RoomMemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *RoomMemberUpsertBulk {
	rmcb.conflict = opts
	return &RoomMemberUpsertBulk{
		create: rmcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RoomMember.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rmcb *RoomMemberCreateBulk) OnConflictColumns(columns ...string) *RoomMemberUpsertBulk {
	rmcb.conflict = append(rmcb.conflict, sql.ConflictColumns(columns...))
	return &RoomMemberUpsertBulk{
		create: rmcb,
	}
}

// RoomMemberUpsertBulk is the builder for "upsert"-ing
// a bulk of RoomMember nodes.
type RoomMemberUpsertBulk struct {
	create *RoomMemberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RoomMember.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(roommember.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RoomMemberUpsertBulk) UpdateNewValues() *RoomMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(roommember.FieldID)
			}
			if _, exists := b.mutation.JoinedAt(); exists {
				s.SetIgnore(roommember.FieldJoinedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RoomMember.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RoomMemberUpsertBulk) Ignore() *RoomMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RoomMemberUpsertBulk) DoNothing() *RoomMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RoomMemberCreateBulk.OnConflict
// documentation for more info.
func (u *RoomMemberUpsertBulk) Update(set func(*RoomMemberUpsert)) *RoomMemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RoomMemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RoomMemberUpsertBulk) SetDeletedAt(v time.Time) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RoomMemberUpsertBulk) UpdateDeletedAt() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RoomMemberUpsertBulk) ClearDeletedAt() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *RoomMemberUpsertBulk) SetName(v string) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RoomMemberUpsertBulk) UpdateName() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RoomMemberUpsertBulk) ClearName() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.ClearName()
	})
}

// SetUnreadMessagesCount sets the "unread_messages_count" field.
func (u *RoomMemberUpsertBulk) SetUnreadMessagesCount(v int) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetUnreadMessagesCount(v)
	})
}

// AddUnreadMessagesCount adds v to the "unread_messages_count" field.
func (u *RoomMemberUpsertBulk) AddUnreadMessagesCount(v int) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.AddUnreadMessagesCount(v)
	})
}

// UpdateUnreadMessagesCount sets the "unread_messages_count" field to the value that was provided on create.
func (u *RoomMemberUpsertBulk) UpdateUnreadMessagesCount() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateUnreadMessagesCount()
	})
}

// SetUserID sets the "user_id" field.
func (u *RoomMemberUpsertBulk) SetUserID(v pulid.ID) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *RoomMemberUpsertBulk) UpdateUserID() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateUserID()
	})
}

// SetRoomID sets the "room_id" field.
func (u *RoomMemberUpsertBulk) SetRoomID(v pulid.ID) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetRoomID(v)
	})
}

// UpdateRoomID sets the "room_id" field to the value that was provided on create.
func (u *RoomMemberUpsertBulk) UpdateRoomID() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateRoomID()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RoomMemberUpsertBulk) SetUpdatedAt(v time.Time) *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RoomMemberUpsertBulk) UpdateUpdatedAt() *RoomMemberUpsertBulk {
	return u.Update(func(s *RoomMemberUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *RoomMemberUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RoomMemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RoomMemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RoomMemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
