// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/predicate"
	"journeyhub/ent/schema/pulid"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageAttachmentUpdate is the builder for updating MessageAttachment entities.
type MessageAttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *MessageAttachmentMutation
}

// Where appends a list predicates to the MessageAttachmentUpdate builder.
func (mau *MessageAttachmentUpdate) Where(ps ...predicate.MessageAttachment) *MessageAttachmentUpdate {
	mau.mutation.Where(ps...)
	return mau
}

// SetType sets the "type" field.
func (mau *MessageAttachmentUpdate) SetType(m messageattachment.Type) *MessageAttachmentUpdate {
	mau.mutation.SetType(m)
	return mau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mau *MessageAttachmentUpdate) SetNillableType(m *messageattachment.Type) *MessageAttachmentUpdate {
	if m != nil {
		mau.SetType(*m)
	}
	return mau
}

// SetOrder sets the "order" field.
func (mau *MessageAttachmentUpdate) SetOrder(u uint64) *MessageAttachmentUpdate {
	mau.mutation.ResetOrder()
	mau.mutation.SetOrder(u)
	return mau
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (mau *MessageAttachmentUpdate) SetNillableOrder(u *uint64) *MessageAttachmentUpdate {
	if u != nil {
		mau.SetOrder(*u)
	}
	return mau
}

// AddOrder adds u to the "order" field.
func (mau *MessageAttachmentUpdate) AddOrder(u int64) *MessageAttachmentUpdate {
	mau.mutation.AddOrder(u)
	return mau
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mau *MessageAttachmentUpdate) SetMessageID(id pulid.ID) *MessageAttachmentUpdate {
	mau.mutation.SetMessageID(id)
	return mau
}

// SetMessage sets the "message" edge to the Message entity.
func (mau *MessageAttachmentUpdate) SetMessage(m *Message) *MessageAttachmentUpdate {
	return mau.SetMessageID(m.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mau *MessageAttachmentUpdate) SetFileID(id pulid.ID) *MessageAttachmentUpdate {
	mau.mutation.SetFileID(id)
	return mau
}

// SetFile sets the "file" edge to the File entity.
func (mau *MessageAttachmentUpdate) SetFile(f *File) *MessageAttachmentUpdate {
	return mau.SetFileID(f.ID)
}

// Mutation returns the MessageAttachmentMutation object of the builder.
func (mau *MessageAttachmentUpdate) Mutation() *MessageAttachmentMutation {
	return mau.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (mau *MessageAttachmentUpdate) ClearMessage() *MessageAttachmentUpdate {
	mau.mutation.ClearMessage()
	return mau
}

// ClearFile clears the "file" edge to the File entity.
func (mau *MessageAttachmentUpdate) ClearFile() *MessageAttachmentUpdate {
	mau.mutation.ClearFile()
	return mau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mau *MessageAttachmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mau.sqlSave, mau.mutation, mau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mau *MessageAttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := mau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mau *MessageAttachmentUpdate) Exec(ctx context.Context) error {
	_, err := mau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mau *MessageAttachmentUpdate) ExecX(ctx context.Context) {
	if err := mau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mau *MessageAttachmentUpdate) check() error {
	if v, ok := mau.mutation.GetType(); ok {
		if err := messageattachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MessageAttachment.type": %w`, err)}
		}
	}
	if mau.mutation.MessageCleared() && len(mau.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageAttachment.message"`)
	}
	if mau.mutation.FileCleared() && len(mau.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageAttachment.file"`)
	}
	return nil
}

func (mau *MessageAttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(messageattachment.Table, messageattachment.Columns, sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString))
	if ps := mau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mau.mutation.GetType(); ok {
		_spec.SetField(messageattachment.FieldType, field.TypeEnum, value)
	}
	if value, ok := mau.mutation.Order(); ok {
		_spec.SetField(messageattachment.FieldOrder, field.TypeUint64, value)
	}
	if value, ok := mau.mutation.AddedOrder(); ok {
		_spec.AddField(messageattachment.FieldOrder, field.TypeUint64, value)
	}
	if mau.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messageattachment.MessageTable,
			Columns: []string{messageattachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messageattachment.MessageTable,
			Columns: []string{messageattachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mau.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   messageattachment.FileTable,
			Columns: []string{messageattachment.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mau.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   messageattachment.FileTable,
			Columns: []string{messageattachment.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messageattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mau.mutation.done = true
	return n, nil
}

// MessageAttachmentUpdateOne is the builder for updating a single MessageAttachment entity.
type MessageAttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageAttachmentMutation
}

// SetType sets the "type" field.
func (mauo *MessageAttachmentUpdateOne) SetType(m messageattachment.Type) *MessageAttachmentUpdateOne {
	mauo.mutation.SetType(m)
	return mauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (mauo *MessageAttachmentUpdateOne) SetNillableType(m *messageattachment.Type) *MessageAttachmentUpdateOne {
	if m != nil {
		mauo.SetType(*m)
	}
	return mauo
}

// SetOrder sets the "order" field.
func (mauo *MessageAttachmentUpdateOne) SetOrder(u uint64) *MessageAttachmentUpdateOne {
	mauo.mutation.ResetOrder()
	mauo.mutation.SetOrder(u)
	return mauo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (mauo *MessageAttachmentUpdateOne) SetNillableOrder(u *uint64) *MessageAttachmentUpdateOne {
	if u != nil {
		mauo.SetOrder(*u)
	}
	return mauo
}

// AddOrder adds u to the "order" field.
func (mauo *MessageAttachmentUpdateOne) AddOrder(u int64) *MessageAttachmentUpdateOne {
	mauo.mutation.AddOrder(u)
	return mauo
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mauo *MessageAttachmentUpdateOne) SetMessageID(id pulid.ID) *MessageAttachmentUpdateOne {
	mauo.mutation.SetMessageID(id)
	return mauo
}

// SetMessage sets the "message" edge to the Message entity.
func (mauo *MessageAttachmentUpdateOne) SetMessage(m *Message) *MessageAttachmentUpdateOne {
	return mauo.SetMessageID(m.ID)
}

// SetFileID sets the "file" edge to the File entity by ID.
func (mauo *MessageAttachmentUpdateOne) SetFileID(id pulid.ID) *MessageAttachmentUpdateOne {
	mauo.mutation.SetFileID(id)
	return mauo
}

// SetFile sets the "file" edge to the File entity.
func (mauo *MessageAttachmentUpdateOne) SetFile(f *File) *MessageAttachmentUpdateOne {
	return mauo.SetFileID(f.ID)
}

// Mutation returns the MessageAttachmentMutation object of the builder.
func (mauo *MessageAttachmentUpdateOne) Mutation() *MessageAttachmentMutation {
	return mauo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (mauo *MessageAttachmentUpdateOne) ClearMessage() *MessageAttachmentUpdateOne {
	mauo.mutation.ClearMessage()
	return mauo
}

// ClearFile clears the "file" edge to the File entity.
func (mauo *MessageAttachmentUpdateOne) ClearFile() *MessageAttachmentUpdateOne {
	mauo.mutation.ClearFile()
	return mauo
}

// Where appends a list predicates to the MessageAttachmentUpdate builder.
func (mauo *MessageAttachmentUpdateOne) Where(ps ...predicate.MessageAttachment) *MessageAttachmentUpdateOne {
	mauo.mutation.Where(ps...)
	return mauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mauo *MessageAttachmentUpdateOne) Select(field string, fields ...string) *MessageAttachmentUpdateOne {
	mauo.fields = append([]string{field}, fields...)
	return mauo
}

// Save executes the query and returns the updated MessageAttachment entity.
func (mauo *MessageAttachmentUpdateOne) Save(ctx context.Context) (*MessageAttachment, error) {
	return withHooks(ctx, mauo.sqlSave, mauo.mutation, mauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mauo *MessageAttachmentUpdateOne) SaveX(ctx context.Context) *MessageAttachment {
	node, err := mauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mauo *MessageAttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := mauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mauo *MessageAttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := mauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mauo *MessageAttachmentUpdateOne) check() error {
	if v, ok := mauo.mutation.GetType(); ok {
		if err := messageattachment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "MessageAttachment.type": %w`, err)}
		}
	}
	if mauo.mutation.MessageCleared() && len(mauo.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageAttachment.message"`)
	}
	if mauo.mutation.FileCleared() && len(mauo.mutation.FileIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageAttachment.file"`)
	}
	return nil
}

func (mauo *MessageAttachmentUpdateOne) sqlSave(ctx context.Context) (_node *MessageAttachment, err error) {
	if err := mauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(messageattachment.Table, messageattachment.Columns, sqlgraph.NewFieldSpec(messageattachment.FieldID, field.TypeString))
	id, ok := mauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageAttachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messageattachment.FieldID)
		for _, f := range fields {
			if !messageattachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messageattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mauo.mutation.GetType(); ok {
		_spec.SetField(messageattachment.FieldType, field.TypeEnum, value)
	}
	if value, ok := mauo.mutation.Order(); ok {
		_spec.SetField(messageattachment.FieldOrder, field.TypeUint64, value)
	}
	if value, ok := mauo.mutation.AddedOrder(); ok {
		_spec.AddField(messageattachment.FieldOrder, field.TypeUint64, value)
	}
	if mauo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messageattachment.MessageTable,
			Columns: []string{messageattachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messageattachment.MessageTable,
			Columns: []string{messageattachment.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mauo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   messageattachment.FileTable,
			Columns: []string{messageattachment.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mauo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   messageattachment.FileTable,
			Columns: []string{messageattachment.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MessageAttachment{config: mauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messageattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mauo.mutation.done = true
	return _node, nil
}
