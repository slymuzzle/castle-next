// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (f *File) MessageAttachment(ctx context.Context) (*MessageAttachment, error) {
	result, err := f.Edges.MessageAttachmentOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryMessageAttachment().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (f *File) MessageVoice(ctx context.Context) (*MessageVoice, error) {
	result, err := f.Edges.MessageVoiceOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryMessageVoice().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) Voice(ctx context.Context) (*MessageVoice, error) {
	result, err := m.Edges.VoiceOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryVoice().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) ReplyTo(ctx context.Context) (*Message, error) {
	result, err := m.Edges.ReplyToOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryReplyTo().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) Attachments(ctx context.Context) (result []*MessageAttachment, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedAttachments(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.AttachmentsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryAttachments().All(ctx)
	}
	return result, err
}

func (m *Message) Links(ctx context.Context) (result []*MessageLink, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedLinks(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.LinksOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryLinks().All(ctx)
	}
	return result, err
}

func (m *Message) User(ctx context.Context) (*User, error) {
	result, err := m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) Room(ctx context.Context) (*Room, error) {
	result, err := m.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryRoom().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ma *MessageAttachment) Room(ctx context.Context) (*Room, error) {
	result, err := ma.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = ma.QueryRoom().Only(ctx)
	}
	return result, err
}

func (ma *MessageAttachment) Message(ctx context.Context) (*Message, error) {
	result, err := ma.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = ma.QueryMessage().Only(ctx)
	}
	return result, err
}

func (ma *MessageAttachment) File(ctx context.Context) (*File, error) {
	result, err := ma.Edges.FileOrErr()
	if IsNotLoaded(err) {
		result, err = ma.QueryFile().Only(ctx)
	}
	return result, err
}

func (ml *MessageLink) Room(ctx context.Context) (*Room, error) {
	result, err := ml.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = ml.QueryRoom().Only(ctx)
	}
	return result, err
}

func (ml *MessageLink) Message(ctx context.Context) (*Message, error) {
	result, err := ml.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = ml.QueryMessage().Only(ctx)
	}
	return result, err
}

func (mv *MessageVoice) Room(ctx context.Context) (*Room, error) {
	result, err := mv.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = mv.QueryRoom().Only(ctx)
	}
	return result, err
}

func (mv *MessageVoice) Message(ctx context.Context) (*Message, error) {
	result, err := mv.Edges.MessageOrErr()
	if IsNotLoaded(err) {
		result, err = mv.QueryMessage().Only(ctx)
	}
	return result, err
}

func (mv *MessageVoice) File(ctx context.Context) (*File, error) {
	result, err := mv.Edges.FileOrErr()
	if IsNotLoaded(err) {
		result, err = mv.QueryFile().Only(ctx)
	}
	return result, err
}

func (r *Room) UserContact(ctx context.Context) (result []*UserContact, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedUserContact(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.UserContactOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryUserContact().All(ctx)
	}
	return result, err
}

func (r *Room) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[1][alias]
	if nodes, err := r.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) LastMessage(ctx context.Context) (*Message, error) {
	result, err := r.Edges.LastMessageOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryLastMessage().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Room) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[3][alias]
	if nodes, err := r.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) MessageVoices(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *MessageVoiceOrder, where *MessageVoiceWhereInput,
) (*MessageVoiceConnection, error) {
	opts := []MessageVoicePaginateOption{
		WithMessageVoiceOrder(orderBy),
		WithMessageVoiceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[4][alias]
	if nodes, err := r.NamedMessageVoices(alias); err == nil || hasTotalCount {
		pager, err := newMessageVoicePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageVoiceConnection{Edges: []*MessageVoiceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryMessageVoices().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) MessageAttachments(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *MessageAttachmentOrder, where *MessageAttachmentWhereInput,
) (*MessageAttachmentConnection, error) {
	opts := []MessageAttachmentPaginateOption{
		WithMessageAttachmentOrder(orderBy),
		WithMessageAttachmentFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[5][alias]
	if nodes, err := r.NamedMessageAttachments(alias); err == nil || hasTotalCount {
		pager, err := newMessageAttachmentPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageAttachmentConnection{Edges: []*MessageAttachmentEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryMessageAttachments().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) MessageLinks(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *MessageLinkOrder, where *MessageLinkWhereInput,
) (*MessageLinkConnection, error) {
	opts := []MessageLinkPaginateOption{
		WithMessageLinkOrder(orderBy),
		WithMessageLinkFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[6][alias]
	if nodes, err := r.NamedMessageLinks(alias); err == nil || hasTotalCount {
		pager, err := newMessageLinkPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageLinkConnection{Edges: []*MessageLinkEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryMessageLinks().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) RoomMembers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RoomMemberOrder, where *RoomMemberWhereInput,
) (*RoomMemberConnection, error) {
	opts := []RoomMemberPaginateOption{
		WithRoomMemberOrder(orderBy),
		WithRoomMemberFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[7][alias]
	if nodes, err := r.NamedRoomMembers(alias); err == nil || hasTotalCount {
		pager, err := newRoomMemberPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RoomMemberConnection{Edges: []*RoomMemberEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryRoomMembers().Paginate(ctx, after, first, before, last, opts...)
}

func (rm *RoomMember) User(ctx context.Context) (*User, error) {
	result, err := rm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = rm.QueryUser().Only(ctx)
	}
	return result, err
}

func (rm *RoomMember) Room(ctx context.Context) (*Room, error) {
	result, err := rm.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = rm.QueryRoom().Only(ctx)
	}
	return result, err
}

func (u *User) Contacts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedContacts(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryContacts().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Rooms(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RoomOrder, where *RoomWhereInput,
) (*RoomConnection, error) {
	opts := []RoomPaginateOption{
		WithRoomOrder(orderBy),
		WithRoomFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedRooms(alias); err == nil || hasTotalCount {
		pager, err := newRoomPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RoomConnection{Edges: []*RoomEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryRooms().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[2][alias]
	if nodes, err := u.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) UserContacts(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserContactOrder, where *UserContactWhereInput,
) (*UserContactConnection, error) {
	opts := []UserContactPaginateOption{
		WithUserContactOrder(orderBy),
		WithUserContactFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[3][alias]
	if nodes, err := u.NamedUserContacts(alias); err == nil || hasTotalCount {
		pager, err := newUserContactPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserContactConnection{Edges: []*UserContactEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryUserContacts().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Memberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RoomMemberOrder, where *RoomMemberWhereInput,
) (*RoomMemberConnection, error) {
	opts := []RoomMemberPaginateOption{
		WithRoomMemberOrder(orderBy),
		WithRoomMemberFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[4][alias]
	if nodes, err := u.NamedMemberships(alias); err == nil || hasTotalCount {
		pager, err := newRoomMemberPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RoomMemberConnection{Edges: []*RoomMemberEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryMemberships().Paginate(ctx, after, first, before, last, opts...)
}

func (uc *UserContact) User(ctx context.Context) (*User, error) {
	result, err := uc.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = uc.QueryUser().Only(ctx)
	}
	return result, err
}

func (uc *UserContact) Contact(ctx context.Context) (*User, error) {
	result, err := uc.Edges.ContactOrErr()
	if IsNotLoaded(err) {
		result, err = uc.QueryContact().Only(ctx)
	}
	return result, err
}

func (uc *UserContact) Room(ctx context.Context) (*Room, error) {
	result, err := uc.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = uc.QueryRoom().Only(ctx)
	}
	return result, MaskNotFound(err)
}
