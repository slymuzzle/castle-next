// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (f *Friendship) User(ctx context.Context) (*User, error) {
	result, err := f.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryUser().Only(ctx)
	}
	return result, err
}

func (f *Friendship) Friend(ctx context.Context) (*User, error) {
	result, err := f.Edges.FriendOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryFriend().Only(ctx)
	}
	return result, err
}

func (f *Friendship) Room(ctx context.Context) (*Room, error) {
	result, err := f.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = f.QueryRoom().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) User(ctx context.Context) (*User, error) {
	result, err := m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryUser().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Message) Room(ctx context.Context) (*Room, error) {
	result, err := m.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryRoom().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (r *Room) Users(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[0][alias]
	if nodes, err := r.NamedUsers(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryUsers().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[1][alias]
	if nodes, err := r.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}

func (r *Room) RoomMembers(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *RoomMemberWhereInput,
) (*RoomMemberConnection, error) {
	opts := []RoomMemberPaginateOption{
		WithRoomMemberFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := r.Edges.totalCount[2][alias]
	if nodes, err := r.NamedRoomMembers(alias); err == nil || hasTotalCount {
		pager, err := newRoomMemberPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RoomMemberConnection{Edges: []*RoomMemberEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return r.QueryRoomMembers().Paginate(ctx, after, first, before, last, opts...)
}

func (rm *RoomMember) User(ctx context.Context) (*User, error) {
	result, err := rm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = rm.QueryUser().Only(ctx)
	}
	return result, err
}

func (rm *RoomMember) Room(ctx context.Context) (*Room, error) {
	result, err := rm.Edges.RoomOrErr()
	if IsNotLoaded(err) {
		result, err = rm.QueryRoom().Only(ctx)
	}
	return result, err
}

func (u *User) Friends(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*UserOrder, where *UserWhereInput,
) (*UserConnection, error) {
	opts := []UserPaginateOption{
		WithUserOrder(orderBy),
		WithUserFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[0][alias]
	if nodes, err := u.NamedFriends(alias); err == nil || hasTotalCount {
		pager, err := newUserPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &UserConnection{Edges: []*UserEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryFriends().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Rooms(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*RoomOrder, where *RoomWhereInput,
) (*RoomConnection, error) {
	opts := []RoomPaginateOption{
		WithRoomOrder(orderBy),
		WithRoomFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[1][alias]
	if nodes, err := u.NamedRooms(alias); err == nil || hasTotalCount {
		pager, err := newRoomPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RoomConnection{Edges: []*RoomEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryRooms().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Messages(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy []*MessageOrder, where *MessageWhereInput,
) (*MessageConnection, error) {
	opts := []MessagePaginateOption{
		WithMessageOrder(orderBy),
		WithMessageFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[2][alias]
	if nodes, err := u.NamedMessages(alias); err == nil || hasTotalCount {
		pager, err := newMessagePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MessageConnection{Edges: []*MessageEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryMessages().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Friendships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *FriendshipWhereInput,
) (*FriendshipConnection, error) {
	opts := []FriendshipPaginateOption{
		WithFriendshipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[3][alias]
	if nodes, err := u.NamedFriendships(alias); err == nil || hasTotalCount {
		pager, err := newFriendshipPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FriendshipConnection{Edges: []*FriendshipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryFriendships().Paginate(ctx, after, first, before, last, opts...)
}

func (u *User) Memberships(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *RoomMemberWhereInput,
) (*RoomMemberConnection, error) {
	opts := []RoomMemberPaginateOption{
		WithRoomMemberFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := u.Edges.totalCount[4][alias]
	if nodes, err := u.NamedMemberships(alias); err == nil || hasTotalCount {
		pager, err := newRoomMemberPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &RoomMemberConnection{Edges: []*RoomMemberEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return u.QueryMemberships().Paginate(ctx, after, first, before, last, opts...)
}
