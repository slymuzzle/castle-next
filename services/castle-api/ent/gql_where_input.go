// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/messagevoice"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"time"
)

// FileWhereInput represents a where input for filtering File queries.
type FileWhereInput struct {
	Predicates []predicate.File  `json:"-"`
	Not        *FileWhereInput   `json:"not,omitempty"`
	Or         []*FileWhereInput `json:"or,omitempty"`
	And        []*FileWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "content_type" field predicates.
	ContentType             *string  `json:"contentType,omitempty"`
	ContentTypeNEQ          *string  `json:"contentTypeNEQ,omitempty"`
	ContentTypeIn           []string `json:"contentTypeIn,omitempty"`
	ContentTypeNotIn        []string `json:"contentTypeNotIn,omitempty"`
	ContentTypeGT           *string  `json:"contentTypeGT,omitempty"`
	ContentTypeGTE          *string  `json:"contentTypeGTE,omitempty"`
	ContentTypeLT           *string  `json:"contentTypeLT,omitempty"`
	ContentTypeLTE          *string  `json:"contentTypeLTE,omitempty"`
	ContentTypeContains     *string  `json:"contentTypeContains,omitempty"`
	ContentTypeHasPrefix    *string  `json:"contentTypeHasPrefix,omitempty"`
	ContentTypeHasSuffix    *string  `json:"contentTypeHasSuffix,omitempty"`
	ContentTypeEqualFold    *string  `json:"contentTypeEqualFold,omitempty"`
	ContentTypeContainsFold *string  `json:"contentTypeContainsFold,omitempty"`

	// "size" field predicates.
	Size      *uint64  `json:"size,omitempty"`
	SizeNEQ   *uint64  `json:"sizeNEQ,omitempty"`
	SizeIn    []uint64 `json:"sizeIn,omitempty"`
	SizeNotIn []uint64 `json:"sizeNotIn,omitempty"`
	SizeGT    *uint64  `json:"sizeGT,omitempty"`
	SizeGTE   *uint64  `json:"sizeGTE,omitempty"`
	SizeLT    *uint64  `json:"sizeLT,omitempty"`
	SizeLTE   *uint64  `json:"sizeLTE,omitempty"`

	// "location" field predicates.
	Location             *string  `json:"location,omitempty"`
	LocationNEQ          *string  `json:"locationNEQ,omitempty"`
	LocationIn           []string `json:"locationIn,omitempty"`
	LocationNotIn        []string `json:"locationNotIn,omitempty"`
	LocationGT           *string  `json:"locationGT,omitempty"`
	LocationGTE          *string  `json:"locationGTE,omitempty"`
	LocationLT           *string  `json:"locationLT,omitempty"`
	LocationLTE          *string  `json:"locationLTE,omitempty"`
	LocationContains     *string  `json:"locationContains,omitempty"`
	LocationHasPrefix    *string  `json:"locationHasPrefix,omitempty"`
	LocationHasSuffix    *string  `json:"locationHasSuffix,omitempty"`
	LocationIsNil        bool     `json:"locationIsNil,omitempty"`
	LocationNotNil       bool     `json:"locationNotNil,omitempty"`
	LocationEqualFold    *string  `json:"locationEqualFold,omitempty"`
	LocationContainsFold *string  `json:"locationContainsFold,omitempty"`

	// "bucket" field predicates.
	Bucket             *string  `json:"bucket,omitempty"`
	BucketNEQ          *string  `json:"bucketNEQ,omitempty"`
	BucketIn           []string `json:"bucketIn,omitempty"`
	BucketNotIn        []string `json:"bucketNotIn,omitempty"`
	BucketGT           *string  `json:"bucketGT,omitempty"`
	BucketGTE          *string  `json:"bucketGTE,omitempty"`
	BucketLT           *string  `json:"bucketLT,omitempty"`
	BucketLTE          *string  `json:"bucketLTE,omitempty"`
	BucketContains     *string  `json:"bucketContains,omitempty"`
	BucketHasPrefix    *string  `json:"bucketHasPrefix,omitempty"`
	BucketHasSuffix    *string  `json:"bucketHasSuffix,omitempty"`
	BucketEqualFold    *string  `json:"bucketEqualFold,omitempty"`
	BucketContainsFold *string  `json:"bucketContainsFold,omitempty"`

	// "path" field predicates.
	Path             *string  `json:"path,omitempty"`
	PathNEQ          *string  `json:"pathNEQ,omitempty"`
	PathIn           []string `json:"pathIn,omitempty"`
	PathNotIn        []string `json:"pathNotIn,omitempty"`
	PathGT           *string  `json:"pathGT,omitempty"`
	PathGTE          *string  `json:"pathGTE,omitempty"`
	PathLT           *string  `json:"pathLT,omitempty"`
	PathLTE          *string  `json:"pathLTE,omitempty"`
	PathContains     *string  `json:"pathContains,omitempty"`
	PathHasPrefix    *string  `json:"pathHasPrefix,omitempty"`
	PathHasSuffix    *string  `json:"pathHasSuffix,omitempty"`
	PathEqualFold    *string  `json:"pathEqualFold,omitempty"`
	PathContainsFold *string  `json:"pathContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "message_attachment" edge predicates.
	HasMessageAttachment     *bool                          `json:"hasMessageAttachment,omitempty"`
	HasMessageAttachmentWith []*MessageAttachmentWhereInput `json:"hasMessageAttachmentWith,omitempty"`

	// "message_voice" edge predicates.
	HasMessageVoice     *bool                     `json:"hasMessageVoice,omitempty"`
	HasMessageVoiceWith []*MessageVoiceWhereInput `json:"hasMessageVoiceWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FileWhereInput) AddPredicates(predicates ...predicate.File) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FileWhereInput filter on the FileQuery builder.
func (i *FileWhereInput) Filter(q *FileQuery) (*FileQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFileWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFileWhereInput is returned in case the FileWhereInput is empty.
var ErrEmptyFileWhereInput = errors.New("ent: empty predicate FileWhereInput")

// P returns a predicate for filtering files.
// An error is returned if the input is empty or invalid.
func (i *FileWhereInput) P() (predicate.File, error) {
	var predicates []predicate.File
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, file.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.File, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, file.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.File, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, file.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, file.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, file.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, file.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, file.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, file.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, file.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, file.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, file.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, file.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, file.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, file.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, file.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, file.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, file.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, file.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, file.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, file.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, file.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, file.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, file.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, file.NameContainsFold(*i.NameContainsFold))
	}
	if i.ContentType != nil {
		predicates = append(predicates, file.ContentTypeEQ(*i.ContentType))
	}
	if i.ContentTypeNEQ != nil {
		predicates = append(predicates, file.ContentTypeNEQ(*i.ContentTypeNEQ))
	}
	if len(i.ContentTypeIn) > 0 {
		predicates = append(predicates, file.ContentTypeIn(i.ContentTypeIn...))
	}
	if len(i.ContentTypeNotIn) > 0 {
		predicates = append(predicates, file.ContentTypeNotIn(i.ContentTypeNotIn...))
	}
	if i.ContentTypeGT != nil {
		predicates = append(predicates, file.ContentTypeGT(*i.ContentTypeGT))
	}
	if i.ContentTypeGTE != nil {
		predicates = append(predicates, file.ContentTypeGTE(*i.ContentTypeGTE))
	}
	if i.ContentTypeLT != nil {
		predicates = append(predicates, file.ContentTypeLT(*i.ContentTypeLT))
	}
	if i.ContentTypeLTE != nil {
		predicates = append(predicates, file.ContentTypeLTE(*i.ContentTypeLTE))
	}
	if i.ContentTypeContains != nil {
		predicates = append(predicates, file.ContentTypeContains(*i.ContentTypeContains))
	}
	if i.ContentTypeHasPrefix != nil {
		predicates = append(predicates, file.ContentTypeHasPrefix(*i.ContentTypeHasPrefix))
	}
	if i.ContentTypeHasSuffix != nil {
		predicates = append(predicates, file.ContentTypeHasSuffix(*i.ContentTypeHasSuffix))
	}
	if i.ContentTypeEqualFold != nil {
		predicates = append(predicates, file.ContentTypeEqualFold(*i.ContentTypeEqualFold))
	}
	if i.ContentTypeContainsFold != nil {
		predicates = append(predicates, file.ContentTypeContainsFold(*i.ContentTypeContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, file.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, file.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, file.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, file.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, file.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, file.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, file.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, file.SizeLTE(*i.SizeLTE))
	}
	if i.Location != nil {
		predicates = append(predicates, file.LocationEQ(*i.Location))
	}
	if i.LocationNEQ != nil {
		predicates = append(predicates, file.LocationNEQ(*i.LocationNEQ))
	}
	if len(i.LocationIn) > 0 {
		predicates = append(predicates, file.LocationIn(i.LocationIn...))
	}
	if len(i.LocationNotIn) > 0 {
		predicates = append(predicates, file.LocationNotIn(i.LocationNotIn...))
	}
	if i.LocationGT != nil {
		predicates = append(predicates, file.LocationGT(*i.LocationGT))
	}
	if i.LocationGTE != nil {
		predicates = append(predicates, file.LocationGTE(*i.LocationGTE))
	}
	if i.LocationLT != nil {
		predicates = append(predicates, file.LocationLT(*i.LocationLT))
	}
	if i.LocationLTE != nil {
		predicates = append(predicates, file.LocationLTE(*i.LocationLTE))
	}
	if i.LocationContains != nil {
		predicates = append(predicates, file.LocationContains(*i.LocationContains))
	}
	if i.LocationHasPrefix != nil {
		predicates = append(predicates, file.LocationHasPrefix(*i.LocationHasPrefix))
	}
	if i.LocationHasSuffix != nil {
		predicates = append(predicates, file.LocationHasSuffix(*i.LocationHasSuffix))
	}
	if i.LocationIsNil {
		predicates = append(predicates, file.LocationIsNil())
	}
	if i.LocationNotNil {
		predicates = append(predicates, file.LocationNotNil())
	}
	if i.LocationEqualFold != nil {
		predicates = append(predicates, file.LocationEqualFold(*i.LocationEqualFold))
	}
	if i.LocationContainsFold != nil {
		predicates = append(predicates, file.LocationContainsFold(*i.LocationContainsFold))
	}
	if i.Bucket != nil {
		predicates = append(predicates, file.BucketEQ(*i.Bucket))
	}
	if i.BucketNEQ != nil {
		predicates = append(predicates, file.BucketNEQ(*i.BucketNEQ))
	}
	if len(i.BucketIn) > 0 {
		predicates = append(predicates, file.BucketIn(i.BucketIn...))
	}
	if len(i.BucketNotIn) > 0 {
		predicates = append(predicates, file.BucketNotIn(i.BucketNotIn...))
	}
	if i.BucketGT != nil {
		predicates = append(predicates, file.BucketGT(*i.BucketGT))
	}
	if i.BucketGTE != nil {
		predicates = append(predicates, file.BucketGTE(*i.BucketGTE))
	}
	if i.BucketLT != nil {
		predicates = append(predicates, file.BucketLT(*i.BucketLT))
	}
	if i.BucketLTE != nil {
		predicates = append(predicates, file.BucketLTE(*i.BucketLTE))
	}
	if i.BucketContains != nil {
		predicates = append(predicates, file.BucketContains(*i.BucketContains))
	}
	if i.BucketHasPrefix != nil {
		predicates = append(predicates, file.BucketHasPrefix(*i.BucketHasPrefix))
	}
	if i.BucketHasSuffix != nil {
		predicates = append(predicates, file.BucketHasSuffix(*i.BucketHasSuffix))
	}
	if i.BucketEqualFold != nil {
		predicates = append(predicates, file.BucketEqualFold(*i.BucketEqualFold))
	}
	if i.BucketContainsFold != nil {
		predicates = append(predicates, file.BucketContainsFold(*i.BucketContainsFold))
	}
	if i.Path != nil {
		predicates = append(predicates, file.PathEQ(*i.Path))
	}
	if i.PathNEQ != nil {
		predicates = append(predicates, file.PathNEQ(*i.PathNEQ))
	}
	if len(i.PathIn) > 0 {
		predicates = append(predicates, file.PathIn(i.PathIn...))
	}
	if len(i.PathNotIn) > 0 {
		predicates = append(predicates, file.PathNotIn(i.PathNotIn...))
	}
	if i.PathGT != nil {
		predicates = append(predicates, file.PathGT(*i.PathGT))
	}
	if i.PathGTE != nil {
		predicates = append(predicates, file.PathGTE(*i.PathGTE))
	}
	if i.PathLT != nil {
		predicates = append(predicates, file.PathLT(*i.PathLT))
	}
	if i.PathLTE != nil {
		predicates = append(predicates, file.PathLTE(*i.PathLTE))
	}
	if i.PathContains != nil {
		predicates = append(predicates, file.PathContains(*i.PathContains))
	}
	if i.PathHasPrefix != nil {
		predicates = append(predicates, file.PathHasPrefix(*i.PathHasPrefix))
	}
	if i.PathHasSuffix != nil {
		predicates = append(predicates, file.PathHasSuffix(*i.PathHasSuffix))
	}
	if i.PathEqualFold != nil {
		predicates = append(predicates, file.PathEqualFold(*i.PathEqualFold))
	}
	if i.PathContainsFold != nil {
		predicates = append(predicates, file.PathContainsFold(*i.PathContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, file.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, file.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, file.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, file.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, file.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, file.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, file.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, file.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, file.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, file.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, file.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, file.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, file.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, file.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, file.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, file.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasMessageAttachment != nil {
		p := file.HasMessageAttachment()
		if !*i.HasMessageAttachment {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageAttachmentWith) > 0 {
		with := make([]predicate.MessageAttachment, 0, len(i.HasMessageAttachmentWith))
		for _, w := range i.HasMessageAttachmentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageAttachmentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasMessageAttachmentWith(with...))
	}
	if i.HasMessageVoice != nil {
		p := file.HasMessageVoice()
		if !*i.HasMessageVoice {
			p = file.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageVoiceWith) > 0 {
		with := make([]predicate.MessageVoice, 0, len(i.HasMessageVoiceWith))
		for _, w := range i.HasMessageVoiceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageVoiceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, file.HasMessageVoiceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFileWhereInput
	case 1:
		return predicates[0], nil
	default:
		return file.And(predicates...), nil
	}
}

// MessageWhereInput represents a where input for filtering Message queries.
type MessageWhereInput struct {
	Predicates []predicate.Message  `json:"-"`
	Not        *MessageWhereInput   `json:"not,omitempty"`
	Or         []*MessageWhereInput `json:"or,omitempty"`
	And        []*MessageWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "voice" edge predicates.
	HasVoice     *bool                     `json:"hasVoice,omitempty"`
	HasVoiceWith []*MessageVoiceWhereInput `json:"hasVoiceWith,omitempty"`

	// "reply_to" edge predicates.
	HasReplyTo     *bool                `json:"hasReplyTo,omitempty"`
	HasReplyToWith []*MessageWhereInput `json:"hasReplyToWith,omitempty"`

	// "attachments" edge predicates.
	HasAttachments     *bool                          `json:"hasAttachments,omitempty"`
	HasAttachmentsWith []*MessageAttachmentWhereInput `json:"hasAttachmentsWith,omitempty"`

	// "links" edge predicates.
	HasLinks     *bool                    `json:"hasLinks,omitempty"`
	HasLinksWith []*MessageLinkWhereInput `json:"hasLinksWith,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MessageWhereInput) AddPredicates(predicates ...predicate.Message) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MessageWhereInput filter on the MessageQuery builder.
func (i *MessageWhereInput) Filter(q *MessageQuery) (*MessageQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMessageWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMessageWhereInput is returned in case the MessageWhereInput is empty.
var ErrEmptyMessageWhereInput = errors.New("ent: empty predicate MessageWhereInput")

// P returns a predicate for filtering messages.
// An error is returned if the input is empty or invalid.
func (i *MessageWhereInput) P() (predicate.Message, error) {
	var predicates []predicate.Message
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, message.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Message, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, message.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Message, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, message.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, message.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, message.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, message.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, message.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, message.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, message.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, message.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, message.IDLTE(*i.IDLTE))
	}
	if i.Content != nil {
		predicates = append(predicates, message.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, message.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, message.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, message.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, message.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, message.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, message.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, message.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, message.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, message.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, message.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, message.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, message.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, message.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, message.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, message.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, message.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, message.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, message.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, message.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, message.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, message.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, message.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, message.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, message.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, message.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, message.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, message.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, message.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasVoice != nil {
		p := message.HasVoice()
		if !*i.HasVoice {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasVoiceWith) > 0 {
		with := make([]predicate.MessageVoice, 0, len(i.HasVoiceWith))
		for _, w := range i.HasVoiceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasVoiceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasVoiceWith(with...))
	}
	if i.HasReplyTo != nil {
		p := message.HasReplyTo()
		if !*i.HasReplyTo {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReplyToWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasReplyToWith))
		for _, w := range i.HasReplyToWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasReplyToWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasReplyToWith(with...))
	}
	if i.HasAttachments != nil {
		p := message.HasAttachments()
		if !*i.HasAttachments {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAttachmentsWith) > 0 {
		with := make([]predicate.MessageAttachment, 0, len(i.HasAttachmentsWith))
		for _, w := range i.HasAttachmentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAttachmentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasAttachmentsWith(with...))
	}
	if i.HasLinks != nil {
		p := message.HasLinks()
		if !*i.HasLinks {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasLinksWith) > 0 {
		with := make([]predicate.MessageLink, 0, len(i.HasLinksWith))
		for _, w := range i.HasLinksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasLinksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasLinksWith(with...))
	}
	if i.HasUser != nil {
		p := message.HasUser()
		if !*i.HasUser {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasUserWith(with...))
	}
	if i.HasRoom != nil {
		p := message.HasRoom()
		if !*i.HasRoom {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMessageWhereInput
	case 1:
		return predicates[0], nil
	default:
		return message.And(predicates...), nil
	}
}

// MessageAttachmentWhereInput represents a where input for filtering MessageAttachment queries.
type MessageAttachmentWhereInput struct {
	Predicates []predicate.MessageAttachment  `json:"-"`
	Not        *MessageAttachmentWhereInput   `json:"not,omitempty"`
	Or         []*MessageAttachmentWhereInput `json:"or,omitempty"`
	And        []*MessageAttachmentWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "order" field predicates.
	Order      *uint  `json:"order,omitempty"`
	OrderNEQ   *uint  `json:"orderNEQ,omitempty"`
	OrderIn    []uint `json:"orderIn,omitempty"`
	OrderNotIn []uint `json:"orderNotIn,omitempty"`
	OrderGT    *uint  `json:"orderGT,omitempty"`
	OrderGTE   *uint  `json:"orderGTE,omitempty"`
	OrderLT    *uint  `json:"orderLT,omitempty"`
	OrderLTE   *uint  `json:"orderLTE,omitempty"`

	// "attached_at" field predicates.
	AttachedAt      *time.Time  `json:"attachedAt,omitempty"`
	AttachedAtNEQ   *time.Time  `json:"attachedAtNEQ,omitempty"`
	AttachedAtIn    []time.Time `json:"attachedAtIn,omitempty"`
	AttachedAtNotIn []time.Time `json:"attachedAtNotIn,omitempty"`
	AttachedAtGT    *time.Time  `json:"attachedAtGT,omitempty"`
	AttachedAtGTE   *time.Time  `json:"attachedAtGTE,omitempty"`
	AttachedAtLT    *time.Time  `json:"attachedAtLT,omitempty"`
	AttachedAtLTE   *time.Time  `json:"attachedAtLTE,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`

	// "message" edge predicates.
	HasMessage     *bool                `json:"hasMessage,omitempty"`
	HasMessageWith []*MessageWhereInput `json:"hasMessageWith,omitempty"`

	// "file" edge predicates.
	HasFile     *bool             `json:"hasFile,omitempty"`
	HasFileWith []*FileWhereInput `json:"hasFileWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MessageAttachmentWhereInput) AddPredicates(predicates ...predicate.MessageAttachment) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MessageAttachmentWhereInput filter on the MessageAttachmentQuery builder.
func (i *MessageAttachmentWhereInput) Filter(q *MessageAttachmentQuery) (*MessageAttachmentQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMessageAttachmentWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMessageAttachmentWhereInput is returned in case the MessageAttachmentWhereInput is empty.
var ErrEmptyMessageAttachmentWhereInput = errors.New("ent: empty predicate MessageAttachmentWhereInput")

// P returns a predicate for filtering messageattachments.
// An error is returned if the input is empty or invalid.
func (i *MessageAttachmentWhereInput) P() (predicate.MessageAttachment, error) {
	var predicates []predicate.MessageAttachment
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, messageattachment.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.MessageAttachment, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, messageattachment.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.MessageAttachment, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, messageattachment.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, messageattachment.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, messageattachment.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, messageattachment.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, messageattachment.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, messageattachment.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, messageattachment.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, messageattachment.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, messageattachment.IDLTE(*i.IDLTE))
	}
	if i.Order != nil {
		predicates = append(predicates, messageattachment.OrderEQ(*i.Order))
	}
	if i.OrderNEQ != nil {
		predicates = append(predicates, messageattachment.OrderNEQ(*i.OrderNEQ))
	}
	if len(i.OrderIn) > 0 {
		predicates = append(predicates, messageattachment.OrderIn(i.OrderIn...))
	}
	if len(i.OrderNotIn) > 0 {
		predicates = append(predicates, messageattachment.OrderNotIn(i.OrderNotIn...))
	}
	if i.OrderGT != nil {
		predicates = append(predicates, messageattachment.OrderGT(*i.OrderGT))
	}
	if i.OrderGTE != nil {
		predicates = append(predicates, messageattachment.OrderGTE(*i.OrderGTE))
	}
	if i.OrderLT != nil {
		predicates = append(predicates, messageattachment.OrderLT(*i.OrderLT))
	}
	if i.OrderLTE != nil {
		predicates = append(predicates, messageattachment.OrderLTE(*i.OrderLTE))
	}
	if i.AttachedAt != nil {
		predicates = append(predicates, messageattachment.AttachedAtEQ(*i.AttachedAt))
	}
	if i.AttachedAtNEQ != nil {
		predicates = append(predicates, messageattachment.AttachedAtNEQ(*i.AttachedAtNEQ))
	}
	if len(i.AttachedAtIn) > 0 {
		predicates = append(predicates, messageattachment.AttachedAtIn(i.AttachedAtIn...))
	}
	if len(i.AttachedAtNotIn) > 0 {
		predicates = append(predicates, messageattachment.AttachedAtNotIn(i.AttachedAtNotIn...))
	}
	if i.AttachedAtGT != nil {
		predicates = append(predicates, messageattachment.AttachedAtGT(*i.AttachedAtGT))
	}
	if i.AttachedAtGTE != nil {
		predicates = append(predicates, messageattachment.AttachedAtGTE(*i.AttachedAtGTE))
	}
	if i.AttachedAtLT != nil {
		predicates = append(predicates, messageattachment.AttachedAtLT(*i.AttachedAtLT))
	}
	if i.AttachedAtLTE != nil {
		predicates = append(predicates, messageattachment.AttachedAtLTE(*i.AttachedAtLTE))
	}

	if i.HasRoom != nil {
		p := messageattachment.HasRoom()
		if !*i.HasRoom {
			p = messageattachment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messageattachment.HasRoomWith(with...))
	}
	if i.HasMessage != nil {
		p := messageattachment.HasMessage()
		if !*i.HasMessage {
			p = messageattachment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessageWith))
		for _, w := range i.HasMessageWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messageattachment.HasMessageWith(with...))
	}
	if i.HasFile != nil {
		p := messageattachment.HasFile()
		if !*i.HasFile {
			p = messageattachment.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFileWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFileWith))
		for _, w := range i.HasFileWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFileWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messageattachment.HasFileWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMessageAttachmentWhereInput
	case 1:
		return predicates[0], nil
	default:
		return messageattachment.And(predicates...), nil
	}
}

// MessageLinkWhereInput represents a where input for filtering MessageLink queries.
type MessageLinkWhereInput struct {
	Predicates []predicate.MessageLink  `json:"-"`
	Not        *MessageLinkWhereInput   `json:"not,omitempty"`
	Or         []*MessageLinkWhereInput `json:"or,omitempty"`
	And        []*MessageLinkWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "url" field predicates.
	URL             *string  `json:"url,omitempty"`
	URLNEQ          *string  `json:"urlNEQ,omitempty"`
	URLIn           []string `json:"urlIn,omitempty"`
	URLNotIn        []string `json:"urlNotIn,omitempty"`
	URLGT           *string  `json:"urlGT,omitempty"`
	URLGTE          *string  `json:"urlGTE,omitempty"`
	URLLT           *string  `json:"urlLT,omitempty"`
	URLLTE          *string  `json:"urlLTE,omitempty"`
	URLContains     *string  `json:"urlContains,omitempty"`
	URLHasPrefix    *string  `json:"urlHasPrefix,omitempty"`
	URLHasSuffix    *string  `json:"urlHasSuffix,omitempty"`
	URLEqualFold    *string  `json:"urlEqualFold,omitempty"`
	URLContainsFold *string  `json:"urlContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`

	// "message" edge predicates.
	HasMessage     *bool                `json:"hasMessage,omitempty"`
	HasMessageWith []*MessageWhereInput `json:"hasMessageWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MessageLinkWhereInput) AddPredicates(predicates ...predicate.MessageLink) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MessageLinkWhereInput filter on the MessageLinkQuery builder.
func (i *MessageLinkWhereInput) Filter(q *MessageLinkQuery) (*MessageLinkQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMessageLinkWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMessageLinkWhereInput is returned in case the MessageLinkWhereInput is empty.
var ErrEmptyMessageLinkWhereInput = errors.New("ent: empty predicate MessageLinkWhereInput")

// P returns a predicate for filtering messagelinks.
// An error is returned if the input is empty or invalid.
func (i *MessageLinkWhereInput) P() (predicate.MessageLink, error) {
	var predicates []predicate.MessageLink
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, messagelink.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.MessageLink, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, messagelink.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.MessageLink, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, messagelink.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, messagelink.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, messagelink.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, messagelink.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, messagelink.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, messagelink.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, messagelink.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, messagelink.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, messagelink.IDLTE(*i.IDLTE))
	}
	if i.URL != nil {
		predicates = append(predicates, messagelink.URLEQ(*i.URL))
	}
	if i.URLNEQ != nil {
		predicates = append(predicates, messagelink.URLNEQ(*i.URLNEQ))
	}
	if len(i.URLIn) > 0 {
		predicates = append(predicates, messagelink.URLIn(i.URLIn...))
	}
	if len(i.URLNotIn) > 0 {
		predicates = append(predicates, messagelink.URLNotIn(i.URLNotIn...))
	}
	if i.URLGT != nil {
		predicates = append(predicates, messagelink.URLGT(*i.URLGT))
	}
	if i.URLGTE != nil {
		predicates = append(predicates, messagelink.URLGTE(*i.URLGTE))
	}
	if i.URLLT != nil {
		predicates = append(predicates, messagelink.URLLT(*i.URLLT))
	}
	if i.URLLTE != nil {
		predicates = append(predicates, messagelink.URLLTE(*i.URLLTE))
	}
	if i.URLContains != nil {
		predicates = append(predicates, messagelink.URLContains(*i.URLContains))
	}
	if i.URLHasPrefix != nil {
		predicates = append(predicates, messagelink.URLHasPrefix(*i.URLHasPrefix))
	}
	if i.URLHasSuffix != nil {
		predicates = append(predicates, messagelink.URLHasSuffix(*i.URLHasSuffix))
	}
	if i.URLEqualFold != nil {
		predicates = append(predicates, messagelink.URLEqualFold(*i.URLEqualFold))
	}
	if i.URLContainsFold != nil {
		predicates = append(predicates, messagelink.URLContainsFold(*i.URLContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, messagelink.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, messagelink.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, messagelink.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, messagelink.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, messagelink.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, messagelink.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, messagelink.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, messagelink.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, messagelink.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, messagelink.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, messagelink.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, messagelink.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, messagelink.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, messagelink.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, messagelink.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, messagelink.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasRoom != nil {
		p := messagelink.HasRoom()
		if !*i.HasRoom {
			p = messagelink.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messagelink.HasRoomWith(with...))
	}
	if i.HasMessage != nil {
		p := messagelink.HasMessage()
		if !*i.HasMessage {
			p = messagelink.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessageWith))
		for _, w := range i.HasMessageWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messagelink.HasMessageWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMessageLinkWhereInput
	case 1:
		return predicates[0], nil
	default:
		return messagelink.And(predicates...), nil
	}
}

// MessageVoiceWhereInput represents a where input for filtering MessageVoice queries.
type MessageVoiceWhereInput struct {
	Predicates []predicate.MessageVoice  `json:"-"`
	Not        *MessageVoiceWhereInput   `json:"not,omitempty"`
	Or         []*MessageVoiceWhereInput `json:"or,omitempty"`
	And        []*MessageVoiceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "attached_at" field predicates.
	AttachedAt      *time.Time  `json:"attachedAt,omitempty"`
	AttachedAtNEQ   *time.Time  `json:"attachedAtNEQ,omitempty"`
	AttachedAtIn    []time.Time `json:"attachedAtIn,omitempty"`
	AttachedAtNotIn []time.Time `json:"attachedAtNotIn,omitempty"`
	AttachedAtGT    *time.Time  `json:"attachedAtGT,omitempty"`
	AttachedAtGTE   *time.Time  `json:"attachedAtGTE,omitempty"`
	AttachedAtLT    *time.Time  `json:"attachedAtLT,omitempty"`
	AttachedAtLTE   *time.Time  `json:"attachedAtLTE,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`

	// "message" edge predicates.
	HasMessage     *bool                `json:"hasMessage,omitempty"`
	HasMessageWith []*MessageWhereInput `json:"hasMessageWith,omitempty"`

	// "file" edge predicates.
	HasFile     *bool             `json:"hasFile,omitempty"`
	HasFileWith []*FileWhereInput `json:"hasFileWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MessageVoiceWhereInput) AddPredicates(predicates ...predicate.MessageVoice) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MessageVoiceWhereInput filter on the MessageVoiceQuery builder.
func (i *MessageVoiceWhereInput) Filter(q *MessageVoiceQuery) (*MessageVoiceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMessageVoiceWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMessageVoiceWhereInput is returned in case the MessageVoiceWhereInput is empty.
var ErrEmptyMessageVoiceWhereInput = errors.New("ent: empty predicate MessageVoiceWhereInput")

// P returns a predicate for filtering messagevoices.
// An error is returned if the input is empty or invalid.
func (i *MessageVoiceWhereInput) P() (predicate.MessageVoice, error) {
	var predicates []predicate.MessageVoice
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, messagevoice.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.MessageVoice, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, messagevoice.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.MessageVoice, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, messagevoice.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, messagevoice.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, messagevoice.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, messagevoice.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, messagevoice.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, messagevoice.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, messagevoice.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, messagevoice.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, messagevoice.IDLTE(*i.IDLTE))
	}
	if i.AttachedAt != nil {
		predicates = append(predicates, messagevoice.AttachedAtEQ(*i.AttachedAt))
	}
	if i.AttachedAtNEQ != nil {
		predicates = append(predicates, messagevoice.AttachedAtNEQ(*i.AttachedAtNEQ))
	}
	if len(i.AttachedAtIn) > 0 {
		predicates = append(predicates, messagevoice.AttachedAtIn(i.AttachedAtIn...))
	}
	if len(i.AttachedAtNotIn) > 0 {
		predicates = append(predicates, messagevoice.AttachedAtNotIn(i.AttachedAtNotIn...))
	}
	if i.AttachedAtGT != nil {
		predicates = append(predicates, messagevoice.AttachedAtGT(*i.AttachedAtGT))
	}
	if i.AttachedAtGTE != nil {
		predicates = append(predicates, messagevoice.AttachedAtGTE(*i.AttachedAtGTE))
	}
	if i.AttachedAtLT != nil {
		predicates = append(predicates, messagevoice.AttachedAtLT(*i.AttachedAtLT))
	}
	if i.AttachedAtLTE != nil {
		predicates = append(predicates, messagevoice.AttachedAtLTE(*i.AttachedAtLTE))
	}

	if i.HasRoom != nil {
		p := messagevoice.HasRoom()
		if !*i.HasRoom {
			p = messagevoice.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messagevoice.HasRoomWith(with...))
	}
	if i.HasMessage != nil {
		p := messagevoice.HasMessage()
		if !*i.HasMessage {
			p = messagevoice.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessageWith))
		for _, w := range i.HasMessageWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messagevoice.HasMessageWith(with...))
	}
	if i.HasFile != nil {
		p := messagevoice.HasFile()
		if !*i.HasFile {
			p = messagevoice.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFileWith) > 0 {
		with := make([]predicate.File, 0, len(i.HasFileWith))
		for _, w := range i.HasFileWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFileWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, messagevoice.HasFileWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMessageVoiceWhereInput
	case 1:
		return predicates[0], nil
	default:
		return messagevoice.And(predicates...), nil
	}
}

// RoomWhereInput represents a where input for filtering Room queries.
type RoomWhereInput struct {
	Predicates []predicate.Room  `json:"-"`
	Not        *RoomWhereInput   `json:"not,omitempty"`
	Or         []*RoomWhereInput `json:"or,omitempty"`
	And        []*RoomWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "version" field predicates.
	Version      *uint64  `json:"version,omitempty"`
	VersionNEQ   *uint64  `json:"versionNEQ,omitempty"`
	VersionIn    []uint64 `json:"versionIn,omitempty"`
	VersionNotIn []uint64 `json:"versionNotIn,omitempty"`
	VersionGT    *uint64  `json:"versionGT,omitempty"`
	VersionGTE   *uint64  `json:"versionGTE,omitempty"`
	VersionLT    *uint64  `json:"versionLT,omitempty"`
	VersionLTE   *uint64  `json:"versionLTE,omitempty"`

	// "type" field predicates.
	Type      *room.Type  `json:"type,omitempty"`
	TypeNEQ   *room.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []room.Type `json:"typeIn,omitempty"`
	TypeNotIn []room.Type `json:"typeNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "messages" edge predicates.
	HasMessages     *bool                `json:"hasMessages,omitempty"`
	HasMessagesWith []*MessageWhereInput `json:"hasMessagesWith,omitempty"`

	// "message_voices" edge predicates.
	HasMessageVoices     *bool                     `json:"hasMessageVoices,omitempty"`
	HasMessageVoicesWith []*MessageVoiceWhereInput `json:"hasMessageVoicesWith,omitempty"`

	// "message_attachments" edge predicates.
	HasMessageAttachments     *bool                          `json:"hasMessageAttachments,omitempty"`
	HasMessageAttachmentsWith []*MessageAttachmentWhereInput `json:"hasMessageAttachmentsWith,omitempty"`

	// "message_links" edge predicates.
	HasMessageLinks     *bool                    `json:"hasMessageLinks,omitempty"`
	HasMessageLinksWith []*MessageLinkWhereInput `json:"hasMessageLinksWith,omitempty"`

	// "room_members" edge predicates.
	HasRoomMembers     *bool                   `json:"hasRoomMembers,omitempty"`
	HasRoomMembersWith []*RoomMemberWhereInput `json:"hasRoomMembersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoomWhereInput) AddPredicates(predicates ...predicate.Room) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoomWhereInput filter on the RoomQuery builder.
func (i *RoomWhereInput) Filter(q *RoomQuery) (*RoomQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoomWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoomWhereInput is returned in case the RoomWhereInput is empty.
var ErrEmptyRoomWhereInput = errors.New("ent: empty predicate RoomWhereInput")

// P returns a predicate for filtering rooms.
// An error is returned if the input is empty or invalid.
func (i *RoomWhereInput) P() (predicate.Room, error) {
	var predicates []predicate.Room
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, room.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Room, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, room.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Room, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, room.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, room.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, room.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, room.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, room.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, room.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, room.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, room.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, room.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, room.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, room.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, room.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, room.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, room.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, room.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, room.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, room.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, room.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, room.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, room.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, room.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, room.NameContainsFold(*i.NameContainsFold))
	}
	if i.Version != nil {
		predicates = append(predicates, room.VersionEQ(*i.Version))
	}
	if i.VersionNEQ != nil {
		predicates = append(predicates, room.VersionNEQ(*i.VersionNEQ))
	}
	if len(i.VersionIn) > 0 {
		predicates = append(predicates, room.VersionIn(i.VersionIn...))
	}
	if len(i.VersionNotIn) > 0 {
		predicates = append(predicates, room.VersionNotIn(i.VersionNotIn...))
	}
	if i.VersionGT != nil {
		predicates = append(predicates, room.VersionGT(*i.VersionGT))
	}
	if i.VersionGTE != nil {
		predicates = append(predicates, room.VersionGTE(*i.VersionGTE))
	}
	if i.VersionLT != nil {
		predicates = append(predicates, room.VersionLT(*i.VersionLT))
	}
	if i.VersionLTE != nil {
		predicates = append(predicates, room.VersionLTE(*i.VersionLTE))
	}
	if i.Type != nil {
		predicates = append(predicates, room.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, room.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, room.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, room.TypeNotIn(i.TypeNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, room.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, room.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, room.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, room.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, room.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, room.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, room.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, room.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, room.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, room.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, room.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, room.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, room.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, room.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, room.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, room.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasUsers != nil {
		p := room.HasUsers()
		if !*i.HasUsers {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasUsersWith(with...))
	}
	if i.HasMessages != nil {
		p := room.HasMessages()
		if !*i.HasMessages {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessagesWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessagesWith))
		for _, w := range i.HasMessagesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessagesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasMessagesWith(with...))
	}
	if i.HasMessageVoices != nil {
		p := room.HasMessageVoices()
		if !*i.HasMessageVoices {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageVoicesWith) > 0 {
		with := make([]predicate.MessageVoice, 0, len(i.HasMessageVoicesWith))
		for _, w := range i.HasMessageVoicesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageVoicesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasMessageVoicesWith(with...))
	}
	if i.HasMessageAttachments != nil {
		p := room.HasMessageAttachments()
		if !*i.HasMessageAttachments {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageAttachmentsWith) > 0 {
		with := make([]predicate.MessageAttachment, 0, len(i.HasMessageAttachmentsWith))
		for _, w := range i.HasMessageAttachmentsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageAttachmentsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasMessageAttachmentsWith(with...))
	}
	if i.HasMessageLinks != nil {
		p := room.HasMessageLinks()
		if !*i.HasMessageLinks {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessageLinksWith) > 0 {
		with := make([]predicate.MessageLink, 0, len(i.HasMessageLinksWith))
		for _, w := range i.HasMessageLinksWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessageLinksWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasMessageLinksWith(with...))
	}
	if i.HasRoomMembers != nil {
		p := room.HasRoomMembers()
		if !*i.HasRoomMembers {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomMembersWith) > 0 {
		with := make([]predicate.RoomMember, 0, len(i.HasRoomMembersWith))
		for _, w := range i.HasRoomMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomMembersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasRoomMembersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoomWhereInput
	case 1:
		return predicates[0], nil
	default:
		return room.And(predicates...), nil
	}
}

// RoomMemberWhereInput represents a where input for filtering RoomMember queries.
type RoomMemberWhereInput struct {
	Predicates []predicate.RoomMember  `json:"-"`
	Not        *RoomMemberWhereInput   `json:"not,omitempty"`
	Or         []*RoomMemberWhereInput `json:"or,omitempty"`
	And        []*RoomMemberWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *pulid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *pulid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []pulid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []pulid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *pulid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *pulid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *pulid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *pulid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *pulid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *pulid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *pulid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *pulid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *pulid.ID  `json:"userIDContainsFold,omitempty"`

	// "room_id" field predicates.
	RoomID             *pulid.ID  `json:"roomID,omitempty"`
	RoomIDNEQ          *pulid.ID  `json:"roomIDNEQ,omitempty"`
	RoomIDIn           []pulid.ID `json:"roomIDIn,omitempty"`
	RoomIDNotIn        []pulid.ID `json:"roomIDNotIn,omitempty"`
	RoomIDGT           *pulid.ID  `json:"roomIDGT,omitempty"`
	RoomIDGTE          *pulid.ID  `json:"roomIDGTE,omitempty"`
	RoomIDLT           *pulid.ID  `json:"roomIDLT,omitempty"`
	RoomIDLTE          *pulid.ID  `json:"roomIDLTE,omitempty"`
	RoomIDContains     *pulid.ID  `json:"roomIDContains,omitempty"`
	RoomIDHasPrefix    *pulid.ID  `json:"roomIDHasPrefix,omitempty"`
	RoomIDHasSuffix    *pulid.ID  `json:"roomIDHasSuffix,omitempty"`
	RoomIDEqualFold    *pulid.ID  `json:"roomIDEqualFold,omitempty"`
	RoomIDContainsFold *pulid.ID  `json:"roomIDContainsFold,omitempty"`

	// "joined_at" field predicates.
	JoinedAt      *time.Time  `json:"joinedAt,omitempty"`
	JoinedAtNEQ   *time.Time  `json:"joinedAtNEQ,omitempty"`
	JoinedAtIn    []time.Time `json:"joinedAtIn,omitempty"`
	JoinedAtNotIn []time.Time `json:"joinedAtNotIn,omitempty"`
	JoinedAtGT    *time.Time  `json:"joinedAtGT,omitempty"`
	JoinedAtGTE   *time.Time  `json:"joinedAtGTE,omitempty"`
	JoinedAtLT    *time.Time  `json:"joinedAtLT,omitempty"`
	JoinedAtLTE   *time.Time  `json:"joinedAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoomMemberWhereInput) AddPredicates(predicates ...predicate.RoomMember) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoomMemberWhereInput filter on the RoomMemberQuery builder.
func (i *RoomMemberWhereInput) Filter(q *RoomMemberQuery) (*RoomMemberQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoomMemberWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoomMemberWhereInput is returned in case the RoomMemberWhereInput is empty.
var ErrEmptyRoomMemberWhereInput = errors.New("ent: empty predicate RoomMemberWhereInput")

// P returns a predicate for filtering roommembers.
// An error is returned if the input is empty or invalid.
func (i *RoomMemberWhereInput) P() (predicate.RoomMember, error) {
	var predicates []predicate.RoomMember
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, roommember.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.RoomMember, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, roommember.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.RoomMember, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, roommember.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, roommember.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, roommember.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, roommember.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, roommember.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, roommember.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, roommember.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, roommember.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, roommember.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, roommember.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, roommember.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, roommember.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, roommember.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, roommember.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, roommember.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, roommember.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, roommember.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, roommember.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, roommember.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, roommember.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, roommember.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, roommember.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.RoomID != nil {
		predicates = append(predicates, roommember.RoomIDEQ(*i.RoomID))
	}
	if i.RoomIDNEQ != nil {
		predicates = append(predicates, roommember.RoomIDNEQ(*i.RoomIDNEQ))
	}
	if len(i.RoomIDIn) > 0 {
		predicates = append(predicates, roommember.RoomIDIn(i.RoomIDIn...))
	}
	if len(i.RoomIDNotIn) > 0 {
		predicates = append(predicates, roommember.RoomIDNotIn(i.RoomIDNotIn...))
	}
	if i.RoomIDGT != nil {
		predicates = append(predicates, roommember.RoomIDGT(*i.RoomIDGT))
	}
	if i.RoomIDGTE != nil {
		predicates = append(predicates, roommember.RoomIDGTE(*i.RoomIDGTE))
	}
	if i.RoomIDLT != nil {
		predicates = append(predicates, roommember.RoomIDLT(*i.RoomIDLT))
	}
	if i.RoomIDLTE != nil {
		predicates = append(predicates, roommember.RoomIDLTE(*i.RoomIDLTE))
	}
	if i.RoomIDContains != nil {
		predicates = append(predicates, roommember.RoomIDContains(*i.RoomIDContains))
	}
	if i.RoomIDHasPrefix != nil {
		predicates = append(predicates, roommember.RoomIDHasPrefix(*i.RoomIDHasPrefix))
	}
	if i.RoomIDHasSuffix != nil {
		predicates = append(predicates, roommember.RoomIDHasSuffix(*i.RoomIDHasSuffix))
	}
	if i.RoomIDEqualFold != nil {
		predicates = append(predicates, roommember.RoomIDEqualFold(*i.RoomIDEqualFold))
	}
	if i.RoomIDContainsFold != nil {
		predicates = append(predicates, roommember.RoomIDContainsFold(*i.RoomIDContainsFold))
	}
	if i.JoinedAt != nil {
		predicates = append(predicates, roommember.JoinedAtEQ(*i.JoinedAt))
	}
	if i.JoinedAtNEQ != nil {
		predicates = append(predicates, roommember.JoinedAtNEQ(*i.JoinedAtNEQ))
	}
	if len(i.JoinedAtIn) > 0 {
		predicates = append(predicates, roommember.JoinedAtIn(i.JoinedAtIn...))
	}
	if len(i.JoinedAtNotIn) > 0 {
		predicates = append(predicates, roommember.JoinedAtNotIn(i.JoinedAtNotIn...))
	}
	if i.JoinedAtGT != nil {
		predicates = append(predicates, roommember.JoinedAtGT(*i.JoinedAtGT))
	}
	if i.JoinedAtGTE != nil {
		predicates = append(predicates, roommember.JoinedAtGTE(*i.JoinedAtGTE))
	}
	if i.JoinedAtLT != nil {
		predicates = append(predicates, roommember.JoinedAtLT(*i.JoinedAtLT))
	}
	if i.JoinedAtLTE != nil {
		predicates = append(predicates, roommember.JoinedAtLTE(*i.JoinedAtLTE))
	}

	if i.HasUser != nil {
		p := roommember.HasUser()
		if !*i.HasUser {
			p = roommember.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, roommember.HasUserWith(with...))
	}
	if i.HasRoom != nil {
		p := roommember.HasRoom()
		if !*i.HasRoom {
			p = roommember.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, roommember.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoomMemberWhereInput
	case 1:
		return predicates[0], nil
	default:
		return roommember.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "first_name" field predicates.
	FirstName             *string  `json:"firstName,omitempty"`
	FirstNameNEQ          *string  `json:"firstNameNEQ,omitempty"`
	FirstNameIn           []string `json:"firstNameIn,omitempty"`
	FirstNameNotIn        []string `json:"firstNameNotIn,omitempty"`
	FirstNameGT           *string  `json:"firstNameGT,omitempty"`
	FirstNameGTE          *string  `json:"firstNameGTE,omitempty"`
	FirstNameLT           *string  `json:"firstNameLT,omitempty"`
	FirstNameLTE          *string  `json:"firstNameLTE,omitempty"`
	FirstNameContains     *string  `json:"firstNameContains,omitempty"`
	FirstNameHasPrefix    *string  `json:"firstNameHasPrefix,omitempty"`
	FirstNameHasSuffix    *string  `json:"firstNameHasSuffix,omitempty"`
	FirstNameEqualFold    *string  `json:"firstNameEqualFold,omitempty"`
	FirstNameContainsFold *string  `json:"firstNameContainsFold,omitempty"`

	// "last_name" field predicates.
	LastName             *string  `json:"lastName,omitempty"`
	LastNameNEQ          *string  `json:"lastNameNEQ,omitempty"`
	LastNameIn           []string `json:"lastNameIn,omitempty"`
	LastNameNotIn        []string `json:"lastNameNotIn,omitempty"`
	LastNameGT           *string  `json:"lastNameGT,omitempty"`
	LastNameGTE          *string  `json:"lastNameGTE,omitempty"`
	LastNameLT           *string  `json:"lastNameLT,omitempty"`
	LastNameLTE          *string  `json:"lastNameLTE,omitempty"`
	LastNameContains     *string  `json:"lastNameContains,omitempty"`
	LastNameHasPrefix    *string  `json:"lastNameHasPrefix,omitempty"`
	LastNameHasSuffix    *string  `json:"lastNameHasSuffix,omitempty"`
	LastNameEqualFold    *string  `json:"lastNameEqualFold,omitempty"`
	LastNameContainsFold *string  `json:"lastNameContainsFold,omitempty"`

	// "nickname" field predicates.
	Nickname             *string  `json:"nickname,omitempty"`
	NicknameNEQ          *string  `json:"nicknameNEQ,omitempty"`
	NicknameIn           []string `json:"nicknameIn,omitempty"`
	NicknameNotIn        []string `json:"nicknameNotIn,omitempty"`
	NicknameGT           *string  `json:"nicknameGT,omitempty"`
	NicknameGTE          *string  `json:"nicknameGTE,omitempty"`
	NicknameLT           *string  `json:"nicknameLT,omitempty"`
	NicknameLTE          *string  `json:"nicknameLTE,omitempty"`
	NicknameContains     *string  `json:"nicknameContains,omitempty"`
	NicknameHasPrefix    *string  `json:"nicknameHasPrefix,omitempty"`
	NicknameHasSuffix    *string  `json:"nicknameHasSuffix,omitempty"`
	NicknameEqualFold    *string  `json:"nicknameEqualFold,omitempty"`
	NicknameContainsFold *string  `json:"nicknameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "contacts" edge predicates.
	HasContacts     *bool             `json:"hasContacts,omitempty"`
	HasContactsWith []*UserWhereInput `json:"hasContactsWith,omitempty"`

	// "rooms" edge predicates.
	HasRooms     *bool             `json:"hasRooms,omitempty"`
	HasRoomsWith []*RoomWhereInput `json:"hasRoomsWith,omitempty"`

	// "messages" edge predicates.
	HasMessages     *bool                `json:"hasMessages,omitempty"`
	HasMessagesWith []*MessageWhereInput `json:"hasMessagesWith,omitempty"`

	// "user_contacts" edge predicates.
	HasUserContacts     *bool                    `json:"hasUserContacts,omitempty"`
	HasUserContactsWith []*UserContactWhereInput `json:"hasUserContactsWith,omitempty"`

	// "memberships" edge predicates.
	HasMemberships     *bool                   `json:"hasMemberships,omitempty"`
	HasMembershipsWith []*RoomMemberWhereInput `json:"hasMembershipsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.FirstName != nil {
		predicates = append(predicates, user.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, user.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, user.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, user.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, user.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, user.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, user.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, user.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, user.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, user.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, user.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, user.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, user.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, user.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, user.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, user.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, user.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, user.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, user.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, user.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, user.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, user.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, user.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, user.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, user.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, user.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.Nickname != nil {
		predicates = append(predicates, user.NicknameEQ(*i.Nickname))
	}
	if i.NicknameNEQ != nil {
		predicates = append(predicates, user.NicknameNEQ(*i.NicknameNEQ))
	}
	if len(i.NicknameIn) > 0 {
		predicates = append(predicates, user.NicknameIn(i.NicknameIn...))
	}
	if len(i.NicknameNotIn) > 0 {
		predicates = append(predicates, user.NicknameNotIn(i.NicknameNotIn...))
	}
	if i.NicknameGT != nil {
		predicates = append(predicates, user.NicknameGT(*i.NicknameGT))
	}
	if i.NicknameGTE != nil {
		predicates = append(predicates, user.NicknameGTE(*i.NicknameGTE))
	}
	if i.NicknameLT != nil {
		predicates = append(predicates, user.NicknameLT(*i.NicknameLT))
	}
	if i.NicknameLTE != nil {
		predicates = append(predicates, user.NicknameLTE(*i.NicknameLTE))
	}
	if i.NicknameContains != nil {
		predicates = append(predicates, user.NicknameContains(*i.NicknameContains))
	}
	if i.NicknameHasPrefix != nil {
		predicates = append(predicates, user.NicknameHasPrefix(*i.NicknameHasPrefix))
	}
	if i.NicknameHasSuffix != nil {
		predicates = append(predicates, user.NicknameHasSuffix(*i.NicknameHasSuffix))
	}
	if i.NicknameEqualFold != nil {
		predicates = append(predicates, user.NicknameEqualFold(*i.NicknameEqualFold))
	}
	if i.NicknameContainsFold != nil {
		predicates = append(predicates, user.NicknameContainsFold(*i.NicknameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, user.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, user.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasContacts != nil {
		p := user.HasContacts()
		if !*i.HasContacts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasContactsWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasContactsWith))
		for _, w := range i.HasContactsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasContactsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasContactsWith(with...))
	}
	if i.HasRooms != nil {
		p := user.HasRooms()
		if !*i.HasRooms {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomsWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomsWith))
		for _, w := range i.HasRoomsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasRoomsWith(with...))
	}
	if i.HasMessages != nil {
		p := user.HasMessages()
		if !*i.HasMessages {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessagesWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessagesWith))
		for _, w := range i.HasMessagesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessagesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasMessagesWith(with...))
	}
	if i.HasUserContacts != nil {
		p := user.HasUserContacts()
		if !*i.HasUserContacts {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserContactsWith) > 0 {
		with := make([]predicate.UserContact, 0, len(i.HasUserContactsWith))
		for _, w := range i.HasUserContactsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserContactsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasUserContactsWith(with...))
	}
	if i.HasMemberships != nil {
		p := user.HasMemberships()
		if !*i.HasMemberships {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMembershipsWith) > 0 {
		with := make([]predicate.RoomMember, 0, len(i.HasMembershipsWith))
		for _, w := range i.HasMembershipsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMembershipsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasMembershipsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// UserContactWhereInput represents a where input for filtering UserContact queries.
type UserContactWhereInput struct {
	Predicates []predicate.UserContact  `json:"-"`
	Not        *UserContactWhereInput   `json:"not,omitempty"`
	Or         []*UserContactWhereInput `json:"or,omitempty"`
	And        []*UserContactWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *pulid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *pulid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []pulid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []pulid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *pulid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *pulid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *pulid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *pulid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *pulid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *pulid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *pulid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *pulid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *pulid.ID  `json:"userIDContainsFold,omitempty"`

	// "contact_id" field predicates.
	ContactID             *pulid.ID  `json:"contactID,omitempty"`
	ContactIDNEQ          *pulid.ID  `json:"contactIDNEQ,omitempty"`
	ContactIDIn           []pulid.ID `json:"contactIDIn,omitempty"`
	ContactIDNotIn        []pulid.ID `json:"contactIDNotIn,omitempty"`
	ContactIDGT           *pulid.ID  `json:"contactIDGT,omitempty"`
	ContactIDGTE          *pulid.ID  `json:"contactIDGTE,omitempty"`
	ContactIDLT           *pulid.ID  `json:"contactIDLT,omitempty"`
	ContactIDLTE          *pulid.ID  `json:"contactIDLTE,omitempty"`
	ContactIDContains     *pulid.ID  `json:"contactIDContains,omitempty"`
	ContactIDHasPrefix    *pulid.ID  `json:"contactIDHasPrefix,omitempty"`
	ContactIDHasSuffix    *pulid.ID  `json:"contactIDHasSuffix,omitempty"`
	ContactIDEqualFold    *pulid.ID  `json:"contactIDEqualFold,omitempty"`
	ContactIDContainsFold *pulid.ID  `json:"contactIDContainsFold,omitempty"`

	// "room_id" field predicates.
	RoomID             *pulid.ID  `json:"roomID,omitempty"`
	RoomIDNEQ          *pulid.ID  `json:"roomIDNEQ,omitempty"`
	RoomIDIn           []pulid.ID `json:"roomIDIn,omitempty"`
	RoomIDNotIn        []pulid.ID `json:"roomIDNotIn,omitempty"`
	RoomIDGT           *pulid.ID  `json:"roomIDGT,omitempty"`
	RoomIDGTE          *pulid.ID  `json:"roomIDGTE,omitempty"`
	RoomIDLT           *pulid.ID  `json:"roomIDLT,omitempty"`
	RoomIDLTE          *pulid.ID  `json:"roomIDLTE,omitempty"`
	RoomIDContains     *pulid.ID  `json:"roomIDContains,omitempty"`
	RoomIDHasPrefix    *pulid.ID  `json:"roomIDHasPrefix,omitempty"`
	RoomIDHasSuffix    *pulid.ID  `json:"roomIDHasSuffix,omitempty"`
	RoomIDIsNil        bool       `json:"roomIDIsNil,omitempty"`
	RoomIDNotNil       bool       `json:"roomIDNotNil,omitempty"`
	RoomIDEqualFold    *pulid.ID  `json:"roomIDEqualFold,omitempty"`
	RoomIDContainsFold *pulid.ID  `json:"roomIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "contact" edge predicates.
	HasContact     *bool             `json:"hasContact,omitempty"`
	HasContactWith []*UserWhereInput `json:"hasContactWith,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserContactWhereInput) AddPredicates(predicates ...predicate.UserContact) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserContactWhereInput filter on the UserContactQuery builder.
func (i *UserContactWhereInput) Filter(q *UserContactQuery) (*UserContactQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserContactWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserContactWhereInput is returned in case the UserContactWhereInput is empty.
var ErrEmptyUserContactWhereInput = errors.New("ent: empty predicate UserContactWhereInput")

// P returns a predicate for filtering usercontacts.
// An error is returned if the input is empty or invalid.
func (i *UserContactWhereInput) P() (predicate.UserContact, error) {
	var predicates []predicate.UserContact
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, usercontact.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.UserContact, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, usercontact.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.UserContact, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, usercontact.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, usercontact.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, usercontact.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, usercontact.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, usercontact.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, usercontact.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, usercontact.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, usercontact.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, usercontact.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, usercontact.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, usercontact.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, usercontact.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, usercontact.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, usercontact.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, usercontact.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, usercontact.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, usercontact.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, usercontact.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, usercontact.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, usercontact.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, usercontact.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, usercontact.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.ContactID != nil {
		predicates = append(predicates, usercontact.ContactIDEQ(*i.ContactID))
	}
	if i.ContactIDNEQ != nil {
		predicates = append(predicates, usercontact.ContactIDNEQ(*i.ContactIDNEQ))
	}
	if len(i.ContactIDIn) > 0 {
		predicates = append(predicates, usercontact.ContactIDIn(i.ContactIDIn...))
	}
	if len(i.ContactIDNotIn) > 0 {
		predicates = append(predicates, usercontact.ContactIDNotIn(i.ContactIDNotIn...))
	}
	if i.ContactIDGT != nil {
		predicates = append(predicates, usercontact.ContactIDGT(*i.ContactIDGT))
	}
	if i.ContactIDGTE != nil {
		predicates = append(predicates, usercontact.ContactIDGTE(*i.ContactIDGTE))
	}
	if i.ContactIDLT != nil {
		predicates = append(predicates, usercontact.ContactIDLT(*i.ContactIDLT))
	}
	if i.ContactIDLTE != nil {
		predicates = append(predicates, usercontact.ContactIDLTE(*i.ContactIDLTE))
	}
	if i.ContactIDContains != nil {
		predicates = append(predicates, usercontact.ContactIDContains(*i.ContactIDContains))
	}
	if i.ContactIDHasPrefix != nil {
		predicates = append(predicates, usercontact.ContactIDHasPrefix(*i.ContactIDHasPrefix))
	}
	if i.ContactIDHasSuffix != nil {
		predicates = append(predicates, usercontact.ContactIDHasSuffix(*i.ContactIDHasSuffix))
	}
	if i.ContactIDEqualFold != nil {
		predicates = append(predicates, usercontact.ContactIDEqualFold(*i.ContactIDEqualFold))
	}
	if i.ContactIDContainsFold != nil {
		predicates = append(predicates, usercontact.ContactIDContainsFold(*i.ContactIDContainsFold))
	}
	if i.RoomID != nil {
		predicates = append(predicates, usercontact.RoomIDEQ(*i.RoomID))
	}
	if i.RoomIDNEQ != nil {
		predicates = append(predicates, usercontact.RoomIDNEQ(*i.RoomIDNEQ))
	}
	if len(i.RoomIDIn) > 0 {
		predicates = append(predicates, usercontact.RoomIDIn(i.RoomIDIn...))
	}
	if len(i.RoomIDNotIn) > 0 {
		predicates = append(predicates, usercontact.RoomIDNotIn(i.RoomIDNotIn...))
	}
	if i.RoomIDGT != nil {
		predicates = append(predicates, usercontact.RoomIDGT(*i.RoomIDGT))
	}
	if i.RoomIDGTE != nil {
		predicates = append(predicates, usercontact.RoomIDGTE(*i.RoomIDGTE))
	}
	if i.RoomIDLT != nil {
		predicates = append(predicates, usercontact.RoomIDLT(*i.RoomIDLT))
	}
	if i.RoomIDLTE != nil {
		predicates = append(predicates, usercontact.RoomIDLTE(*i.RoomIDLTE))
	}
	if i.RoomIDContains != nil {
		predicates = append(predicates, usercontact.RoomIDContains(*i.RoomIDContains))
	}
	if i.RoomIDHasPrefix != nil {
		predicates = append(predicates, usercontact.RoomIDHasPrefix(*i.RoomIDHasPrefix))
	}
	if i.RoomIDHasSuffix != nil {
		predicates = append(predicates, usercontact.RoomIDHasSuffix(*i.RoomIDHasSuffix))
	}
	if i.RoomIDIsNil {
		predicates = append(predicates, usercontact.RoomIDIsNil())
	}
	if i.RoomIDNotNil {
		predicates = append(predicates, usercontact.RoomIDNotNil())
	}
	if i.RoomIDEqualFold != nil {
		predicates = append(predicates, usercontact.RoomIDEqualFold(*i.RoomIDEqualFold))
	}
	if i.RoomIDContainsFold != nil {
		predicates = append(predicates, usercontact.RoomIDContainsFold(*i.RoomIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, usercontact.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, usercontact.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, usercontact.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, usercontact.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, usercontact.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, usercontact.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, usercontact.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, usercontact.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasUser != nil {
		p := usercontact.HasUser()
		if !*i.HasUser {
			p = usercontact.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, usercontact.HasUserWith(with...))
	}
	if i.HasContact != nil {
		p := usercontact.HasContact()
		if !*i.HasContact {
			p = usercontact.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasContactWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasContactWith))
		for _, w := range i.HasContactWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasContactWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, usercontact.HasContactWith(with...))
	}
	if i.HasRoom != nil {
		p := usercontact.HasRoom()
		if !*i.HasRoom {
			p = usercontact.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, usercontact.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserContactWhereInput
	case 1:
		return predicates[0], nil
	default:
		return usercontact.And(predicates...), nil
	}
}
