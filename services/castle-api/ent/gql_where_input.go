// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/friendship"
	"journeyhub/ent/message"
	"journeyhub/ent/predicate"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"time"
)

// FileWhereInput represents a where input for filtering File queries.
type FileWhereInput struct {
	Predicates []predicate.File  `json:"-"`
	Not        *FileWhereInput   `json:"not,omitempty"`
	Or         []*FileWhereInput `json:"or,omitempty"`
	And        []*FileWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "file_name" field predicates.
	FileName             *string  `json:"fileName,omitempty"`
	FileNameNEQ          *string  `json:"fileNameNEQ,omitempty"`
	FileNameIn           []string `json:"fileNameIn,omitempty"`
	FileNameNotIn        []string `json:"fileNameNotIn,omitempty"`
	FileNameGT           *string  `json:"fileNameGT,omitempty"`
	FileNameGTE          *string  `json:"fileNameGTE,omitempty"`
	FileNameLT           *string  `json:"fileNameLT,omitempty"`
	FileNameLTE          *string  `json:"fileNameLTE,omitempty"`
	FileNameContains     *string  `json:"fileNameContains,omitempty"`
	FileNameHasPrefix    *string  `json:"fileNameHasPrefix,omitempty"`
	FileNameHasSuffix    *string  `json:"fileNameHasSuffix,omitempty"`
	FileNameEqualFold    *string  `json:"fileNameEqualFold,omitempty"`
	FileNameContainsFold *string  `json:"fileNameContainsFold,omitempty"`

	// "mime_type" field predicates.
	MimeType             *string  `json:"mimeType,omitempty"`
	MimeTypeNEQ          *string  `json:"mimeTypeNEQ,omitempty"`
	MimeTypeIn           []string `json:"mimeTypeIn,omitempty"`
	MimeTypeNotIn        []string `json:"mimeTypeNotIn,omitempty"`
	MimeTypeGT           *string  `json:"mimeTypeGT,omitempty"`
	MimeTypeGTE          *string  `json:"mimeTypeGTE,omitempty"`
	MimeTypeLT           *string  `json:"mimeTypeLT,omitempty"`
	MimeTypeLTE          *string  `json:"mimeTypeLTE,omitempty"`
	MimeTypeContains     *string  `json:"mimeTypeContains,omitempty"`
	MimeTypeHasPrefix    *string  `json:"mimeTypeHasPrefix,omitempty"`
	MimeTypeHasSuffix    *string  `json:"mimeTypeHasSuffix,omitempty"`
	MimeTypeEqualFold    *string  `json:"mimeTypeEqualFold,omitempty"`
	MimeTypeContainsFold *string  `json:"mimeTypeContainsFold,omitempty"`

	// "disk" field predicates.
	Disk             *string  `json:"disk,omitempty"`
	DiskNEQ          *string  `json:"diskNEQ,omitempty"`
	DiskIn           []string `json:"diskIn,omitempty"`
	DiskNotIn        []string `json:"diskNotIn,omitempty"`
	DiskGT           *string  `json:"diskGT,omitempty"`
	DiskGTE          *string  `json:"diskGTE,omitempty"`
	DiskLT           *string  `json:"diskLT,omitempty"`
	DiskLTE          *string  `json:"diskLTE,omitempty"`
	DiskContains     *string  `json:"diskContains,omitempty"`
	DiskHasPrefix    *string  `json:"diskHasPrefix,omitempty"`
	DiskHasSuffix    *string  `json:"diskHasSuffix,omitempty"`
	DiskEqualFold    *string  `json:"diskEqualFold,omitempty"`
	DiskContainsFold *string  `json:"diskContainsFold,omitempty"`

	// "size" field predicates.
	Size      *uint64  `json:"size,omitempty"`
	SizeNEQ   *uint64  `json:"sizeNEQ,omitempty"`
	SizeIn    []uint64 `json:"sizeIn,omitempty"`
	SizeNotIn []uint64 `json:"sizeNotIn,omitempty"`
	SizeGT    *uint64  `json:"sizeGT,omitempty"`
	SizeGTE   *uint64  `json:"sizeGTE,omitempty"`
	SizeLT    *uint64  `json:"sizeLT,omitempty"`
	SizeLTE   *uint64  `json:"sizeLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FileWhereInput) AddPredicates(predicates ...predicate.File) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FileWhereInput filter on the FileQuery builder.
func (i *FileWhereInput) Filter(q *FileQuery) (*FileQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFileWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFileWhereInput is returned in case the FileWhereInput is empty.
var ErrEmptyFileWhereInput = errors.New("ent: empty predicate FileWhereInput")

// P returns a predicate for filtering files.
// An error is returned if the input is empty or invalid.
func (i *FileWhereInput) P() (predicate.File, error) {
	var predicates []predicate.File
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, file.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.File, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, file.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.File, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, file.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, file.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, file.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, file.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, file.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, file.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, file.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, file.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, file.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, file.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, file.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, file.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, file.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, file.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, file.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, file.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, file.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, file.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, file.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, file.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, file.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, file.NameContainsFold(*i.NameContainsFold))
	}
	if i.FileName != nil {
		predicates = append(predicates, file.FileNameEQ(*i.FileName))
	}
	if i.FileNameNEQ != nil {
		predicates = append(predicates, file.FileNameNEQ(*i.FileNameNEQ))
	}
	if len(i.FileNameIn) > 0 {
		predicates = append(predicates, file.FileNameIn(i.FileNameIn...))
	}
	if len(i.FileNameNotIn) > 0 {
		predicates = append(predicates, file.FileNameNotIn(i.FileNameNotIn...))
	}
	if i.FileNameGT != nil {
		predicates = append(predicates, file.FileNameGT(*i.FileNameGT))
	}
	if i.FileNameGTE != nil {
		predicates = append(predicates, file.FileNameGTE(*i.FileNameGTE))
	}
	if i.FileNameLT != nil {
		predicates = append(predicates, file.FileNameLT(*i.FileNameLT))
	}
	if i.FileNameLTE != nil {
		predicates = append(predicates, file.FileNameLTE(*i.FileNameLTE))
	}
	if i.FileNameContains != nil {
		predicates = append(predicates, file.FileNameContains(*i.FileNameContains))
	}
	if i.FileNameHasPrefix != nil {
		predicates = append(predicates, file.FileNameHasPrefix(*i.FileNameHasPrefix))
	}
	if i.FileNameHasSuffix != nil {
		predicates = append(predicates, file.FileNameHasSuffix(*i.FileNameHasSuffix))
	}
	if i.FileNameEqualFold != nil {
		predicates = append(predicates, file.FileNameEqualFold(*i.FileNameEqualFold))
	}
	if i.FileNameContainsFold != nil {
		predicates = append(predicates, file.FileNameContainsFold(*i.FileNameContainsFold))
	}
	if i.MimeType != nil {
		predicates = append(predicates, file.MimeTypeEQ(*i.MimeType))
	}
	if i.MimeTypeNEQ != nil {
		predicates = append(predicates, file.MimeTypeNEQ(*i.MimeTypeNEQ))
	}
	if len(i.MimeTypeIn) > 0 {
		predicates = append(predicates, file.MimeTypeIn(i.MimeTypeIn...))
	}
	if len(i.MimeTypeNotIn) > 0 {
		predicates = append(predicates, file.MimeTypeNotIn(i.MimeTypeNotIn...))
	}
	if i.MimeTypeGT != nil {
		predicates = append(predicates, file.MimeTypeGT(*i.MimeTypeGT))
	}
	if i.MimeTypeGTE != nil {
		predicates = append(predicates, file.MimeTypeGTE(*i.MimeTypeGTE))
	}
	if i.MimeTypeLT != nil {
		predicates = append(predicates, file.MimeTypeLT(*i.MimeTypeLT))
	}
	if i.MimeTypeLTE != nil {
		predicates = append(predicates, file.MimeTypeLTE(*i.MimeTypeLTE))
	}
	if i.MimeTypeContains != nil {
		predicates = append(predicates, file.MimeTypeContains(*i.MimeTypeContains))
	}
	if i.MimeTypeHasPrefix != nil {
		predicates = append(predicates, file.MimeTypeHasPrefix(*i.MimeTypeHasPrefix))
	}
	if i.MimeTypeHasSuffix != nil {
		predicates = append(predicates, file.MimeTypeHasSuffix(*i.MimeTypeHasSuffix))
	}
	if i.MimeTypeEqualFold != nil {
		predicates = append(predicates, file.MimeTypeEqualFold(*i.MimeTypeEqualFold))
	}
	if i.MimeTypeContainsFold != nil {
		predicates = append(predicates, file.MimeTypeContainsFold(*i.MimeTypeContainsFold))
	}
	if i.Disk != nil {
		predicates = append(predicates, file.DiskEQ(*i.Disk))
	}
	if i.DiskNEQ != nil {
		predicates = append(predicates, file.DiskNEQ(*i.DiskNEQ))
	}
	if len(i.DiskIn) > 0 {
		predicates = append(predicates, file.DiskIn(i.DiskIn...))
	}
	if len(i.DiskNotIn) > 0 {
		predicates = append(predicates, file.DiskNotIn(i.DiskNotIn...))
	}
	if i.DiskGT != nil {
		predicates = append(predicates, file.DiskGT(*i.DiskGT))
	}
	if i.DiskGTE != nil {
		predicates = append(predicates, file.DiskGTE(*i.DiskGTE))
	}
	if i.DiskLT != nil {
		predicates = append(predicates, file.DiskLT(*i.DiskLT))
	}
	if i.DiskLTE != nil {
		predicates = append(predicates, file.DiskLTE(*i.DiskLTE))
	}
	if i.DiskContains != nil {
		predicates = append(predicates, file.DiskContains(*i.DiskContains))
	}
	if i.DiskHasPrefix != nil {
		predicates = append(predicates, file.DiskHasPrefix(*i.DiskHasPrefix))
	}
	if i.DiskHasSuffix != nil {
		predicates = append(predicates, file.DiskHasSuffix(*i.DiskHasSuffix))
	}
	if i.DiskEqualFold != nil {
		predicates = append(predicates, file.DiskEqualFold(*i.DiskEqualFold))
	}
	if i.DiskContainsFold != nil {
		predicates = append(predicates, file.DiskContainsFold(*i.DiskContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, file.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, file.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, file.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, file.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, file.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, file.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, file.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, file.SizeLTE(*i.SizeLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, file.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, file.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, file.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, file.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, file.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, file.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, file.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, file.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, file.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, file.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, file.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, file.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, file.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, file.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, file.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, file.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFileWhereInput
	case 1:
		return predicates[0], nil
	default:
		return file.And(predicates...), nil
	}
}

// FriendshipWhereInput represents a where input for filtering Friendship queries.
type FriendshipWhereInput struct {
	Predicates []predicate.Friendship  `json:"-"`
	Not        *FriendshipWhereInput   `json:"not,omitempty"`
	Or         []*FriendshipWhereInput `json:"or,omitempty"`
	And        []*FriendshipWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *pulid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *pulid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []pulid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []pulid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *pulid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *pulid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *pulid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *pulid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *pulid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *pulid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *pulid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *pulid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *pulid.ID  `json:"userIDContainsFold,omitempty"`

	// "friend_id" field predicates.
	FriendID             *pulid.ID  `json:"friendID,omitempty"`
	FriendIDNEQ          *pulid.ID  `json:"friendIDNEQ,omitempty"`
	FriendIDIn           []pulid.ID `json:"friendIDIn,omitempty"`
	FriendIDNotIn        []pulid.ID `json:"friendIDNotIn,omitempty"`
	FriendIDGT           *pulid.ID  `json:"friendIDGT,omitempty"`
	FriendIDGTE          *pulid.ID  `json:"friendIDGTE,omitempty"`
	FriendIDLT           *pulid.ID  `json:"friendIDLT,omitempty"`
	FriendIDLTE          *pulid.ID  `json:"friendIDLTE,omitempty"`
	FriendIDContains     *pulid.ID  `json:"friendIDContains,omitempty"`
	FriendIDHasPrefix    *pulid.ID  `json:"friendIDHasPrefix,omitempty"`
	FriendIDHasSuffix    *pulid.ID  `json:"friendIDHasSuffix,omitempty"`
	FriendIDEqualFold    *pulid.ID  `json:"friendIDEqualFold,omitempty"`
	FriendIDContainsFold *pulid.ID  `json:"friendIDContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "friend" edge predicates.
	HasFriend     *bool             `json:"hasFriend,omitempty"`
	HasFriendWith []*UserWhereInput `json:"hasFriendWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FriendshipWhereInput) AddPredicates(predicates ...predicate.Friendship) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FriendshipWhereInput filter on the FriendshipQuery builder.
func (i *FriendshipWhereInput) Filter(q *FriendshipQuery) (*FriendshipQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFriendshipWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFriendshipWhereInput is returned in case the FriendshipWhereInput is empty.
var ErrEmptyFriendshipWhereInput = errors.New("ent: empty predicate FriendshipWhereInput")

// P returns a predicate for filtering friendships.
// An error is returned if the input is empty or invalid.
func (i *FriendshipWhereInput) P() (predicate.Friendship, error) {
	var predicates []predicate.Friendship
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, friendship.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Friendship, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, friendship.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Friendship, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, friendship.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, friendship.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, friendship.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, friendship.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, friendship.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, friendship.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, friendship.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, friendship.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, friendship.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, friendship.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, friendship.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, friendship.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, friendship.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, friendship.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, friendship.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, friendship.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, friendship.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, friendship.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, friendship.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, friendship.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, friendship.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, friendship.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.FriendID != nil {
		predicates = append(predicates, friendship.FriendIDEQ(*i.FriendID))
	}
	if i.FriendIDNEQ != nil {
		predicates = append(predicates, friendship.FriendIDNEQ(*i.FriendIDNEQ))
	}
	if len(i.FriendIDIn) > 0 {
		predicates = append(predicates, friendship.FriendIDIn(i.FriendIDIn...))
	}
	if len(i.FriendIDNotIn) > 0 {
		predicates = append(predicates, friendship.FriendIDNotIn(i.FriendIDNotIn...))
	}
	if i.FriendIDGT != nil {
		predicates = append(predicates, friendship.FriendIDGT(*i.FriendIDGT))
	}
	if i.FriendIDGTE != nil {
		predicates = append(predicates, friendship.FriendIDGTE(*i.FriendIDGTE))
	}
	if i.FriendIDLT != nil {
		predicates = append(predicates, friendship.FriendIDLT(*i.FriendIDLT))
	}
	if i.FriendIDLTE != nil {
		predicates = append(predicates, friendship.FriendIDLTE(*i.FriendIDLTE))
	}
	if i.FriendIDContains != nil {
		predicates = append(predicates, friendship.FriendIDContains(*i.FriendIDContains))
	}
	if i.FriendIDHasPrefix != nil {
		predicates = append(predicates, friendship.FriendIDHasPrefix(*i.FriendIDHasPrefix))
	}
	if i.FriendIDHasSuffix != nil {
		predicates = append(predicates, friendship.FriendIDHasSuffix(*i.FriendIDHasSuffix))
	}
	if i.FriendIDEqualFold != nil {
		predicates = append(predicates, friendship.FriendIDEqualFold(*i.FriendIDEqualFold))
	}
	if i.FriendIDContainsFold != nil {
		predicates = append(predicates, friendship.FriendIDContainsFold(*i.FriendIDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, friendship.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, friendship.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, friendship.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, friendship.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, friendship.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, friendship.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, friendship.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, friendship.CreatedAtLTE(*i.CreatedAtLTE))
	}

	if i.HasUser != nil {
		p := friendship.HasUser()
		if !*i.HasUser {
			p = friendship.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, friendship.HasUserWith(with...))
	}
	if i.HasFriend != nil {
		p := friendship.HasFriend()
		if !*i.HasFriend {
			p = friendship.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFriendWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFriendWith))
		for _, w := range i.HasFriendWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFriendWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, friendship.HasFriendWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFriendshipWhereInput
	case 1:
		return predicates[0], nil
	default:
		return friendship.And(predicates...), nil
	}
}

// MessageWhereInput represents a where input for filtering Message queries.
type MessageWhereInput struct {
	Predicates []predicate.Message  `json:"-"`
	Not        *MessageWhereInput   `json:"not,omitempty"`
	Or         []*MessageWhereInput `json:"or,omitempty"`
	And        []*MessageWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MessageWhereInput) AddPredicates(predicates ...predicate.Message) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MessageWhereInput filter on the MessageQuery builder.
func (i *MessageWhereInput) Filter(q *MessageQuery) (*MessageQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMessageWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMessageWhereInput is returned in case the MessageWhereInput is empty.
var ErrEmptyMessageWhereInput = errors.New("ent: empty predicate MessageWhereInput")

// P returns a predicate for filtering messages.
// An error is returned if the input is empty or invalid.
func (i *MessageWhereInput) P() (predicate.Message, error) {
	var predicates []predicate.Message
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, message.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Message, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, message.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Message, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, message.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, message.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, message.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, message.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, message.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, message.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, message.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, message.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, message.IDLTE(*i.IDLTE))
	}
	if i.Content != nil {
		predicates = append(predicates, message.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, message.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, message.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, message.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, message.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, message.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, message.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, message.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, message.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, message.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, message.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, message.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, message.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, message.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, message.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, message.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, message.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, message.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, message.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, message.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, message.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, message.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, message.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, message.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, message.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, message.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, message.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, message.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, message.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasUser != nil {
		p := message.HasUser()
		if !*i.HasUser {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasUserWith(with...))
	}
	if i.HasRoom != nil {
		p := message.HasRoom()
		if !*i.HasRoom {
			p = message.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, message.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMessageWhereInput
	case 1:
		return predicates[0], nil
	default:
		return message.And(predicates...), nil
	}
}

// RoomWhereInput represents a where input for filtering Room queries.
type RoomWhereInput struct {
	Predicates []predicate.Room  `json:"-"`
	Not        *RoomWhereInput   `json:"not,omitempty"`
	Or         []*RoomWhereInput `json:"or,omitempty"`
	And        []*RoomWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "version" field predicates.
	Version      *uint64  `json:"version,omitempty"`
	VersionNEQ   *uint64  `json:"versionNEQ,omitempty"`
	VersionIn    []uint64 `json:"versionIn,omitempty"`
	VersionNotIn []uint64 `json:"versionNotIn,omitempty"`
	VersionGT    *uint64  `json:"versionGT,omitempty"`
	VersionGTE   *uint64  `json:"versionGTE,omitempty"`
	VersionLT    *uint64  `json:"versionLT,omitempty"`
	VersionLTE   *uint64  `json:"versionLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "messages" edge predicates.
	HasMessages     *bool                `json:"hasMessages,omitempty"`
	HasMessagesWith []*MessageWhereInput `json:"hasMessagesWith,omitempty"`

	// "room_members" edge predicates.
	HasRoomMembers     *bool                   `json:"hasRoomMembers,omitempty"`
	HasRoomMembersWith []*RoomMemberWhereInput `json:"hasRoomMembersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoomWhereInput) AddPredicates(predicates ...predicate.Room) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoomWhereInput filter on the RoomQuery builder.
func (i *RoomWhereInput) Filter(q *RoomQuery) (*RoomQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoomWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoomWhereInput is returned in case the RoomWhereInput is empty.
var ErrEmptyRoomWhereInput = errors.New("ent: empty predicate RoomWhereInput")

// P returns a predicate for filtering rooms.
// An error is returned if the input is empty or invalid.
func (i *RoomWhereInput) P() (predicate.Room, error) {
	var predicates []predicate.Room
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, room.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Room, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, room.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Room, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, room.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, room.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, room.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, room.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, room.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, room.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, room.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, room.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, room.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, room.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, room.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, room.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, room.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, room.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, room.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, room.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, room.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, room.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, room.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, room.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, room.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, room.NameContainsFold(*i.NameContainsFold))
	}
	if i.Version != nil {
		predicates = append(predicates, room.VersionEQ(*i.Version))
	}
	if i.VersionNEQ != nil {
		predicates = append(predicates, room.VersionNEQ(*i.VersionNEQ))
	}
	if len(i.VersionIn) > 0 {
		predicates = append(predicates, room.VersionIn(i.VersionIn...))
	}
	if len(i.VersionNotIn) > 0 {
		predicates = append(predicates, room.VersionNotIn(i.VersionNotIn...))
	}
	if i.VersionGT != nil {
		predicates = append(predicates, room.VersionGT(*i.VersionGT))
	}
	if i.VersionGTE != nil {
		predicates = append(predicates, room.VersionGTE(*i.VersionGTE))
	}
	if i.VersionLT != nil {
		predicates = append(predicates, room.VersionLT(*i.VersionLT))
	}
	if i.VersionLTE != nil {
		predicates = append(predicates, room.VersionLTE(*i.VersionLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, room.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, room.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, room.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, room.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, room.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, room.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, room.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, room.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, room.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, room.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, room.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, room.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, room.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, room.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, room.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, room.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasUsers != nil {
		p := room.HasUsers()
		if !*i.HasUsers {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasUsersWith(with...))
	}
	if i.HasMessages != nil {
		p := room.HasMessages()
		if !*i.HasMessages {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessagesWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessagesWith))
		for _, w := range i.HasMessagesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessagesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasMessagesWith(with...))
	}
	if i.HasRoomMembers != nil {
		p := room.HasRoomMembers()
		if !*i.HasRoomMembers {
			p = room.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomMembersWith) > 0 {
		with := make([]predicate.RoomMember, 0, len(i.HasRoomMembersWith))
		for _, w := range i.HasRoomMembersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomMembersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, room.HasRoomMembersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoomWhereInput
	case 1:
		return predicates[0], nil
	default:
		return room.And(predicates...), nil
	}
}

// RoomMemberWhereInput represents a where input for filtering RoomMember queries.
type RoomMemberWhereInput struct {
	Predicates []predicate.RoomMember  `json:"-"`
	Not        *RoomMemberWhereInput   `json:"not,omitempty"`
	Or         []*RoomMemberWhereInput `json:"or,omitempty"`
	And        []*RoomMemberWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "user_id" field predicates.
	UserID             *pulid.ID  `json:"userID,omitempty"`
	UserIDNEQ          *pulid.ID  `json:"userIDNEQ,omitempty"`
	UserIDIn           []pulid.ID `json:"userIDIn,omitempty"`
	UserIDNotIn        []pulid.ID `json:"userIDNotIn,omitempty"`
	UserIDGT           *pulid.ID  `json:"userIDGT,omitempty"`
	UserIDGTE          *pulid.ID  `json:"userIDGTE,omitempty"`
	UserIDLT           *pulid.ID  `json:"userIDLT,omitempty"`
	UserIDLTE          *pulid.ID  `json:"userIDLTE,omitempty"`
	UserIDContains     *pulid.ID  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *pulid.ID  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *pulid.ID  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *pulid.ID  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *pulid.ID  `json:"userIDContainsFold,omitempty"`

	// "room_id" field predicates.
	RoomID             *pulid.ID  `json:"roomID,omitempty"`
	RoomIDNEQ          *pulid.ID  `json:"roomIDNEQ,omitempty"`
	RoomIDIn           []pulid.ID `json:"roomIDIn,omitempty"`
	RoomIDNotIn        []pulid.ID `json:"roomIDNotIn,omitempty"`
	RoomIDGT           *pulid.ID  `json:"roomIDGT,omitempty"`
	RoomIDGTE          *pulid.ID  `json:"roomIDGTE,omitempty"`
	RoomIDLT           *pulid.ID  `json:"roomIDLT,omitempty"`
	RoomIDLTE          *pulid.ID  `json:"roomIDLTE,omitempty"`
	RoomIDContains     *pulid.ID  `json:"roomIDContains,omitempty"`
	RoomIDHasPrefix    *pulid.ID  `json:"roomIDHasPrefix,omitempty"`
	RoomIDHasSuffix    *pulid.ID  `json:"roomIDHasSuffix,omitempty"`
	RoomIDEqualFold    *pulid.ID  `json:"roomIDEqualFold,omitempty"`
	RoomIDContainsFold *pulid.ID  `json:"roomIDContainsFold,omitempty"`

	// "joined_at" field predicates.
	JoinedAt      *time.Time  `json:"joinedAt,omitempty"`
	JoinedAtNEQ   *time.Time  `json:"joinedAtNEQ,omitempty"`
	JoinedAtIn    []time.Time `json:"joinedAtIn,omitempty"`
	JoinedAtNotIn []time.Time `json:"joinedAtNotIn,omitempty"`
	JoinedAtGT    *time.Time  `json:"joinedAtGT,omitempty"`
	JoinedAtGTE   *time.Time  `json:"joinedAtGTE,omitempty"`
	JoinedAtLT    *time.Time  `json:"joinedAtLT,omitempty"`
	JoinedAtLTE   *time.Time  `json:"joinedAtLTE,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "room" edge predicates.
	HasRoom     *bool             `json:"hasRoom,omitempty"`
	HasRoomWith []*RoomWhereInput `json:"hasRoomWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *RoomMemberWhereInput) AddPredicates(predicates ...predicate.RoomMember) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the RoomMemberWhereInput filter on the RoomMemberQuery builder.
func (i *RoomMemberWhereInput) Filter(q *RoomMemberQuery) (*RoomMemberQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyRoomMemberWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyRoomMemberWhereInput is returned in case the RoomMemberWhereInput is empty.
var ErrEmptyRoomMemberWhereInput = errors.New("ent: empty predicate RoomMemberWhereInput")

// P returns a predicate for filtering roommembers.
// An error is returned if the input is empty or invalid.
func (i *RoomMemberWhereInput) P() (predicate.RoomMember, error) {
	var predicates []predicate.RoomMember
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, roommember.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.RoomMember, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, roommember.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.RoomMember, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, roommember.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, roommember.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, roommember.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, roommember.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, roommember.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, roommember.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, roommember.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, roommember.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, roommember.IDLTE(*i.IDLTE))
	}
	if i.UserID != nil {
		predicates = append(predicates, roommember.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, roommember.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, roommember.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, roommember.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, roommember.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, roommember.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, roommember.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, roommember.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, roommember.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, roommember.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, roommember.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, roommember.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, roommember.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.RoomID != nil {
		predicates = append(predicates, roommember.RoomIDEQ(*i.RoomID))
	}
	if i.RoomIDNEQ != nil {
		predicates = append(predicates, roommember.RoomIDNEQ(*i.RoomIDNEQ))
	}
	if len(i.RoomIDIn) > 0 {
		predicates = append(predicates, roommember.RoomIDIn(i.RoomIDIn...))
	}
	if len(i.RoomIDNotIn) > 0 {
		predicates = append(predicates, roommember.RoomIDNotIn(i.RoomIDNotIn...))
	}
	if i.RoomIDGT != nil {
		predicates = append(predicates, roommember.RoomIDGT(*i.RoomIDGT))
	}
	if i.RoomIDGTE != nil {
		predicates = append(predicates, roommember.RoomIDGTE(*i.RoomIDGTE))
	}
	if i.RoomIDLT != nil {
		predicates = append(predicates, roommember.RoomIDLT(*i.RoomIDLT))
	}
	if i.RoomIDLTE != nil {
		predicates = append(predicates, roommember.RoomIDLTE(*i.RoomIDLTE))
	}
	if i.RoomIDContains != nil {
		predicates = append(predicates, roommember.RoomIDContains(*i.RoomIDContains))
	}
	if i.RoomIDHasPrefix != nil {
		predicates = append(predicates, roommember.RoomIDHasPrefix(*i.RoomIDHasPrefix))
	}
	if i.RoomIDHasSuffix != nil {
		predicates = append(predicates, roommember.RoomIDHasSuffix(*i.RoomIDHasSuffix))
	}
	if i.RoomIDEqualFold != nil {
		predicates = append(predicates, roommember.RoomIDEqualFold(*i.RoomIDEqualFold))
	}
	if i.RoomIDContainsFold != nil {
		predicates = append(predicates, roommember.RoomIDContainsFold(*i.RoomIDContainsFold))
	}
	if i.JoinedAt != nil {
		predicates = append(predicates, roommember.JoinedAtEQ(*i.JoinedAt))
	}
	if i.JoinedAtNEQ != nil {
		predicates = append(predicates, roommember.JoinedAtNEQ(*i.JoinedAtNEQ))
	}
	if len(i.JoinedAtIn) > 0 {
		predicates = append(predicates, roommember.JoinedAtIn(i.JoinedAtIn...))
	}
	if len(i.JoinedAtNotIn) > 0 {
		predicates = append(predicates, roommember.JoinedAtNotIn(i.JoinedAtNotIn...))
	}
	if i.JoinedAtGT != nil {
		predicates = append(predicates, roommember.JoinedAtGT(*i.JoinedAtGT))
	}
	if i.JoinedAtGTE != nil {
		predicates = append(predicates, roommember.JoinedAtGTE(*i.JoinedAtGTE))
	}
	if i.JoinedAtLT != nil {
		predicates = append(predicates, roommember.JoinedAtLT(*i.JoinedAtLT))
	}
	if i.JoinedAtLTE != nil {
		predicates = append(predicates, roommember.JoinedAtLTE(*i.JoinedAtLTE))
	}

	if i.HasUser != nil {
		p := roommember.HasUser()
		if !*i.HasUser {
			p = roommember.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, roommember.HasUserWith(with...))
	}
	if i.HasRoom != nil {
		p := roommember.HasRoom()
		if !*i.HasRoom {
			p = roommember.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomWith))
		for _, w := range i.HasRoomWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, roommember.HasRoomWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyRoomMemberWhereInput
	case 1:
		return predicates[0], nil
	default:
		return roommember.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *pulid.ID  `json:"id,omitempty"`
	IDNEQ   *pulid.ID  `json:"idNEQ,omitempty"`
	IDIn    []pulid.ID `json:"idIn,omitempty"`
	IDNotIn []pulid.ID `json:"idNotIn,omitempty"`
	IDGT    *pulid.ID  `json:"idGT,omitempty"`
	IDGTE   *pulid.ID  `json:"idGTE,omitempty"`
	IDLT    *pulid.ID  `json:"idLT,omitempty"`
	IDLTE   *pulid.ID  `json:"idLTE,omitempty"`

	// "first_name" field predicates.
	FirstName             *string  `json:"firstName,omitempty"`
	FirstNameNEQ          *string  `json:"firstNameNEQ,omitempty"`
	FirstNameIn           []string `json:"firstNameIn,omitempty"`
	FirstNameNotIn        []string `json:"firstNameNotIn,omitempty"`
	FirstNameGT           *string  `json:"firstNameGT,omitempty"`
	FirstNameGTE          *string  `json:"firstNameGTE,omitempty"`
	FirstNameLT           *string  `json:"firstNameLT,omitempty"`
	FirstNameLTE          *string  `json:"firstNameLTE,omitempty"`
	FirstNameContains     *string  `json:"firstNameContains,omitempty"`
	FirstNameHasPrefix    *string  `json:"firstNameHasPrefix,omitempty"`
	FirstNameHasSuffix    *string  `json:"firstNameHasSuffix,omitempty"`
	FirstNameEqualFold    *string  `json:"firstNameEqualFold,omitempty"`
	FirstNameContainsFold *string  `json:"firstNameContainsFold,omitempty"`

	// "last_name" field predicates.
	LastName             *string  `json:"lastName,omitempty"`
	LastNameNEQ          *string  `json:"lastNameNEQ,omitempty"`
	LastNameIn           []string `json:"lastNameIn,omitempty"`
	LastNameNotIn        []string `json:"lastNameNotIn,omitempty"`
	LastNameGT           *string  `json:"lastNameGT,omitempty"`
	LastNameGTE          *string  `json:"lastNameGTE,omitempty"`
	LastNameLT           *string  `json:"lastNameLT,omitempty"`
	LastNameLTE          *string  `json:"lastNameLTE,omitempty"`
	LastNameContains     *string  `json:"lastNameContains,omitempty"`
	LastNameHasPrefix    *string  `json:"lastNameHasPrefix,omitempty"`
	LastNameHasSuffix    *string  `json:"lastNameHasSuffix,omitempty"`
	LastNameEqualFold    *string  `json:"lastNameEqualFold,omitempty"`
	LastNameContainsFold *string  `json:"lastNameContainsFold,omitempty"`

	// "nickname" field predicates.
	Nickname             *string  `json:"nickname,omitempty"`
	NicknameNEQ          *string  `json:"nicknameNEQ,omitempty"`
	NicknameIn           []string `json:"nicknameIn,omitempty"`
	NicknameNotIn        []string `json:"nicknameNotIn,omitempty"`
	NicknameGT           *string  `json:"nicknameGT,omitempty"`
	NicknameGTE          *string  `json:"nicknameGTE,omitempty"`
	NicknameLT           *string  `json:"nicknameLT,omitempty"`
	NicknameLTE          *string  `json:"nicknameLTE,omitempty"`
	NicknameContains     *string  `json:"nicknameContains,omitempty"`
	NicknameHasPrefix    *string  `json:"nicknameHasPrefix,omitempty"`
	NicknameHasSuffix    *string  `json:"nicknameHasSuffix,omitempty"`
	NicknameEqualFold    *string  `json:"nicknameEqualFold,omitempty"`
	NicknameContainsFold *string  `json:"nicknameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "friends" edge predicates.
	HasFriends     *bool             `json:"hasFriends,omitempty"`
	HasFriendsWith []*UserWhereInput `json:"hasFriendsWith,omitempty"`

	// "rooms" edge predicates.
	HasRooms     *bool             `json:"hasRooms,omitempty"`
	HasRoomsWith []*RoomWhereInput `json:"hasRoomsWith,omitempty"`

	// "messages" edge predicates.
	HasMessages     *bool                `json:"hasMessages,omitempty"`
	HasMessagesWith []*MessageWhereInput `json:"hasMessagesWith,omitempty"`

	// "friendships" edge predicates.
	HasFriendships     *bool                   `json:"hasFriendships,omitempty"`
	HasFriendshipsWith []*FriendshipWhereInput `json:"hasFriendshipsWith,omitempty"`

	// "memberships" edge predicates.
	HasMemberships     *bool                   `json:"hasMemberships,omitempty"`
	HasMembershipsWith []*RoomMemberWhereInput `json:"hasMembershipsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.FirstName != nil {
		predicates = append(predicates, user.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, user.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, user.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, user.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, user.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, user.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, user.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, user.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, user.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, user.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, user.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, user.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, user.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, user.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, user.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, user.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, user.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, user.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, user.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, user.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, user.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, user.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, user.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, user.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, user.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, user.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.Nickname != nil {
		predicates = append(predicates, user.NicknameEQ(*i.Nickname))
	}
	if i.NicknameNEQ != nil {
		predicates = append(predicates, user.NicknameNEQ(*i.NicknameNEQ))
	}
	if len(i.NicknameIn) > 0 {
		predicates = append(predicates, user.NicknameIn(i.NicknameIn...))
	}
	if len(i.NicknameNotIn) > 0 {
		predicates = append(predicates, user.NicknameNotIn(i.NicknameNotIn...))
	}
	if i.NicknameGT != nil {
		predicates = append(predicates, user.NicknameGT(*i.NicknameGT))
	}
	if i.NicknameGTE != nil {
		predicates = append(predicates, user.NicknameGTE(*i.NicknameGTE))
	}
	if i.NicknameLT != nil {
		predicates = append(predicates, user.NicknameLT(*i.NicknameLT))
	}
	if i.NicknameLTE != nil {
		predicates = append(predicates, user.NicknameLTE(*i.NicknameLTE))
	}
	if i.NicknameContains != nil {
		predicates = append(predicates, user.NicknameContains(*i.NicknameContains))
	}
	if i.NicknameHasPrefix != nil {
		predicates = append(predicates, user.NicknameHasPrefix(*i.NicknameHasPrefix))
	}
	if i.NicknameHasSuffix != nil {
		predicates = append(predicates, user.NicknameHasSuffix(*i.NicknameHasSuffix))
	}
	if i.NicknameEqualFold != nil {
		predicates = append(predicates, user.NicknameEqualFold(*i.NicknameEqualFold))
	}
	if i.NicknameContainsFold != nil {
		predicates = append(predicates, user.NicknameContainsFold(*i.NicknameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasFriends != nil {
		p := user.HasFriends()
		if !*i.HasFriends {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFriendsWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasFriendsWith))
		for _, w := range i.HasFriendsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFriendsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFriendsWith(with...))
	}
	if i.HasRooms != nil {
		p := user.HasRooms()
		if !*i.HasRooms {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasRoomsWith) > 0 {
		with := make([]predicate.Room, 0, len(i.HasRoomsWith))
		for _, w := range i.HasRoomsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasRoomsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasRoomsWith(with...))
	}
	if i.HasMessages != nil {
		p := user.HasMessages()
		if !*i.HasMessages {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMessagesWith) > 0 {
		with := make([]predicate.Message, 0, len(i.HasMessagesWith))
		for _, w := range i.HasMessagesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMessagesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasMessagesWith(with...))
	}
	if i.HasFriendships != nil {
		p := user.HasFriendships()
		if !*i.HasFriendships {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFriendshipsWith) > 0 {
		with := make([]predicate.Friendship, 0, len(i.HasFriendshipsWith))
		for _, w := range i.HasFriendshipsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFriendshipsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFriendshipsWith(with...))
	}
	if i.HasMemberships != nil {
		p := user.HasMemberships()
		if !*i.HasMemberships {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMembershipsWith) > 0 {
		with := make([]predicate.RoomMember, 0, len(i.HasMembershipsWith))
		for _, w := range i.HasMembershipsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMembershipsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasMembershipsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
