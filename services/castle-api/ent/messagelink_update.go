// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/message"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/predicate"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageLinkUpdate is the builder for updating MessageLink entities.
type MessageLinkUpdate struct {
	config
	hooks    []Hook
	mutation *MessageLinkMutation
}

// Where appends a list predicates to the MessageLinkUpdate builder.
func (mlu *MessageLinkUpdate) Where(ps ...predicate.MessageLink) *MessageLinkUpdate {
	mlu.mutation.Where(ps...)
	return mlu
}

// SetURL sets the "url" field.
func (mlu *MessageLinkUpdate) SetURL(s string) *MessageLinkUpdate {
	mlu.mutation.SetURL(s)
	return mlu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mlu *MessageLinkUpdate) SetNillableURL(s *string) *MessageLinkUpdate {
	if s != nil {
		mlu.SetURL(*s)
	}
	return mlu
}

// SetUpdatedAt sets the "updated_at" field.
func (mlu *MessageLinkUpdate) SetUpdatedAt(t time.Time) *MessageLinkUpdate {
	mlu.mutation.SetUpdatedAt(t)
	return mlu
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mlu *MessageLinkUpdate) SetMessageID(id pulid.ID) *MessageLinkUpdate {
	mlu.mutation.SetMessageID(id)
	return mlu
}

// SetMessage sets the "message" edge to the Message entity.
func (mlu *MessageLinkUpdate) SetMessage(m *Message) *MessageLinkUpdate {
	return mlu.SetMessageID(m.ID)
}

// Mutation returns the MessageLinkMutation object of the builder.
func (mlu *MessageLinkUpdate) Mutation() *MessageLinkMutation {
	return mlu.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (mlu *MessageLinkUpdate) ClearMessage() *MessageLinkUpdate {
	mlu.mutation.ClearMessage()
	return mlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mlu *MessageLinkUpdate) Save(ctx context.Context) (int, error) {
	mlu.defaults()
	return withHooks(ctx, mlu.sqlSave, mlu.mutation, mlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mlu *MessageLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := mlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mlu *MessageLinkUpdate) Exec(ctx context.Context) error {
	_, err := mlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlu *MessageLinkUpdate) ExecX(ctx context.Context) {
	if err := mlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlu *MessageLinkUpdate) defaults() {
	if _, ok := mlu.mutation.UpdatedAt(); !ok {
		v := messagelink.UpdateDefaultUpdatedAt()
		mlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlu *MessageLinkUpdate) check() error {
	if mlu.mutation.MessageCleared() && len(mlu.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageLink.message"`)
	}
	return nil
}

func (mlu *MessageLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagelink.Table, messagelink.Columns, sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString))
	if ps := mlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mlu.mutation.URL(); ok {
		_spec.SetField(messagelink.FieldURL, field.TypeString, value)
	}
	if value, ok := mlu.mutation.UpdatedAt(); ok {
		_spec.SetField(messagelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if mlu.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagelink.MessageTable,
			Columns: []string{messagelink.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mlu.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagelink.MessageTable,
			Columns: []string{messagelink.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mlu.mutation.done = true
	return n, nil
}

// MessageLinkUpdateOne is the builder for updating a single MessageLink entity.
type MessageLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageLinkMutation
}

// SetURL sets the "url" field.
func (mluo *MessageLinkUpdateOne) SetURL(s string) *MessageLinkUpdateOne {
	mluo.mutation.SetURL(s)
	return mluo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mluo *MessageLinkUpdateOne) SetNillableURL(s *string) *MessageLinkUpdateOne {
	if s != nil {
		mluo.SetURL(*s)
	}
	return mluo
}

// SetUpdatedAt sets the "updated_at" field.
func (mluo *MessageLinkUpdateOne) SetUpdatedAt(t time.Time) *MessageLinkUpdateOne {
	mluo.mutation.SetUpdatedAt(t)
	return mluo
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mluo *MessageLinkUpdateOne) SetMessageID(id pulid.ID) *MessageLinkUpdateOne {
	mluo.mutation.SetMessageID(id)
	return mluo
}

// SetMessage sets the "message" edge to the Message entity.
func (mluo *MessageLinkUpdateOne) SetMessage(m *Message) *MessageLinkUpdateOne {
	return mluo.SetMessageID(m.ID)
}

// Mutation returns the MessageLinkMutation object of the builder.
func (mluo *MessageLinkUpdateOne) Mutation() *MessageLinkMutation {
	return mluo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (mluo *MessageLinkUpdateOne) ClearMessage() *MessageLinkUpdateOne {
	mluo.mutation.ClearMessage()
	return mluo
}

// Where appends a list predicates to the MessageLinkUpdate builder.
func (mluo *MessageLinkUpdateOne) Where(ps ...predicate.MessageLink) *MessageLinkUpdateOne {
	mluo.mutation.Where(ps...)
	return mluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mluo *MessageLinkUpdateOne) Select(field string, fields ...string) *MessageLinkUpdateOne {
	mluo.fields = append([]string{field}, fields...)
	return mluo
}

// Save executes the query and returns the updated MessageLink entity.
func (mluo *MessageLinkUpdateOne) Save(ctx context.Context) (*MessageLink, error) {
	mluo.defaults()
	return withHooks(ctx, mluo.sqlSave, mluo.mutation, mluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mluo *MessageLinkUpdateOne) SaveX(ctx context.Context) *MessageLink {
	node, err := mluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mluo *MessageLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := mluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mluo *MessageLinkUpdateOne) ExecX(ctx context.Context) {
	if err := mluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mluo *MessageLinkUpdateOne) defaults() {
	if _, ok := mluo.mutation.UpdatedAt(); !ok {
		v := messagelink.UpdateDefaultUpdatedAt()
		mluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mluo *MessageLinkUpdateOne) check() error {
	if mluo.mutation.MessageCleared() && len(mluo.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MessageLink.message"`)
	}
	return nil
}

func (mluo *MessageLinkUpdateOne) sqlSave(ctx context.Context) (_node *MessageLink, err error) {
	if err := mluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(messagelink.Table, messagelink.Columns, sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString))
	id, ok := mluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MessageLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, messagelink.FieldID)
		for _, f := range fields {
			if !messagelink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != messagelink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mluo.mutation.URL(); ok {
		_spec.SetField(messagelink.FieldURL, field.TypeString, value)
	}
	if value, ok := mluo.mutation.UpdatedAt(); ok {
		_spec.SetField(messagelink.FieldUpdatedAt, field.TypeTime, value)
	}
	if mluo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagelink.MessageTable,
			Columns: []string{messagelink.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mluo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagelink.MessageTable,
			Columns: []string{messagelink.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MessageLink{config: mluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{messagelink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mluo.mutation.done = true
	return _node, nil
}
