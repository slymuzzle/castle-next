// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/room"
	"journeyhub/ent/roommember"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoomMember is the model entity for the RoomMember schema.
type RoomMember struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UnreadMessagesCount holds the value of the "unread_messages_count" field.
	UnreadMessagesCount int `json:"unread_messages_count,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID pulid.ID `json:"user_id,omitempty"`
	// RoomID holds the value of the "room_id" field.
	RoomID pulid.ID `json:"room_id,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomMemberQuery when eager-loading is set.
	Edges        RoomMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoomMemberEdges holds the relations/edges for other nodes in the graph.
type RoomMemberEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomMemberEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomMemberEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoomMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roommember.FieldID, roommember.FieldUserID, roommember.FieldRoomID:
			values[i] = new(pulid.ID)
		case roommember.FieldUnreadMessagesCount:
			values[i] = new(sql.NullInt64)
		case roommember.FieldName:
			values[i] = new(sql.NullString)
		case roommember.FieldDeletedAt, roommember.FieldJoinedAt, roommember.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoomMember fields.
func (rm *RoomMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roommember.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				rm.ID = *value
			}
		case roommember.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rm.DeletedAt = value.Time
			}
		case roommember.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rm.Name = value.String
			}
		case roommember.FieldUnreadMessagesCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unread_messages_count", values[i])
			} else if value.Valid {
				rm.UnreadMessagesCount = int(value.Int64)
			}
		case roommember.FieldUserID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				rm.UserID = *value
			}
		case roommember.FieldRoomID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value != nil {
				rm.RoomID = *value
			}
		case roommember.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				rm.JoinedAt = value.Time
			}
		case roommember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rm.UpdatedAt = value.Time
			}
		default:
			rm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoomMember.
// This includes values selected through modifiers, order, etc.
func (rm *RoomMember) Value(name string) (ent.Value, error) {
	return rm.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the RoomMember entity.
func (rm *RoomMember) QueryUser() *UserQuery {
	return NewRoomMemberClient(rm.config).QueryUser(rm)
}

// QueryRoom queries the "room" edge of the RoomMember entity.
func (rm *RoomMember) QueryRoom() *RoomQuery {
	return NewRoomMemberClient(rm.config).QueryRoom(rm)
}

// Update returns a builder for updating this RoomMember.
// Note that you need to call RoomMember.Unwrap() before calling this method if this RoomMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (rm *RoomMember) Update() *RoomMemberUpdateOne {
	return NewRoomMemberClient(rm.config).UpdateOne(rm)
}

// Unwrap unwraps the RoomMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rm *RoomMember) Unwrap() *RoomMember {
	_tx, ok := rm.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoomMember is not a transactional entity")
	}
	rm.config.driver = _tx.drv
	return rm
}

// String implements the fmt.Stringer.
func (rm *RoomMember) String() string {
	var builder strings.Builder
	builder.WriteString("RoomMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rm.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(rm.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rm.Name)
	builder.WriteString(", ")
	builder.WriteString("unread_messages_count=")
	builder.WriteString(fmt.Sprintf("%v", rm.UnreadMessagesCount))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", rm.UserID))
	builder.WriteString(", ")
	builder.WriteString("room_id=")
	builder.WriteString(fmt.Sprintf("%v", rm.RoomID))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(rm.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rm.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RoomMembers is a parsable slice of RoomMember.
type RoomMembers []*RoomMember
