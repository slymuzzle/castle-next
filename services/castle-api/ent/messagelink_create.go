// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"journeyhub/ent/message"
	"journeyhub/ent/messagelink"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageLinkCreate is the builder for creating a MessageLink entity.
type MessageLinkCreate struct {
	config
	mutation *MessageLinkMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLink sets the "link" field.
func (mlc *MessageLinkCreate) SetLink(s string) *MessageLinkCreate {
	mlc.mutation.SetLink(s)
	return mlc
}

// SetTitle sets the "title" field.
func (mlc *MessageLinkCreate) SetTitle(s string) *MessageLinkCreate {
	mlc.mutation.SetTitle(s)
	return mlc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mlc *MessageLinkCreate) SetNillableTitle(s *string) *MessageLinkCreate {
	if s != nil {
		mlc.SetTitle(*s)
	}
	return mlc
}

// SetDescription sets the "description" field.
func (mlc *MessageLinkCreate) SetDescription(s string) *MessageLinkCreate {
	mlc.mutation.SetDescription(s)
	return mlc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mlc *MessageLinkCreate) SetNillableDescription(s *string) *MessageLinkCreate {
	if s != nil {
		mlc.SetDescription(*s)
	}
	return mlc
}

// SetImageURL sets the "image_url" field.
func (mlc *MessageLinkCreate) SetImageURL(s string) *MessageLinkCreate {
	mlc.mutation.SetImageURL(s)
	return mlc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (mlc *MessageLinkCreate) SetNillableImageURL(s *string) *MessageLinkCreate {
	if s != nil {
		mlc.SetImageURL(*s)
	}
	return mlc
}

// SetCreatedAt sets the "created_at" field.
func (mlc *MessageLinkCreate) SetCreatedAt(t time.Time) *MessageLinkCreate {
	mlc.mutation.SetCreatedAt(t)
	return mlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mlc *MessageLinkCreate) SetNillableCreatedAt(t *time.Time) *MessageLinkCreate {
	if t != nil {
		mlc.SetCreatedAt(*t)
	}
	return mlc
}

// SetUpdatedAt sets the "updated_at" field.
func (mlc *MessageLinkCreate) SetUpdatedAt(t time.Time) *MessageLinkCreate {
	mlc.mutation.SetUpdatedAt(t)
	return mlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mlc *MessageLinkCreate) SetNillableUpdatedAt(t *time.Time) *MessageLinkCreate {
	if t != nil {
		mlc.SetUpdatedAt(*t)
	}
	return mlc
}

// SetID sets the "id" field.
func (mlc *MessageLinkCreate) SetID(pu pulid.ID) *MessageLinkCreate {
	mlc.mutation.SetID(pu)
	return mlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mlc *MessageLinkCreate) SetNillableID(pu *pulid.ID) *MessageLinkCreate {
	if pu != nil {
		mlc.SetID(*pu)
	}
	return mlc
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (mlc *MessageLinkCreate) SetRoomID(id pulid.ID) *MessageLinkCreate {
	mlc.mutation.SetRoomID(id)
	return mlc
}

// SetRoom sets the "room" edge to the Room entity.
func (mlc *MessageLinkCreate) SetRoom(r *Room) *MessageLinkCreate {
	return mlc.SetRoomID(r.ID)
}

// SetMessageID sets the "message" edge to the Message entity by ID.
func (mlc *MessageLinkCreate) SetMessageID(id pulid.ID) *MessageLinkCreate {
	mlc.mutation.SetMessageID(id)
	return mlc
}

// SetMessage sets the "message" edge to the Message entity.
func (mlc *MessageLinkCreate) SetMessage(m *Message) *MessageLinkCreate {
	return mlc.SetMessageID(m.ID)
}

// Mutation returns the MessageLinkMutation object of the builder.
func (mlc *MessageLinkCreate) Mutation() *MessageLinkMutation {
	return mlc.mutation
}

// Save creates the MessageLink in the database.
func (mlc *MessageLinkCreate) Save(ctx context.Context) (*MessageLink, error) {
	mlc.defaults()
	return withHooks(ctx, mlc.sqlSave, mlc.mutation, mlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mlc *MessageLinkCreate) SaveX(ctx context.Context) *MessageLink {
	v, err := mlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlc *MessageLinkCreate) Exec(ctx context.Context) error {
	_, err := mlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlc *MessageLinkCreate) ExecX(ctx context.Context) {
	if err := mlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mlc *MessageLinkCreate) defaults() {
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		v := messagelink.DefaultCreatedAt()
		mlc.mutation.SetCreatedAt(v)
	}
	if _, ok := mlc.mutation.UpdatedAt(); !ok {
		v := messagelink.DefaultUpdatedAt()
		mlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mlc.mutation.ID(); !ok {
		v := messagelink.DefaultID()
		mlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mlc *MessageLinkCreate) check() error {
	if _, ok := mlc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "MessageLink.link"`)}
	}
	if _, ok := mlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "MessageLink.created_at"`)}
	}
	if _, ok := mlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "MessageLink.updated_at"`)}
	}
	if len(mlc.mutation.RoomIDs()) == 0 {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "MessageLink.room"`)}
	}
	if len(mlc.mutation.MessageIDs()) == 0 {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required edge "MessageLink.message"`)}
	}
	return nil
}

func (mlc *MessageLinkCreate) sqlSave(ctx context.Context) (*MessageLink, error) {
	if err := mlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*pulid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mlc.mutation.id = &_node.ID
	mlc.mutation.done = true
	return _node, nil
}

func (mlc *MessageLinkCreate) createSpec() (*MessageLink, *sqlgraph.CreateSpec) {
	var (
		_node = &MessageLink{config: mlc.config}
		_spec = sqlgraph.NewCreateSpec(messagelink.Table, sqlgraph.NewFieldSpec(messagelink.FieldID, field.TypeString))
	)
	_spec.OnConflict = mlc.conflict
	if id, ok := mlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mlc.mutation.Link(); ok {
		_spec.SetField(messagelink.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if value, ok := mlc.mutation.Title(); ok {
		_spec.SetField(messagelink.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mlc.mutation.Description(); ok {
		_spec.SetField(messagelink.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mlc.mutation.ImageURL(); ok {
		_spec.SetField(messagelink.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := mlc.mutation.CreatedAt(); ok {
		_spec.SetField(messagelink.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mlc.mutation.UpdatedAt(); ok {
		_spec.SetField(messagelink.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := mlc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagelink.RoomTable,
			Columns: []string{messagelink.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_message_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mlc.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   messagelink.MessageTable,
			Columns: []string{messagelink.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.message_links = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageLink.Create().
//		SetLink(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageLinkUpsert) {
//			SetLink(v+v).
//		}).
//		Exec(ctx)
func (mlc *MessageLinkCreate) OnConflict(opts ...sql.ConflictOption) *MessageLinkUpsertOne {
	mlc.conflict = opts
	return &MessageLinkUpsertOne{
		create: mlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlc *MessageLinkCreate) OnConflictColumns(columns ...string) *MessageLinkUpsertOne {
	mlc.conflict = append(mlc.conflict, sql.ConflictColumns(columns...))
	return &MessageLinkUpsertOne{
		create: mlc,
	}
}

type (
	// MessageLinkUpsertOne is the builder for "upsert"-ing
	//  one MessageLink node.
	MessageLinkUpsertOne struct {
		create *MessageLinkCreate
	}

	// MessageLinkUpsert is the "OnConflict" setter.
	MessageLinkUpsert struct {
		*sql.UpdateSet
	}
)

// SetLink sets the "link" field.
func (u *MessageLinkUpsert) SetLink(v string) *MessageLinkUpsert {
	u.Set(messagelink.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *MessageLinkUpsert) UpdateLink() *MessageLinkUpsert {
	u.SetExcluded(messagelink.FieldLink)
	return u
}

// SetTitle sets the "title" field.
func (u *MessageLinkUpsert) SetTitle(v string) *MessageLinkUpsert {
	u.Set(messagelink.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MessageLinkUpsert) UpdateTitle() *MessageLinkUpsert {
	u.SetExcluded(messagelink.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *MessageLinkUpsert) ClearTitle() *MessageLinkUpsert {
	u.SetNull(messagelink.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *MessageLinkUpsert) SetDescription(v string) *MessageLinkUpsert {
	u.Set(messagelink.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MessageLinkUpsert) UpdateDescription() *MessageLinkUpsert {
	u.SetExcluded(messagelink.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *MessageLinkUpsert) ClearDescription() *MessageLinkUpsert {
	u.SetNull(messagelink.FieldDescription)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *MessageLinkUpsert) SetImageURL(v string) *MessageLinkUpsert {
	u.Set(messagelink.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *MessageLinkUpsert) UpdateImageURL() *MessageLinkUpsert {
	u.SetExcluded(messagelink.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *MessageLinkUpsert) ClearImageURL() *MessageLinkUpsert {
	u.SetNull(messagelink.FieldImageURL)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageLinkUpsert) SetUpdatedAt(v time.Time) *MessageLinkUpsert {
	u.Set(messagelink.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageLinkUpsert) UpdateUpdatedAt() *MessageLinkUpsert {
	u.SetExcluded(messagelink.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.MessageLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messagelink.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageLinkUpsertOne) UpdateNewValues() *MessageLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(messagelink.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(messagelink.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageLink.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MessageLinkUpsertOne) Ignore() *MessageLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageLinkUpsertOne) DoNothing() *MessageLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageLinkCreate.OnConflict
// documentation for more info.
func (u *MessageLinkUpsertOne) Update(set func(*MessageLinkUpsert)) *MessageLinkUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetLink sets the "link" field.
func (u *MessageLinkUpsertOne) SetLink(v string) *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *MessageLinkUpsertOne) UpdateLink() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateLink()
	})
}

// SetTitle sets the "title" field.
func (u *MessageLinkUpsertOne) SetTitle(v string) *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MessageLinkUpsertOne) UpdateTitle() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *MessageLinkUpsertOne) ClearTitle() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *MessageLinkUpsertOne) SetDescription(v string) *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MessageLinkUpsertOne) UpdateDescription() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MessageLinkUpsertOne) ClearDescription() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.ClearDescription()
	})
}

// SetImageURL sets the "image_url" field.
func (u *MessageLinkUpsertOne) SetImageURL(v string) *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *MessageLinkUpsertOne) UpdateImageURL() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *MessageLinkUpsertOne) ClearImageURL() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.ClearImageURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageLinkUpsertOne) SetUpdatedAt(v time.Time) *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageLinkUpsertOne) UpdateUpdatedAt() *MessageLinkUpsertOne {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MessageLinkUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageLinkCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageLinkUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MessageLinkUpsertOne) ID(ctx context.Context) (id pulid.ID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MessageLinkUpsertOne.ID is not supported by MySQL driver. Use MessageLinkUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MessageLinkUpsertOne) IDX(ctx context.Context) pulid.ID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MessageLinkCreateBulk is the builder for creating many MessageLink entities in bulk.
type MessageLinkCreateBulk struct {
	config
	err      error
	builders []*MessageLinkCreate
	conflict []sql.ConflictOption
}

// Save creates the MessageLink entities in the database.
func (mlcb *MessageLinkCreateBulk) Save(ctx context.Context) ([]*MessageLink, error) {
	if mlcb.err != nil {
		return nil, mlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mlcb.builders))
	nodes := make([]*MessageLink, len(mlcb.builders))
	mutators := make([]Mutator, len(mlcb.builders))
	for i := range mlcb.builders {
		func(i int, root context.Context) {
			builder := mlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MessageLinkMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mlcb *MessageLinkCreateBulk) SaveX(ctx context.Context) []*MessageLink {
	v, err := mlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mlcb *MessageLinkCreateBulk) Exec(ctx context.Context) error {
	_, err := mlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mlcb *MessageLinkCreateBulk) ExecX(ctx context.Context) {
	if err := mlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MessageLink.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MessageLinkUpsert) {
//			SetLink(v+v).
//		}).
//		Exec(ctx)
func (mlcb *MessageLinkCreateBulk) OnConflict(opts ...sql.ConflictOption) *MessageLinkUpsertBulk {
	mlcb.conflict = opts
	return &MessageLinkUpsertBulk{
		create: mlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MessageLink.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mlcb *MessageLinkCreateBulk) OnConflictColumns(columns ...string) *MessageLinkUpsertBulk {
	mlcb.conflict = append(mlcb.conflict, sql.ConflictColumns(columns...))
	return &MessageLinkUpsertBulk{
		create: mlcb,
	}
}

// MessageLinkUpsertBulk is the builder for "upsert"-ing
// a bulk of MessageLink nodes.
type MessageLinkUpsertBulk struct {
	create *MessageLinkCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MessageLink.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(messagelink.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MessageLinkUpsertBulk) UpdateNewValues() *MessageLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(messagelink.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(messagelink.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MessageLink.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MessageLinkUpsertBulk) Ignore() *MessageLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MessageLinkUpsertBulk) DoNothing() *MessageLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MessageLinkCreateBulk.OnConflict
// documentation for more info.
func (u *MessageLinkUpsertBulk) Update(set func(*MessageLinkUpsert)) *MessageLinkUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MessageLinkUpsert{UpdateSet: update})
	}))
	return u
}

// SetLink sets the "link" field.
func (u *MessageLinkUpsertBulk) SetLink(v string) *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *MessageLinkUpsertBulk) UpdateLink() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateLink()
	})
}

// SetTitle sets the "title" field.
func (u *MessageLinkUpsertBulk) SetTitle(v string) *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MessageLinkUpsertBulk) UpdateTitle() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *MessageLinkUpsertBulk) ClearTitle() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.ClearTitle()
	})
}

// SetDescription sets the "description" field.
func (u *MessageLinkUpsertBulk) SetDescription(v string) *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MessageLinkUpsertBulk) UpdateDescription() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MessageLinkUpsertBulk) ClearDescription() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.ClearDescription()
	})
}

// SetImageURL sets the "image_url" field.
func (u *MessageLinkUpsertBulk) SetImageURL(v string) *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *MessageLinkUpsertBulk) UpdateImageURL() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *MessageLinkUpsertBulk) ClearImageURL() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.ClearImageURL()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MessageLinkUpsertBulk) SetUpdatedAt(v time.Time) *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MessageLinkUpsertBulk) UpdateUpdatedAt() *MessageLinkUpsertBulk {
	return u.Update(func(s *MessageLinkUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *MessageLinkUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MessageLinkCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MessageLinkCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MessageLinkUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
