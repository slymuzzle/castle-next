// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/ent/user"
	"journeyhub/ent/usercontact"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserContact is the model entity for the UserContact schema.
type UserContact struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID pulid.ID `json:"user_id,omitempty"`
	// ContactID holds the value of the "contact_id" field.
	ContactID pulid.ID `json:"contact_id,omitempty"`
	// RoomID holds the value of the "room_id" field.
	RoomID pulid.ID `json:"room_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserContactQuery when eager-loading is set.
	Edges        UserContactEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserContactEdges holds the relations/edges for other nodes in the graph.
type UserContactEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Contact holds the value of the contact edge.
	Contact *User `json:"contact,omitempty"`
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserContactEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ContactOrErr returns the Contact value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserContactEdges) ContactOrErr() (*User, error) {
	if e.Contact != nil {
		return e.Contact, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "contact"}
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserContactEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserContact) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usercontact.FieldID, usercontact.FieldUserID, usercontact.FieldContactID, usercontact.FieldRoomID:
			values[i] = new(pulid.ID)
		case usercontact.FieldDeletedAt, usercontact.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserContact fields.
func (uc *UserContact) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usercontact.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				uc.ID = *value
			}
		case usercontact.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uc.DeletedAt = value.Time
			}
		case usercontact.FieldUserID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				uc.UserID = *value
			}
		case usercontact.FieldContactID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field contact_id", values[i])
			} else if value != nil {
				uc.ContactID = *value
			}
		case usercontact.FieldRoomID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field room_id", values[i])
			} else if value != nil {
				uc.RoomID = *value
			}
		case usercontact.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uc.CreatedAt = value.Time
			}
		default:
			uc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserContact.
// This includes values selected through modifiers, order, etc.
func (uc *UserContact) Value(name string) (ent.Value, error) {
	return uc.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the UserContact entity.
func (uc *UserContact) QueryUser() *UserQuery {
	return NewUserContactClient(uc.config).QueryUser(uc)
}

// QueryContact queries the "contact" edge of the UserContact entity.
func (uc *UserContact) QueryContact() *UserQuery {
	return NewUserContactClient(uc.config).QueryContact(uc)
}

// QueryRoom queries the "room" edge of the UserContact entity.
func (uc *UserContact) QueryRoom() *RoomQuery {
	return NewUserContactClient(uc.config).QueryRoom(uc)
}

// Update returns a builder for updating this UserContact.
// Note that you need to call UserContact.Unwrap() before calling this method if this UserContact
// was returned from a transaction, and the transaction was committed or rolled back.
func (uc *UserContact) Update() *UserContactUpdateOne {
	return NewUserContactClient(uc.config).UpdateOne(uc)
}

// Unwrap unwraps the UserContact entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uc *UserContact) Unwrap() *UserContact {
	_tx, ok := uc.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserContact is not a transactional entity")
	}
	uc.config.driver = _tx.drv
	return uc
}

// String implements the fmt.Stringer.
func (uc *UserContact) String() string {
	var builder strings.Builder
	builder.WriteString("UserContact(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uc.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(uc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.UserID))
	builder.WriteString(", ")
	builder.WriteString("contact_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.ContactID))
	builder.WriteString(", ")
	builder.WriteString("room_id=")
	builder.WriteString(fmt.Sprintf("%v", uc.RoomID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uc.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserContacts is a parsable slice of UserContact.
type UserContacts []*UserContact
