// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/message"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Version holds the value of the "version" field.
	Version uint64 `json:"version,omitempty"`
	// Type holds the value of the "type" field.
	Type room.Type `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges             RoomEdges `json:"edges"`
	room_last_message *pulid.ID
	selectValues      sql.SelectValues
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// UserContact holds the value of the user_contact edge.
	UserContact []*UserContact `json:"user_contact,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// LastMessage holds the value of the last_message edge.
	LastMessage *Message `json:"last_message,omitempty"`
	// Messages holds the value of the messages edge.
	Messages []*Message `json:"messages,omitempty"`
	// MessageVoices holds the value of the message_voices edge.
	MessageVoices []*MessageVoice `json:"message_voices,omitempty"`
	// MessageAttachments holds the value of the message_attachments edge.
	MessageAttachments []*MessageAttachment `json:"message_attachments,omitempty"`
	// MessageLinks holds the value of the message_links edge.
	MessageLinks []*MessageLink `json:"message_links,omitempty"`
	// RoomMembers holds the value of the room_members edge.
	RoomMembers []*RoomMember `json:"room_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
	// totalCount holds the count of the edges above.
	totalCount [8]map[string]int

	namedUserContact        map[string][]*UserContact
	namedUsers              map[string][]*User
	namedMessages           map[string][]*Message
	namedMessageVoices      map[string][]*MessageVoice
	namedMessageAttachments map[string][]*MessageAttachment
	namedMessageLinks       map[string][]*MessageLink
	namedRoomMembers        map[string][]*RoomMember
}

// UserContactOrErr returns the UserContact value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) UserContactOrErr() ([]*UserContact, error) {
	if e.loadedTypes[0] {
		return e.UserContact, nil
	}
	return nil, &NotLoadedError{edge: "user_contact"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// LastMessageOrErr returns the LastMessage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) LastMessageOrErr() (*Message, error) {
	if e.LastMessage != nil {
		return e.LastMessage, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "last_message"}
}

// MessagesOrErr returns the Messages value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) MessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[3] {
		return e.Messages, nil
	}
	return nil, &NotLoadedError{edge: "messages"}
}

// MessageVoicesOrErr returns the MessageVoices value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) MessageVoicesOrErr() ([]*MessageVoice, error) {
	if e.loadedTypes[4] {
		return e.MessageVoices, nil
	}
	return nil, &NotLoadedError{edge: "message_voices"}
}

// MessageAttachmentsOrErr returns the MessageAttachments value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) MessageAttachmentsOrErr() ([]*MessageAttachment, error) {
	if e.loadedTypes[5] {
		return e.MessageAttachments, nil
	}
	return nil, &NotLoadedError{edge: "message_attachments"}
}

// MessageLinksOrErr returns the MessageLinks value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) MessageLinksOrErr() ([]*MessageLink, error) {
	if e.loadedTypes[6] {
		return e.MessageLinks, nil
	}
	return nil, &NotLoadedError{edge: "message_links"}
}

// RoomMembersOrErr returns the RoomMembers value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) RoomMembersOrErr() ([]*RoomMember, error) {
	if e.loadedTypes[7] {
		return e.RoomMembers, nil
	}
	return nil, &NotLoadedError{edge: "room_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case room.FieldID:
			values[i] = new(pulid.ID)
		case room.FieldVersion:
			values[i] = new(sql.NullInt64)
		case room.FieldName, room.FieldType:
			values[i] = new(sql.NullString)
		case room.FieldDeletedAt, room.FieldCreatedAt, room.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case room.ForeignKeys[0]: // room_last_message
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case room.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case room.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				r.DeletedAt = value.Time
			}
		case room.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case room.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				r.Version = uint64(value.Int64)
			}
		case room.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = room.Type(value.String)
			}
		case room.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case room.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case room.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field room_last_message", values[i])
			} else if value.Valid {
				r.room_last_message = new(pulid.ID)
				*r.room_last_message = *value.S.(*pulid.ID)
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Room.
// This includes values selected through modifiers, order, etc.
func (r *Room) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUserContact queries the "user_contact" edge of the Room entity.
func (r *Room) QueryUserContact() *UserContactQuery {
	return NewRoomClient(r.config).QueryUserContact(r)
}

// QueryUsers queries the "users" edge of the Room entity.
func (r *Room) QueryUsers() *UserQuery {
	return NewRoomClient(r.config).QueryUsers(r)
}

// QueryLastMessage queries the "last_message" edge of the Room entity.
func (r *Room) QueryLastMessage() *MessageQuery {
	return NewRoomClient(r.config).QueryLastMessage(r)
}

// QueryMessages queries the "messages" edge of the Room entity.
func (r *Room) QueryMessages() *MessageQuery {
	return NewRoomClient(r.config).QueryMessages(r)
}

// QueryMessageVoices queries the "message_voices" edge of the Room entity.
func (r *Room) QueryMessageVoices() *MessageVoiceQuery {
	return NewRoomClient(r.config).QueryMessageVoices(r)
}

// QueryMessageAttachments queries the "message_attachments" edge of the Room entity.
func (r *Room) QueryMessageAttachments() *MessageAttachmentQuery {
	return NewRoomClient(r.config).QueryMessageAttachments(r)
}

// QueryMessageLinks queries the "message_links" edge of the Room entity.
func (r *Room) QueryMessageLinks() *MessageLinkQuery {
	return NewRoomClient(r.config).QueryMessageLinks(r)
}

// QueryRoomMembers queries the "room_members" edge of the Room entity.
func (r *Room) QueryRoomMembers() *RoomMemberQuery {
	return NewRoomClient(r.config).QueryRoomMembers(r)
}

// Update returns a builder for updating this Room.
// Note that you need to call Room.Unwrap() before calling this method if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return NewRoomClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Room entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("deleted_at=")
	builder.WriteString(r.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", r.Version))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NamedUserContact returns the UserContact named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedUserContact(name string) ([]*UserContact, error) {
	if r.Edges.namedUserContact == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedUserContact[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedUserContact(name string, edges ...*UserContact) {
	if r.Edges.namedUserContact == nil {
		r.Edges.namedUserContact = make(map[string][]*UserContact)
	}
	if len(edges) == 0 {
		r.Edges.namedUserContact[name] = []*UserContact{}
	} else {
		r.Edges.namedUserContact[name] = append(r.Edges.namedUserContact[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedUsers(name string) ([]*User, error) {
	if r.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedUsers(name string, edges ...*User) {
	if r.Edges.namedUsers == nil {
		r.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		r.Edges.namedUsers[name] = []*User{}
	} else {
		r.Edges.namedUsers[name] = append(r.Edges.namedUsers[name], edges...)
	}
}

// NamedMessages returns the Messages named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedMessages(name string) ([]*Message, error) {
	if r.Edges.namedMessages == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedMessages[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedMessages(name string, edges ...*Message) {
	if r.Edges.namedMessages == nil {
		r.Edges.namedMessages = make(map[string][]*Message)
	}
	if len(edges) == 0 {
		r.Edges.namedMessages[name] = []*Message{}
	} else {
		r.Edges.namedMessages[name] = append(r.Edges.namedMessages[name], edges...)
	}
}

// NamedMessageVoices returns the MessageVoices named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedMessageVoices(name string) ([]*MessageVoice, error) {
	if r.Edges.namedMessageVoices == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedMessageVoices[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedMessageVoices(name string, edges ...*MessageVoice) {
	if r.Edges.namedMessageVoices == nil {
		r.Edges.namedMessageVoices = make(map[string][]*MessageVoice)
	}
	if len(edges) == 0 {
		r.Edges.namedMessageVoices[name] = []*MessageVoice{}
	} else {
		r.Edges.namedMessageVoices[name] = append(r.Edges.namedMessageVoices[name], edges...)
	}
}

// NamedMessageAttachments returns the MessageAttachments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedMessageAttachments(name string) ([]*MessageAttachment, error) {
	if r.Edges.namedMessageAttachments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedMessageAttachments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedMessageAttachments(name string, edges ...*MessageAttachment) {
	if r.Edges.namedMessageAttachments == nil {
		r.Edges.namedMessageAttachments = make(map[string][]*MessageAttachment)
	}
	if len(edges) == 0 {
		r.Edges.namedMessageAttachments[name] = []*MessageAttachment{}
	} else {
		r.Edges.namedMessageAttachments[name] = append(r.Edges.namedMessageAttachments[name], edges...)
	}
}

// NamedMessageLinks returns the MessageLinks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedMessageLinks(name string) ([]*MessageLink, error) {
	if r.Edges.namedMessageLinks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedMessageLinks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedMessageLinks(name string, edges ...*MessageLink) {
	if r.Edges.namedMessageLinks == nil {
		r.Edges.namedMessageLinks = make(map[string][]*MessageLink)
	}
	if len(edges) == 0 {
		r.Edges.namedMessageLinks[name] = []*MessageLink{}
	} else {
		r.Edges.namedMessageLinks[name] = append(r.Edges.namedMessageLinks[name], edges...)
	}
}

// NamedRoomMembers returns the RoomMembers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Room) NamedRoomMembers(name string) ([]*RoomMember, error) {
	if r.Edges.namedRoomMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRoomMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Room) appendNamedRoomMembers(name string, edges ...*RoomMember) {
	if r.Edges.namedRoomMembers == nil {
		r.Edges.namedRoomMembers = make(map[string][]*RoomMember)
	}
	if len(edges) == 0 {
		r.Edges.namedRoomMembers[name] = []*RoomMember{}
	} else {
		r.Edges.namedRoomMembers[name] = append(r.Edges.namedRoomMembers[name], edges...)
	}
}

// Rooms is a parsable slice of Room.
type Rooms []*Room
