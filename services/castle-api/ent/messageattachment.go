// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"journeyhub/ent/file"
	"journeyhub/ent/message"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// MessageAttachment is the model entity for the MessageAttachment schema.
type MessageAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID pulid.ID `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type messageattachment.Type `json:"type,omitempty"`
	// Order holds the value of the "order" field.
	Order uint `json:"order,omitempty"`
	// AttachedAt holds the value of the "attached_at" field.
	AttachedAt time.Time `json:"attached_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageAttachmentQuery when eager-loading is set.
	Edges                    MessageAttachmentEdges `json:"edges"`
	file_message_attachment  *pulid.ID
	message_attachments      *pulid.ID
	room_message_attachments *pulid.ID
	selectValues             sql.SelectValues
}

// MessageAttachmentEdges holds the relations/edges for other nodes in the graph.
type MessageAttachmentEdges struct {
	// Room holds the value of the room edge.
	Room *Room `json:"room,omitempty"`
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// File holds the value of the file edge.
	File *File `json:"file,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageAttachmentEdges) RoomOrErr() (*Room, error) {
	if e.Room != nil {
		return e.Room, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: room.Label}
	}
	return nil, &NotLoadedError{edge: "room"}
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageAttachmentEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// FileOrErr returns the File value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageAttachmentEdges) FileOrErr() (*File, error) {
	if e.File != nil {
		return e.File, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "file"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MessageAttachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case messageattachment.FieldID:
			values[i] = new(pulid.ID)
		case messageattachment.FieldOrder:
			values[i] = new(sql.NullInt64)
		case messageattachment.FieldType:
			values[i] = new(sql.NullString)
		case messageattachment.FieldAttachedAt:
			values[i] = new(sql.NullTime)
		case messageattachment.ForeignKeys[0]: // file_message_attachment
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case messageattachment.ForeignKeys[1]: // message_attachments
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		case messageattachment.ForeignKeys[2]: // room_message_attachments
			values[i] = &sql.NullScanner{S: new(pulid.ID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MessageAttachment fields.
func (ma *MessageAttachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case messageattachment.FieldID:
			if value, ok := values[i].(*pulid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ma.ID = *value
			}
		case messageattachment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ma.Type = messageattachment.Type(value.String)
			}
		case messageattachment.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				ma.Order = uint(value.Int64)
			}
		case messageattachment.FieldAttachedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field attached_at", values[i])
			} else if value.Valid {
				ma.AttachedAt = value.Time
			}
		case messageattachment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field file_message_attachment", values[i])
			} else if value.Valid {
				ma.file_message_attachment = new(pulid.ID)
				*ma.file_message_attachment = *value.S.(*pulid.ID)
			}
		case messageattachment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field message_attachments", values[i])
			} else if value.Valid {
				ma.message_attachments = new(pulid.ID)
				*ma.message_attachments = *value.S.(*pulid.ID)
			}
		case messageattachment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field room_message_attachments", values[i])
			} else if value.Valid {
				ma.room_message_attachments = new(pulid.ID)
				*ma.room_message_attachments = *value.S.(*pulid.ID)
			}
		default:
			ma.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MessageAttachment.
// This includes values selected through modifiers, order, etc.
func (ma *MessageAttachment) Value(name string) (ent.Value, error) {
	return ma.selectValues.Get(name)
}

// QueryRoom queries the "room" edge of the MessageAttachment entity.
func (ma *MessageAttachment) QueryRoom() *RoomQuery {
	return NewMessageAttachmentClient(ma.config).QueryRoom(ma)
}

// QueryMessage queries the "message" edge of the MessageAttachment entity.
func (ma *MessageAttachment) QueryMessage() *MessageQuery {
	return NewMessageAttachmentClient(ma.config).QueryMessage(ma)
}

// QueryFile queries the "file" edge of the MessageAttachment entity.
func (ma *MessageAttachment) QueryFile() *FileQuery {
	return NewMessageAttachmentClient(ma.config).QueryFile(ma)
}

// Update returns a builder for updating this MessageAttachment.
// Note that you need to call MessageAttachment.Unwrap() before calling this method if this MessageAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (ma *MessageAttachment) Update() *MessageAttachmentUpdateOne {
	return NewMessageAttachmentClient(ma.config).UpdateOne(ma)
}

// Unwrap unwraps the MessageAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ma *MessageAttachment) Unwrap() *MessageAttachment {
	_tx, ok := ma.config.driver.(*txDriver)
	if !ok {
		panic("ent: MessageAttachment is not a transactional entity")
	}
	ma.config.driver = _tx.drv
	return ma
}

// String implements the fmt.Stringer.
func (ma *MessageAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("MessageAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ma.ID))
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", ma.Type))
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", ma.Order))
	builder.WriteString(", ")
	builder.WriteString("attached_at=")
	builder.WriteString(ma.AttachedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// MessageAttachments is a parsable slice of MessageAttachment.
type MessageAttachments []*MessageAttachment
