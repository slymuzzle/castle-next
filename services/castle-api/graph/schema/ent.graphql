directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  name: String!
  contentType: String!
  size: Uint64!
  location: String
  bucket: String!
  path: String!
  createdAt: Time!
  updatedAt: Time!
  messageAttachment: MessageAttachment
  messageVoice: MessageVoice
}
"""
Ordering options for File connections
"""
input FileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Files.
  """
  field: FileOrderField!
}
"""
Properties by which File connections can be ordered.
"""
enum FileOrderField {
  NAME
  CONTENT_TYPE
  SIZE
  LOCATION
  BUCKET
  PATH
  CREATED_AT
  UPDATED_AT
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  content_type field predicates
  """
  contentType: String
  contentTypeNEQ: String
  contentTypeIn: [String!]
  contentTypeNotIn: [String!]
  contentTypeGT: String
  contentTypeGTE: String
  contentTypeLT: String
  contentTypeLTE: String
  contentTypeContains: String
  contentTypeHasPrefix: String
  contentTypeHasSuffix: String
  contentTypeEqualFold: String
  contentTypeContainsFold: String
  """
  size field predicates
  """
  size: Uint64
  sizeNEQ: Uint64
  sizeIn: [Uint64!]
  sizeNotIn: [Uint64!]
  sizeGT: Uint64
  sizeGTE: Uint64
  sizeLT: Uint64
  sizeLTE: Uint64
  """
  location field predicates
  """
  location: String
  locationNEQ: String
  locationIn: [String!]
  locationNotIn: [String!]
  locationGT: String
  locationGTE: String
  locationLT: String
  locationLTE: String
  locationContains: String
  locationHasPrefix: String
  locationHasSuffix: String
  locationIsNil: Boolean
  locationNotNil: Boolean
  locationEqualFold: String
  locationContainsFold: String
  """
  bucket field predicates
  """
  bucket: String
  bucketNEQ: String
  bucketIn: [String!]
  bucketNotIn: [String!]
  bucketGT: String
  bucketGTE: String
  bucketLT: String
  bucketLTE: String
  bucketContains: String
  bucketHasPrefix: String
  bucketHasSuffix: String
  bucketEqualFold: String
  bucketContainsFold: String
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathEqualFold: String
  pathContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  message_attachment edge predicates
  """
  hasMessageAttachment: Boolean
  hasMessageAttachmentWith: [MessageAttachmentWhereInput!]
  """
  message_voice edge predicates
  """
  hasMessageVoice: Boolean
  hasMessageVoiceWith: [MessageVoiceWhereInput!]
}
type Message implements Node {
  id: ID!
  content: String!
  createdAt: Time!
  updatedAt: Time!
  voice: MessageVoice
  replyTo: Message
  attachments: [MessageAttachment!]
  links: [MessageLink!]
  user: User
  room: Room
}
type MessageAttachment implements Node {
  id: ID!
  order: Uint!
  attachedAt: Time!
  room: Room!
  message: Message!
  file: File!
}
"""
A connection to a list of items.
"""
type MessageAttachmentConnection {
  """
  A list of edges.
  """
  edges: [MessageAttachmentEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MessageAttachmentEdge {
  """
  The item at the end of the edge.
  """
  node: MessageAttachment
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for MessageAttachment connections
"""
input MessageAttachmentOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MessageAttachments.
  """
  field: MessageAttachmentOrderField!
}
"""
Properties by which MessageAttachment connections can be ordered.
"""
enum MessageAttachmentOrderField {
  ORDER
  ATTACHED_AT
}
"""
MessageAttachmentWhereInput is used for filtering MessageAttachment objects.
Input was generated by ent.
"""
input MessageAttachmentWhereInput {
  not: MessageAttachmentWhereInput
  and: [MessageAttachmentWhereInput!]
  or: [MessageAttachmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  order field predicates
  """
  order: Uint
  orderNEQ: Uint
  orderIn: [Uint!]
  orderNotIn: [Uint!]
  orderGT: Uint
  orderGTE: Uint
  orderLT: Uint
  orderLTE: Uint
  """
  attached_at field predicates
  """
  attachedAt: Time
  attachedAtNEQ: Time
  attachedAtIn: [Time!]
  attachedAtNotIn: [Time!]
  attachedAtGT: Time
  attachedAtGTE: Time
  attachedAtLT: Time
  attachedAtLTE: Time
  """
  room edge predicates
  """
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
  """
  message edge predicates
  """
  hasMessage: Boolean
  hasMessageWith: [MessageWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
"""
A connection to a list of items.
"""
type MessageConnection {
  """
  A list of edges.
  """
  edges: [MessageEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MessageEdge {
  """
  The item at the end of the edge.
  """
  node: Message
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type MessageLink implements Node {
  id: ID!
  url: String!
  createdAt: Time!
  updatedAt: Time!
  room: Room!
  message: Message!
}
"""
A connection to a list of items.
"""
type MessageLinkConnection {
  """
  A list of edges.
  """
  edges: [MessageLinkEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MessageLinkEdge {
  """
  The item at the end of the edge.
  """
  node: MessageLink
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for MessageLink connections
"""
input MessageLinkOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MessageLinks.
  """
  field: MessageLinkOrderField!
}
"""
Properties by which MessageLink connections can be ordered.
"""
enum MessageLinkOrderField {
  URL
  CREATED_AT
  UPDATED_AT
}
"""
MessageLinkWhereInput is used for filtering MessageLink objects.
Input was generated by ent.
"""
input MessageLinkWhereInput {
  not: MessageLinkWhereInput
  and: [MessageLinkWhereInput!]
  or: [MessageLinkWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  room edge predicates
  """
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
  """
  message edge predicates
  """
  hasMessage: Boolean
  hasMessageWith: [MessageWhereInput!]
}
"""
Ordering options for Message connections
"""
input MessageOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Messages.
  """
  field: MessageOrderField!
}
"""
Properties by which Message connections can be ordered.
"""
enum MessageOrderField {
  CREATED_AT
  UPDATED_AT
}
type MessageVoice implements Node {
  id: ID!
  attachedAt: Time!
  room: Room!
  message: Message!
  file: File!
}
"""
A connection to a list of items.
"""
type MessageVoiceConnection {
  """
  A list of edges.
  """
  edges: [MessageVoiceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MessageVoiceEdge {
  """
  The item at the end of the edge.
  """
  node: MessageVoice
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for MessageVoice connections
"""
input MessageVoiceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MessageVoices.
  """
  field: MessageVoiceOrderField!
}
"""
Properties by which MessageVoice connections can be ordered.
"""
enum MessageVoiceOrderField {
  ATTACHED_AT
}
"""
MessageVoiceWhereInput is used for filtering MessageVoice objects.
Input was generated by ent.
"""
input MessageVoiceWhereInput {
  not: MessageVoiceWhereInput
  and: [MessageVoiceWhereInput!]
  or: [MessageVoiceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  attached_at field predicates
  """
  attachedAt: Time
  attachedAtNEQ: Time
  attachedAtIn: [Time!]
  attachedAtNotIn: [Time!]
  attachedAtGT: Time
  attachedAtGTE: Time
  attachedAtLT: Time
  attachedAtLTE: Time
  """
  room edge predicates
  """
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
  """
  message edge predicates
  """
  hasMessage: Boolean
  hasMessageWith: [MessageWhereInput!]
  """
  file edge predicates
  """
  hasFile: Boolean
  hasFileWith: [FileWhereInput!]
}
"""
MessageWhereInput is used for filtering Message objects.
Input was generated by ent.
"""
input MessageWhereInput {
  not: MessageWhereInput
  and: [MessageWhereInput!]
  or: [MessageWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  voice edge predicates
  """
  hasVoice: Boolean
  hasVoiceWith: [MessageVoiceWhereInput!]
  """
  reply_to edge predicates
  """
  hasReplyTo: Boolean
  hasReplyToWith: [MessageWhereInput!]
  """
  attachments edge predicates
  """
  hasAttachments: Boolean
  hasAttachmentsWith: [MessageAttachmentWhereInput!]
  """
  links edge predicates
  """
  hasLinks: Boolean
  hasLinksWith: [MessageLinkWhereInput!]
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  room edge predicates
  """
  hasRoom: Boolean
  hasRoomWith: [RoomWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "journeyhub/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  roomMembers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RoomMembers returned from the connection.
    """
    orderBy: [RoomMemberOrder!]

    """
    Filtering options for RoomMembers returned from the connection.
    """
    where: RoomMemberWhereInput
  ): RoomMemberConnection!
  userContacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserContacts returned from the connection.
    """
    orderBy: [UserContactOrder!]

    """
    Filtering options for UserContacts returned from the connection.
    """
    where: UserContactWhereInput
  ): UserContactConnection!
}
type Room implements Node {
  id: ID!
  name: String!
  version: Uint64!
  type: RoomType!
  createdAt: Time!
  updatedAt: Time!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  lastMessage: Message
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Messages returned from the connection.
    """
    orderBy: [MessageOrder!]

    """
    Filtering options for Messages returned from the connection.
    """
    where: MessageWhereInput
  ): MessageConnection!
  messageVoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MessageVoices returned from the connection.
    """
    orderBy: MessageVoiceOrder

    """
    Filtering options for MessageVoices returned from the connection.
    """
    where: MessageVoiceWhereInput
  ): MessageVoiceConnection!
  messageAttachments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MessageAttachments returned from the connection.
    """
    orderBy: MessageAttachmentOrder

    """
    Filtering options for MessageAttachments returned from the connection.
    """
    where: MessageAttachmentWhereInput
  ): MessageAttachmentConnection!
  messageLinks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MessageLinks returned from the connection.
    """
    orderBy: MessageLinkOrder

    """
    Filtering options for MessageLinks returned from the connection.
    """
    where: MessageLinkWhereInput
  ): MessageLinkConnection!
  roomMembers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RoomMembers returned from the connection.
    """
    orderBy: [RoomMemberOrder!]

    """
    Filtering options for RoomMembers returned from the connection.
    """
    where: RoomMemberWhereInput
  ): RoomMemberConnection!
}
"""
A connection to a list of items.
"""
type RoomConnection {
  """
  A list of edges.
  """
  edges: [RoomEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoomEdge {
  """
  The item at the end of the edge.
  """
  node: Room
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RoomMember implements Node {
  id: ID!
  unreadMessagesCount: Int!
  userID: ID!
  roomID: ID!
  joinedAt: Time!
  user: User!
  room: Room!
}
"""
A connection to a list of items.
"""
type RoomMemberConnection {
  """
  A list of edges.
  """
  edges: [RoomMemberEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoomMemberEdge {
  """
  The item at the end of the edge.
  """
  node: RoomMember
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for RoomMember connections
"""
input RoomMemberOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RoomMembers.
  """
  field: RoomMemberOrderField!
}
"""
Properties by which RoomMember connections can be ordered.
"""
enum RoomMemberOrderField {
  UNREAD_MESSAGES_COUNT
  JOINED_AT
}
"""
RoomMemberWhereInput is used for filtering RoomMember objects.
Input was generated by ent.
"""
input RoomMemberWhereInput {
  not: RoomMemberWhereInput
  and: [RoomMemberWhereInput!]
  or: [RoomMemberWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  unread_messages_count field predicates
  """
  unreadMessagesCount: Int
  unreadMessagesCountNEQ: Int
  unreadMessagesCountIn: [Int!]
  unreadMessagesCountNotIn: [Int!]
  unreadMessagesCountGT: Int
  unreadMessagesCountGTE: Int
  unreadMessagesCountLT: Int
  unreadMessagesCountLTE: Int
  """
  joined_at field predicates
  """
  joinedAt: Time
  joinedAtNEQ: Time
  joinedAtIn: [Time!]
  joinedAtNotIn: [Time!]
  joinedAtGT: Time
  joinedAtGTE: Time
  joinedAtLT: Time
  joinedAtLTE: Time
}
"""
Ordering options for Room connections
"""
input RoomOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Rooms.
  """
  field: RoomOrderField!
}
"""
Properties by which Room connections can be ordered.
"""
enum RoomOrderField {
  NAME
  VERSION
  TYPE
  CREATED_AT
  UPDATED_AT
}
"""
RoomType is enum for the field type
"""
enum RoomType @goModel(model: "journeyhub/ent/room.Type") {
  Personal
  Group
}
"""
RoomWhereInput is used for filtering Room objects.
Input was generated by ent.
"""
input RoomWhereInput {
  not: RoomWhereInput
  and: [RoomWhereInput!]
  or: [RoomWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  version field predicates
  """
  version: Uint64
  versionNEQ: Uint64
  versionIn: [Uint64!]
  versionNotIn: [Uint64!]
  versionGT: Uint64
  versionGTE: Uint64
  versionLT: Uint64
  versionLTE: Uint64
  """
  type field predicates
  """
  type: RoomType
  typeNEQ: RoomType
  typeIn: [RoomType!]
  typeNotIn: [RoomType!]
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  last_message edge predicates
  """
  hasLastMessage: Boolean
  hasLastMessageWith: [MessageWhereInput!]
  """
  messages edge predicates
  """
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
  """
  message_voices edge predicates
  """
  hasMessageVoices: Boolean
  hasMessageVoicesWith: [MessageVoiceWhereInput!]
  """
  message_attachments edge predicates
  """
  hasMessageAttachments: Boolean
  hasMessageAttachmentsWith: [MessageAttachmentWhereInput!]
  """
  message_links edge predicates
  """
  hasMessageLinks: Boolean
  hasMessageLinksWith: [MessageLinkWhereInput!]
  """
  room_members edge predicates
  """
  hasRoomMembers: Boolean
  hasRoomMembersWith: [RoomMemberWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
"""
The builtin Uint type
"""
scalar Uint
"""
The builtin Uint64 type
"""
scalar Uint64
type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  nickname: String!
  email: String
  contactPin: String
  createdAt: Time!
  updatedAt: Time!
  contacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: UserOrder

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection!
  rooms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Rooms returned from the connection.
    """
    orderBy: [RoomOrder!]

    """
    Filtering options for Rooms returned from the connection.
    """
    where: RoomWhereInput
  ): RoomConnection!
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Messages returned from the connection.
    """
    orderBy: [MessageOrder!]

    """
    Filtering options for Messages returned from the connection.
    """
    where: MessageWhereInput
  ): MessageConnection!
  userContacts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for UserContacts returned from the connection.
    """
    orderBy: [UserContactOrder!]

    """
    Filtering options for UserContacts returned from the connection.
    """
    where: UserContactWhereInput
  ): UserContactConnection!
  memberships(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RoomMembers returned from the connection.
    """
    orderBy: [RoomMemberOrder!]

    """
    Filtering options for RoomMembers returned from the connection.
    """
    where: RoomMemberWhereInput
  ): RoomMemberConnection!
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
type UserContact implements Node {
  id: ID!
  userID: ID!
  contactID: ID!
  roomID: ID
  createdAt: Time!
  user: User!
  contact: User!
  room: Room
}
"""
A connection to a list of items.
"""
type UserContactConnection {
  """
  A list of edges.
  """
  edges: [UserContactEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserContactEdge {
  """
  The item at the end of the edge.
  """
  node: UserContact
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for UserContact connections
"""
input UserContactOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order UserContacts.
  """
  field: UserContactOrderField!
}
"""
Properties by which UserContact connections can be ordered.
"""
enum UserContactOrderField {
  CREATED_AT
}
"""
UserContactWhereInput is used for filtering UserContact objects.
Input was generated by ent.
"""
input UserContactWhereInput {
  not: UserContactWhereInput
  and: [UserContactWhereInput!]
  or: [UserContactWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  FIRST_NAME
  LAST_NAME
  NICKNAME
  EMAIL
  CREATED_AT
  UPDATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  nickname field predicates
  """
  nickname: String
  nicknameNEQ: String
  nicknameIn: [String!]
  nicknameNotIn: [String!]
  nicknameGT: String
  nicknameGTE: String
  nicknameLT: String
  nicknameLTE: String
  nicknameContains: String
  nicknameHasPrefix: String
  nicknameHasSuffix: String
  nicknameEqualFold: String
  nicknameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  contact_pin field predicates
  """
  contactPin: String
  contactPinNEQ: String
  contactPinIn: [String!]
  contactPinNotIn: [String!]
  contactPinGT: String
  contactPinGTE: String
  contactPinLT: String
  contactPinLTE: String
  contactPinContains: String
  contactPinHasPrefix: String
  contactPinHasSuffix: String
  contactPinIsNil: Boolean
  contactPinNotNil: Boolean
  contactPinEqualFold: String
  contactPinContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  contacts edge predicates
  """
  hasContacts: Boolean
  hasContactsWith: [UserWhereInput!]
  """
  rooms edge predicates
  """
  hasRooms: Boolean
  hasRoomsWith: [RoomWhereInput!]
  """
  messages edge predicates
  """
  hasMessages: Boolean
  hasMessagesWith: [MessageWhereInput!]
  """
  user_contacts edge predicates
  """
  hasUserContacts: Boolean
  hasUserContactsWith: [UserContactWhereInput!]
  """
  memberships edge predicates
  """
  hasMemberships: Boolean
  hasMembershipsWith: [RoomMemberWhereInput!]
}
