package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"journeyhub/ent"
	"journeyhub/ent/schema/pulid"
	"journeyhub/graph/generated"

	"entgo.io/contrib/entgql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id pulid.ID) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []pulid.ID) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy []*ent.MessageOrder, where *ent.MessageWhereInput) (*ent.MessageConnection, error) {
	return r.client.Message.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithMessageOrder(orderBy),
		)
}

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy []*ent.RoomOrder, where *ent.RoomWhereInput) (*ent.RoomConnection, error) {
	return r.client.Room.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithRoomOrder(orderBy),
		)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy []*ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	return r.client.User.Query().
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithUserOrder(orderBy),
		)
}

// RoomMembers is the resolver for the roomMembers field.
func (r *roomResolver) RoomMembers(ctx context.Context, obj *ent.Room) ([]*ent.RoomMember, error) {
	panic(fmt.Errorf("not implemented: RoomMembers - roomMembers"))
}

// Friendships is the resolver for the friendships field.
func (r *userResolver) Friendships(ctx context.Context, obj *ent.User) ([]*ent.Friendship, error) {
	panic(fmt.Errorf("not implemented: Friendships - friendships"))
}

// Memberships is the resolver for the memberships field.
func (r *userResolver) Memberships(ctx context.Context, obj *ent.User) ([]*ent.RoomMember, error) {
	panic(fmt.Errorf("not implemented: Memberships - memberships"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Room returns generated.RoomResolver implementation.
func (r *Resolver) Room() generated.RoomResolver { return &roomResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
