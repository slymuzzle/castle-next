// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"journeyhub/ent"
	"journeyhub/ent/messageattachment"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

// CreateMessageLinkInput is used for create message link object.
type CreateMessageLinkInput struct {
	Link        string  `json:"link"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	ImageURL    *string `json:"imageURL,omitempty"`
}

// CreateRoomInput is used for create Room object.
type CreateRoomInput struct {
	Name    string     `json:"name"`
	UserIDs []pulid.ID `json:"userIDs,omitempty"`
}

type LastMessageUpdatedEvent struct {
	ID        pulid.ID  `json:"id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type LoginUser struct {
	User  *ent.User `json:"user"`
	Token string    `json:"token"`
}

type RoomMemberUpdatedEvent struct {
	ID          pulid.ID                 `json:"id"`
	Name        string                   `json:"name"`
	Version     uint64                   `json:"version"`
	Type        room.Type                `json:"type"`
	LastMessage *LastMessageUpdatedEvent `json:"lastMessage,omitempty"`
	CreatedAt   time.Time                `json:"createdAt"`
	UpdatedAt   time.Time                `json:"updatedAt"`
}

// CreateMessageInput is used for create Message object.
type SendMessageInput struct {
	RoomID       pulid.ID                  `json:"roomID"`
	NotifyUserID *pulid.ID                 `json:"notifyUserID,omitempty"`
	ReplyTo      *pulid.ID                 `json:"replyTo,omitempty"`
	Content      *string                   `json:"content,omitempty" validate:"omitempty,max=4096"`
	Files        []*UploadMessageFileInput `json:"files,omitempty" validate:"max=20"`
	Voice        *UploadMessageVoiceInput  `json:"voice,omitempty"`
	Links        []*CreateMessageLinkInput `json:"links,omitempty"`
}

type Subscription struct {
}

// UpdateMessageInput is used for update Message object.
type UpdateMessageInput struct {
	Content      string                    `json:"content" validate:"omitempty,max=4096"`
	ReplaceLinks []*CreateMessageLinkInput `json:"replaceLinks,omitempty"`
}

// UpdateRoomInput is used for update Room object.
type UpdateRoomInput struct {
	Name          *string    `json:"name,omitempty"`
	AddUserIDs    []pulid.ID `json:"addUserIDs,omitempty"`
	RemoveUserIDs []pulid.ID `json:"removeUserIDs,omitempty"`
	ClearUsers    *bool      `json:"clearUsers,omitempty"`
}

// UploadMessageFile is used for upload message files.
type UploadMessageFileInput struct {
	Type messageattachment.Type `json:"type"`
	File graphql.Upload         `json:"file"`
}

// UploadMessageFile is used for upload message files.
type UploadMessageVoiceInput struct {
	Length uint64         `json:"length"`
	File   graphql.Upload `json:"file" validate:"gql_upload_is_voice"`
}

// UserLoginInput is used for user login.
type UserLoginInput struct {
	Nickname string `json:"nickname"`
	Password string `json:"password"`
	DeviceID string `json:"deviceID"`
	FcmToken string `json:"fcmToken"`
}

// UserRegisterInput is used for user register.
type UserRegisterInput struct {
	FirstName            string `json:"firstName" validate:"min=1,max=255"`
	LastName             string `json:"lastName" validate:"min=1,max=255"`
	Nickname             string `json:"nickname" validate:"min=8,max=255"`
	Password             string `json:"password" validate:"min=8,max=64"`
	PasswordConfirmation string `json:"passwordConfirmation" validate:"min=8,max=64"`
}

type CallNotificationType string

const (
	CallNotificationTypeStartCall   CallNotificationType = "START_CALL"
	CallNotificationTypeEndCall     CallNotificationType = "END_CALL"
	CallNotificationTypeDeclineCall CallNotificationType = "DECLINE_CALL"
	CallNotificationTypeAnswerCall  CallNotificationType = "ANSWER_CALL"
)

var AllCallNotificationType = []CallNotificationType{
	CallNotificationTypeStartCall,
	CallNotificationTypeEndCall,
	CallNotificationTypeDeclineCall,
	CallNotificationTypeAnswerCall,
}

func (e CallNotificationType) IsValid() bool {
	switch e {
	case CallNotificationTypeStartCall, CallNotificationTypeEndCall, CallNotificationTypeDeclineCall, CallNotificationTypeAnswerCall:
		return true
	}
	return false
}

func (e CallNotificationType) String() string {
	return string(e)
}

func (e *CallNotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CallNotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CallNotificationType", str)
	}
	return nil
}

func (e CallNotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CallType string

const (
	CallTypeAudio CallType = "AUDIO"
	CallTypeVideo CallType = "VIDEO"
)

var AllCallType = []CallType{
	CallTypeAudio,
	CallTypeVideo,
}

func (e CallType) IsValid() bool {
	switch e {
	case CallTypeAudio, CallTypeVideo:
		return true
	}
	return false
}

func (e CallType) String() string {
	return string(e)
}

func (e *CallType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CallType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CallType", str)
	}
	return nil
}

func (e CallType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
