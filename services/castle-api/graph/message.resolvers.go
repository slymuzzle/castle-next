package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"journeyhub/ent"
	"journeyhub/ent/message"
	"journeyhub/ent/room"
	"journeyhub/ent/schema/pulid"
	"journeyhub/graph/generated"
	"journeyhub/graph/model"

	"entgo.io/contrib/entgql"
)

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, input model.SendMessageInput) (*ent.MessageEdge, error) {
	if validationErrors := r.validationService.ValidateGqlStruct(input); len(validationErrors) > 0 {
		return nil, validationErrors
	}

	msg, err := r.chatService.SendMessage(ctx, input)
	if err != nil {
		return nil, err
	}

	return msg.ToEdge(ent.DefaultMessageOrder), nil
}

// UpdateMessage is the resolver for the updateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, messageID pulid.ID, input model.UpdateMessageInput) (*ent.MessageEdge, error) {
	msg, err := r.chatService.UpdateMessage(ctx, messageID, input)
	if err != nil {
		return nil, err
	}

	return msg.ToEdge(ent.DefaultMessageOrder), nil
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, messageID pulid.ID) (*ent.MessageEdge, error) {
	msg, err := r.chatService.DeleteMessage(ctx, messageID)
	if err != nil {
		return nil, err
	}

	return msg.ToEdge(ent.DefaultMessageOrder), nil
}

// MessagesByRoom is the resolver for the messagesByRoom field.
func (r *queryResolver) MessagesByRoom(ctx context.Context, roomID pulid.ID, after *entgql.Cursor[pulid.ID], first *int, before *entgql.Cursor[pulid.ID], last *int, orderBy []*ent.MessageOrder, where *ent.MessageWhereInput) (*ent.MessageConnection, error) {
	_, err := r.authService.Auth(ctx)
	if err != nil {
		return nil, err
	}

	return r.dbService.Client().Message.Query().
		Where(
			message.HasRoomWith(
				room.ID(roomID),
			),
		).
		Paginate(
			ctx,
			after,
			first,
			before,
			last,
			ent.WithMessageOrder(orderBy),
			ent.WithMessageFilter(where.Filter),
		)
}

// MessageCreated is the resolver for the messageCreated field.
func (r *subscriptionResolver) MessageCreated(ctx context.Context, roomID pulid.ID) (<-chan *ent.MessageEdge, error) {
	return r.chatService.Subscriptions().SubscribeToMessageCreatedEvent(ctx, roomID)
}

// MessageUpdated is the resolver for the messageUpdated field.
func (r *subscriptionResolver) MessageUpdated(ctx context.Context, roomID pulid.ID) (<-chan *ent.MessageEdge, error) {
	return r.chatService.Subscriptions().SubscribeToMessageUpdatedEvent(ctx, roomID)
}

// MessageDeleted is the resolver for the messageDeleted field.
func (r *subscriptionResolver) MessageDeleted(ctx context.Context, roomID pulid.ID) (<-chan pulid.ID, error) {
	return r.chatService.Subscriptions().SubscribeToMessageDeletedEvent(ctx, roomID)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
